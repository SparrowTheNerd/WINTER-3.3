
build/debug/WINTER3-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009744  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009a10  08009a10  0000aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df4  08009df4  0000b104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009df4  08009df4  0000b104  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009df4  08009df4  0000b104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df4  08009df4  0000adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009df8  08009df8  0000adf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08009dfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  20000104  08009f00  0000b104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002058  08009f00  0000c058  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000b132  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036c56  00000000  00000000  0000b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cf0  00000000  00000000  00041dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000159b1  00000000  00000000  00047ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e68  00000000  00000000  0005d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019c0  00000000  00000000  0005f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029d07  00000000  00000000  00060c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a2d2  00000000  00000000  0008a997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054c4  00000000  00000000  00094c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0009a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000104 	.word	0x20000104
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080099f8 	.word	0x080099f8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	20000108 	.word	0x20000108
 8000308:	080099f8 	.word	0x080099f8

0800030c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800030c:	b510      	push	{r4, lr}
 800030e:	b08c      	sub	sp, #48	@ 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000310:	2400      	movs	r4, #0
 8000312:	9409      	str	r4, [sp, #36]	@ 0x24
 8000314:	940a      	str	r4, [sp, #40]	@ 0x28
 8000316:	940b      	str	r4, [sp, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000318:	2224      	movs	r2, #36	@ 0x24
 800031a:	4621      	mov	r1, r4
 800031c:	4668      	mov	r0, sp
 800031e:	f009 fb3e 	bl	800999e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000322:	481f      	ldr	r0, [pc, #124]	@ (80003a0 <MX_ADC1_Init+0x94>)
 8000324:	4b1f      	ldr	r3, [pc, #124]	@ (80003a4 <MX_ADC1_Init+0x98>)
 8000326:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000328:	6044      	str	r4, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800032a:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032c:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800032e:	2304      	movs	r3, #4
 8000330:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000332:	7604      	strb	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000334:	7644      	strb	r4, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033e:	6284      	str	r4, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000340:	62c4      	str	r4, [r0, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000342:	6304      	str	r4, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000344:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000346:	6404      	str	r4, [r0, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000348:	f880 4044 	strb.w	r4, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800034c:	6483      	str	r3, [r0, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034e:	f001 fb05 	bl	800195c <HAL_ADC_Init>
 8000352:	b9d8      	cbnz	r0, 800038c <MX_ADC1_Init+0x80>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000354:	2300      	movs	r3, #0
 8000356:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000358:	a909      	add	r1, sp, #36	@ 0x24
 800035a:	4811      	ldr	r0, [pc, #68]	@ (80003a0 <MX_ADC1_Init+0x94>)
 800035c:	f001 fe20 	bl	8001fa0 <HAL_ADCEx_MultiModeConfigChannel>
 8000360:	b9b8      	cbnz	r0, 8000392 <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000362:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_ADC1_Init+0x9c>)
 8000364:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2306      	movs	r3, #6
 8000368:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000372:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000374:	2204      	movs	r2, #4
 8000376:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 8000378:	9305      	str	r3, [sp, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800037a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	4669      	mov	r1, sp
 8000380:	4807      	ldr	r0, [pc, #28]	@ (80003a0 <MX_ADC1_Init+0x94>)
 8000382:	f000 fcf5 	bl	8000d70 <HAL_ADC_ConfigChannel>
 8000386:	b938      	cbnz	r0, 8000398 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000388:	b00c      	add	sp, #48	@ 0x30
 800038a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800038c:	f000 fa3c 	bl	8000808 <Error_Handler>
 8000390:	e7e0      	b.n	8000354 <MX_ADC1_Init+0x48>
    Error_Handler();
 8000392:	f000 fa39 	bl	8000808 <Error_Handler>
 8000396:	e7e4      	b.n	8000362 <MX_ADC1_Init+0x56>
    Error_Handler();
 8000398:	f000 fa36 	bl	8000808 <Error_Handler>
}
 800039c:	e7f4      	b.n	8000388 <MX_ADC1_Init+0x7c>
 800039e:	bf00      	nop
 80003a0:	20000120 	.word	0x20000120
 80003a4:	40022000 	.word	0x40022000
 80003a8:	2a000400 	.word	0x2a000400

080003ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	b0b8      	sub	sp, #224	@ 0xe0
 80003b0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	2100      	movs	r1, #0
 80003b4:	9133      	str	r1, [sp, #204]	@ 0xcc
 80003b6:	9134      	str	r1, [sp, #208]	@ 0xd0
 80003b8:	9135      	str	r1, [sp, #212]	@ 0xd4
 80003ba:	9136      	str	r1, [sp, #216]	@ 0xd8
 80003bc:	9137      	str	r1, [sp, #220]	@ 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003be:	22b8      	movs	r2, #184	@ 0xb8
 80003c0:	a804      	add	r0, sp, #16
 80003c2:	f009 faec 	bl	800999e <memset>
  if(adcHandle->Instance==ADC1)
 80003c6:	6822      	ldr	r2, [r4, #0]
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <HAL_ADC_MspInit+0xf0>)
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d001      	beq.n	80003d2 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ce:	b038      	add	sp, #224	@ 0xe0
 80003d0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80003dc:	2302      	movs	r3, #2
 80003de:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80003e0:	2210      	movs	r2, #16
 80003e2:	9207      	str	r2, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80003e4:	2204      	movs	r2, #4
 80003e6:	9208      	str	r2, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80003e8:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80003ea:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80003ec:	23c0      	movs	r3, #192	@ 0xc0
 80003ee:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003f0:	a804      	add	r0, sp, #16
 80003f2:	f004 fb61 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 80003f6:	2800      	cmp	r0, #0
 80003f8:	d14c      	bne.n	8000494 <HAL_ADC_MspInit+0xe8>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003fa:	4b29      	ldr	r3, [pc, #164]	@ (80004a0 <HAL_ADC_MspInit+0xf4>)
 80003fc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000400:	f042 0220 	orr.w	r2, r2, #32
 8000404:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000408:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800040c:	f002 0220 	and.w	r2, r2, #32
 8000410:	9200      	str	r2, [sp, #0]
 8000412:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000414:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000418:	f042 0204 	orr.w	r2, r2, #4
 800041c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000420:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000424:	f002 0204 	and.w	r2, r2, #4
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000430:	f042 0201 	orr.w	r2, r2, #1
 8000434:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000438:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800043c:	f002 0201 	and.w	r2, r2, #1
 8000440:	9202      	str	r2, [sp, #8]
 8000442:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000448:	f042 0202 	orr.w	r2, r2, #2
 800044c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	9303      	str	r3, [sp, #12]
 800045a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LIPO_VOLT_Pin|SENS2_Pin;
 800045c:	2311      	movs	r3, #17
 800045e:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	2603      	movs	r6, #3
 8000462:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2500      	movs	r5, #0
 8000466:	9535      	str	r5, [sp, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000468:	ac33      	add	r4, sp, #204	@ 0xcc
 800046a:	4621      	mov	r1, r4
 800046c:	480d      	ldr	r0, [pc, #52]	@ (80004a4 <HAL_ADC_MspInit+0xf8>)
 800046e:	f001 ffbf 	bl	80023f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS6_Pin|SENS5_Pin|SENS4_Pin|SENS3_Pin;
 8000472:	2399      	movs	r3, #153	@ 0x99
 8000474:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000476:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	9535      	str	r5, [sp, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	4621      	mov	r1, r4
 800047c:	480a      	ldr	r0, [pc, #40]	@ (80004a8 <HAL_ADC_MspInit+0xfc>)
 800047e:	f001 ffb7 	bl	80023f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENS1_Pin;
 8000482:	2302      	movs	r3, #2
 8000484:	9333      	str	r3, [sp, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000486:	9634      	str	r6, [sp, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	9535      	str	r5, [sp, #212]	@ 0xd4
    HAL_GPIO_Init(SENS1_GPIO_Port, &GPIO_InitStruct);
 800048a:	4621      	mov	r1, r4
 800048c:	4807      	ldr	r0, [pc, #28]	@ (80004ac <HAL_ADC_MspInit+0x100>)
 800048e:	f001 ffaf 	bl	80023f0 <HAL_GPIO_Init>
}
 8000492:	e79c      	b.n	80003ce <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8000494:	f000 f9b8 	bl	8000808 <Error_Handler>
 8000498:	e7af      	b.n	80003fa <HAL_ADC_MspInit+0x4e>
 800049a:	bf00      	nop
 800049c:	40022000 	.word	0x40022000
 80004a0:	58024400 	.word	0x58024400
 80004a4:	58020800 	.word	0x58020800
 80004a8:	58020000 	.word	0x58020000
 80004ac:	58020400 	.word	0x58020400

080004b0 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80004b0:	b508      	push	{r3, lr}
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <MX_CORDIC_Init+0x18>)
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <MX_CORDIC_Init+0x1c>)
 80004b6:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80004b8:	f001 fe64 	bl	8002184 <HAL_CORDIC_Init>
 80004bc:	b900      	cbnz	r0, 80004c0 <MX_CORDIC_Init+0x10>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80004be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80004c0:	f000 f9a2 	bl	8000808 <Error_Handler>
}
 80004c4:	e7fb      	b.n	80004be <MX_CORDIC_Init+0xe>
 80004c6:	bf00      	nop
 80004c8:	20000190 	.word	0x20000190
 80004cc:	48024400 	.word	0x48024400

080004d0 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 80004d0:	6802      	ldr	r2, [r0, #0]
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_CORDIC_MspInit+0x2c>)
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d000      	beq.n	80004da <HAL_CORDIC_MspInit+0xa>
 80004d8:	4770      	bx	lr
{
 80004da:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80004dc:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 80004e0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80004e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80004e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80004ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80004f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80004f8:	b002      	add	sp, #8
 80004fa:	4770      	bx	lr
 80004fc:	48024400 	.word	0x48024400

08000500 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000502:	4805      	ldr	r0, [pc, #20]	@ (8000518 <MX_FMAC_Init+0x18>)
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <MX_FMAC_Init+0x1c>)
 8000506:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000508:	f001 ff3c 	bl	8002384 <HAL_FMAC_Init>
 800050c:	b900      	cbnz	r0, 8000510 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800050e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000510:	f000 f97a 	bl	8000808 <Error_Handler>
}
 8000514:	e7fb      	b.n	800050e <MX_FMAC_Init+0xe>
 8000516:	bf00      	nop
 8000518:	200001b8 	.word	0x200001b8
 800051c:	48024000 	.word	0x48024000

08000520 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8000520:	6802      	ldr	r2, [r0, #0]
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <HAL_FMAC_MspInit+0x2c>)
 8000524:	429a      	cmp	r2, r3
 8000526:	d000      	beq.n	800052a <HAL_FMAC_MspInit+0xa>
 8000528:	4770      	bx	lr
{
 800052a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <HAL_FMAC_MspInit+0x30>)
 800052e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8000532:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000536:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800053a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800053e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8000546:	b002      	add	sp, #8
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	48024000 	.word	0x48024000
 8000550:	58024400 	.word	0x58024400

08000554 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000558:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	ad05      	add	r5, sp, #20
 800055c:	2400      	movs	r4, #0
 800055e:	9405      	str	r4, [sp, #20]
 8000560:	9406      	str	r4, [sp, #24]
 8000562:	9407      	str	r4, [sp, #28]
 8000564:	9408      	str	r4, [sp, #32]
 8000566:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000568:	4b61      	ldr	r3, [pc, #388]	@ (80006f0 <MX_GPIO_Init+0x19c>)
 800056a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800056e:	f042 0204 	orr.w	r2, r2, #4
 8000572:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000576:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800057a:	f002 0204 	and.w	r2, r2, #4
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000586:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800058a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800058e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000592:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80005a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005aa:	f002 0201 	and.w	r2, r2, #1
 80005ae:	9202      	str	r2, [sp, #8]
 80005b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005b6:	f042 0202 	orr.w	r2, r2, #2
 80005ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80005be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005c2:	f002 0202 	and.w	r2, r2, #2
 80005c6:	9203      	str	r2, [sp, #12]
 80005c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80005ce:	f042 0208 	orr.w	r2, r2, #8
 80005d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80005d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005da:	f003 0308 	and.w	r3, r3, #8
 80005de:	9304      	str	r3, [sp, #16]
 80005e0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PY6_Pin|PY5_Pin|PY4_Pin|PY3_Pin
 80005e2:	f8df a118 	ldr.w	sl, [pc, #280]	@ 80006fc <MX_GPIO_Init+0x1a8>
 80005e6:	4622      	mov	r2, r4
 80005e8:	f240 4166 	movw	r1, #1126	@ 0x466
 80005ec:	4650      	mov	r0, sl
 80005ee:	f002 f8bd 	bl	800276c <HAL_GPIO_WritePin>
                          |LoRa_PA_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PY2_Pin|LoRa_CS_Pin|LoRa_RST_Pin, GPIO_PIN_RESET);
 80005f2:	4f40      	ldr	r7, [pc, #256]	@ (80006f4 <MX_GPIO_Init+0x1a0>)
 80005f4:	4622      	mov	r2, r4
 80005f6:	21e0      	movs	r1, #224	@ 0xe0
 80005f8:	4638      	mov	r0, r7
 80005fa:	f002 f8b7 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PY1_GPIO_Port, PY1_Pin, GPIO_PIN_RESET);
 80005fe:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8000700 <MX_GPIO_Init+0x1ac>
 8000602:	4622      	mov	r2, r4
 8000604:	2101      	movs	r1, #1
 8000606:	4648      	mov	r0, r9
 8000608:	f002 f8b0 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800060c:	f8df b0f4 	ldr.w	fp, [pc, #244]	@ 8000704 <MX_GPIO_Init+0x1b0>
 8000610:	4622      	mov	r2, r4
 8000612:	2104      	movs	r1, #4
 8000614:	4658      	mov	r0, fp
 8000616:	f002 f8a9 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1;
 800061a:	f24c 0302 	movw	r3, #49154	@ 0xc002
 800061e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	f04f 0803 	mov.w	r8, #3
 8000624:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	4629      	mov	r1, r5
 800062c:	4638      	mov	r0, r7
 800062e:	f001 fedf 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000632:	2302      	movs	r3, #2
 8000634:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000636:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800063c:	4629      	mov	r1, r5
 800063e:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <MX_GPIO_Init+0x1a4>)
 8000640:	f001 fed6 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PY6_Pin PY5_Pin PY4_Pin PY3_Pin
                           LoRa_PA_EN_Pin */
  GPIO_InitStruct.Pin = PY6_Pin|PY5_Pin|PY4_Pin|PY3_Pin
 8000644:	f240 4366 	movw	r3, #1126	@ 0x466
 8000648:	9305      	str	r3, [sp, #20]
                          |LoRa_PA_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2601      	movs	r6, #1
 800064c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	4629      	mov	r1, r5
 8000654:	4650      	mov	r0, sl
 8000656:	f001 fecb 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PY2_Pin LoRa_CS_Pin LoRa_RST_Pin */
  GPIO_InitStruct.Pin = PY2_Pin|LoRa_CS_Pin|LoRa_RST_Pin;
 800065a:	23e0      	movs	r3, #224	@ 0xe0
 800065c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	4629      	mov	r1, r5
 8000666:	4638      	mov	r0, r7
 8000668:	f001 fec2 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PY1_Pin */
  GPIO_InitStruct.Pin = PY1_Pin;
 800066c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(PY1_GPIO_Port, &GPIO_InitStruct);
 8000674:	4629      	mov	r1, r5
 8000676:	4648      	mov	r0, r9
 8000678:	f001 feba 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800067c:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000680:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	4629      	mov	r1, r5
 800068a:	4648      	mov	r0, r9
 800068c:	f001 feb0 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_BUSY_Pin */
  GPIO_InitStruct.Pin = LoRa_BUSY_Pin;
 8000690:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000694:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LoRa_BUSY_GPIO_Port, &GPIO_InitStruct);
 800069a:	4629      	mov	r1, r5
 800069c:	4648      	mov	r0, r9
 800069e:	f001 fea7 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	4629      	mov	r1, r5
 80006b0:	4650      	mov	r0, sl
 80006b2:	f001 fe9d 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT_Pin HIGHG_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin|HIGHG_INT_Pin|MAG_INT_Pin;
 80006b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	4629      	mov	r1, r5
 80006c6:	4638      	mov	r0, r7
 80006c8:	f001 fe92 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80006cc:	2304      	movs	r3, #4
 80006ce:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80006d6:	4629      	mov	r1, r5
 80006d8:	4658      	mov	r0, fp
 80006da:	f001 fe89 	bl	80023f0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 80006de:	4621      	mov	r1, r4
 80006e0:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80006e4:	f000 fa7e 	bl	8000be4 <HAL_SYSCFG_AnalogSwitchConfig>

}
 80006e8:	b00b      	add	sp, #44	@ 0x2c
 80006ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ee:	bf00      	nop
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58020800 	.word	0x58020800
 80006f8:	58021c00 	.word	0x58021c00
 80006fc:	58020000 	.word	0x58020000
 8000700:	58020400 	.word	0x58020400
 8000704:	58020c00 	.word	0x58020c00

08000708 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000708:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <MX_I2C3_Init+0x4c>)
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_I2C3_Init+0x50>)
 800070e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00602173;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C3_Init+0x54>)
 8000712:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	2201      	movs	r2, #1
 800071a:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800071e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000726:	f002 f83d 	bl	80027a4 <HAL_I2C_Init>
 800072a:	b950      	cbnz	r0, 8000742 <MX_I2C3_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4809      	ldr	r0, [pc, #36]	@ (8000754 <MX_I2C3_Init+0x4c>)
 8000730:	f002 f908 	bl	8002944 <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	b940      	cbnz	r0, 8000748 <MX_I2C3_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_I2C3_Init+0x4c>)
 800073a:	f002 f95b 	bl	80029f4 <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	b930      	cbnz	r0, 800074e <MX_I2C3_Init+0x46>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000740:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000742:	f000 f861 	bl	8000808 <Error_Handler>
 8000746:	e7f1      	b.n	800072c <MX_I2C3_Init+0x24>
    Error_Handler();
 8000748:	f000 f85e 	bl	8000808 <Error_Handler>
 800074c:	e7f3      	b.n	8000736 <MX_I2C3_Init+0x2e>
    Error_Handler();
 800074e:	f000 f85b 	bl	8000808 <Error_Handler>
}
 8000752:	e7f5      	b.n	8000740 <MX_I2C3_Init+0x38>
 8000754:	200001f0 	.word	0x200001f0
 8000758:	40005c00 	.word	0x40005c00
 800075c:	00602173 	.word	0x00602173

08000760 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	2300      	movs	r3, #0
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	9304      	str	r3, [sp, #16]
 800076a:	9305      	str	r3, [sp, #20]
 800076c:	9306      	str	r3, [sp, #24]
 800076e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C3)
 8000770:	6802      	ldr	r2, [r0, #0]
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <HAL_I2C_MspInit+0x98>)
 8000774:	429a      	cmp	r2, r3
 8000776:	d001      	beq.n	800077c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000778:	b009      	add	sp, #36	@ 0x24
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	4c1f      	ldr	r4, [pc, #124]	@ (80007fc <HAL_I2C_MspInit+0x9c>)
 800077e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800078a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80007a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2712      	movs	r7, #18
 80007b6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80007b8:	2604      	movs	r6, #4
 80007ba:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	ad03      	add	r5, sp, #12
 80007be:	4629      	mov	r1, r5
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <HAL_I2C_MspInit+0xa0>)
 80007c2:	f001 fe15 	bl	80023f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007cc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80007d4:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	4629      	mov	r1, r5
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <HAL_I2C_MspInit+0xa4>)
 80007da:	f001 fe09 	bl	80023f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80007de:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80007e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80007e6:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 80007ea:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 80007ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	9b02      	ldr	r3, [sp, #8]
}
 80007f6:	e7bf      	b.n	8000778 <HAL_I2C_MspInit+0x18>
 80007f8:	40005c00 	.word	0x40005c00
 80007fc:	58024400 	.word	0x58024400
 8000800:	58020800 	.word	0x58020800
 8000804:	58020000 	.word	0x58020000

08000808 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080a:	e7fe      	b.n	800080a <Error_Handler+0x2>

0800080c <SystemClock_Config>:
{
 800080c:	b500      	push	{lr}
 800080e:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000810:	224c      	movs	r2, #76	@ 0x4c
 8000812:	2100      	movs	r1, #0
 8000814:	a809      	add	r0, sp, #36	@ 0x24
 8000816:	f009 f8c2 	bl	800999e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	2220      	movs	r2, #32
 800081c:	2100      	movs	r1, #0
 800081e:	a801      	add	r0, sp, #4
 8000820:	f009 f8bd 	bl	800999e <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000824:	2004      	movs	r0, #4
 8000826:	f002 ffcb 	bl	80037c0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800082a:	2300      	movs	r3, #0
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <SystemClock_Config+0xa4>)
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000836:	619a      	str	r2, [r3, #24]
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000842:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <SystemClock_Config+0xa4>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800084a:	d0fa      	beq.n	8000842 <SystemClock_Config+0x36>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800084c:	2321      	movs	r3, #33	@ 0x21
 800084e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000854:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000856:	2201      	movs	r2, #1
 8000858:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085e:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000860:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000862:	2114      	movs	r1, #20
 8000864:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000866:	9216      	str	r2, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000868:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086a:	9318      	str	r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800086c:	230c      	movs	r3, #12
 800086e:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000870:	2300      	movs	r3, #0
 8000872:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000874:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	a809      	add	r0, sp, #36	@ 0x24
 8000878:	f003 f818 	bl	80038ac <HAL_RCC_OscConfig>
 800087c:	b9a0      	cbnz	r0, 80008a8 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	@ 0x3f
 8000880:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2103      	movs	r1, #3
 8000884:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800088a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000896:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000898:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089a:	a801      	add	r0, sp, #4
 800089c:	f003 fcd4 	bl	8004248 <HAL_RCC_ClockConfig>
 80008a0:	b920      	cbnz	r0, 80008ac <SystemClock_Config+0xa0>
}
 80008a2:	b01d      	add	sp, #116	@ 0x74
 80008a4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008a8:	f7ff ffae 	bl	8000808 <Error_Handler>
    Error_Handler();
 80008ac:	f7ff ffac 	bl	8000808 <Error_Handler>
 80008b0:	58024800 	.word	0x58024800

080008b4 <PeriphCommonClock_Config>:
{
 80008b4:	b510      	push	{r4, lr}
 80008b6:	b0ae      	sub	sp, #184	@ 0xb8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	22b8      	movs	r2, #184	@ 0xb8
 80008ba:	2100      	movs	r1, #0
 80008bc:	4668      	mov	r0, sp
 80008be:	f009 f86e 	bl	800999e <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SPI2
 80008c2:	f241 0208 	movw	r2, #4104	@ 0x1008
 80008c6:	2300      	movs	r3, #0
 80008c8:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 16;
 80008d0:	2210      	movs	r2, #16
 80008d2:	920b      	str	r2, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80008d4:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80008d6:	930d      	str	r3, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 80008d8:	2303      	movs	r3, #3
 80008da:	930e      	str	r3, [sp, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80008dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008e0:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	9317      	str	r3, [sp, #92]	@ 0x5c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_PLL3;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ee:	4668      	mov	r0, sp
 80008f0:	f004 f8e2 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	b908      	cbnz	r0, 80008fa <PeriphCommonClock_Config+0x46>
}
 80008f6:	b02e      	add	sp, #184	@ 0xb8
 80008f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80008fa:	f7ff ff85 	bl	8000808 <Error_Handler>
	...

08000900 <main>:
{
 8000900:	b510      	push	{r4, lr}
  HAL_Init();
 8000902:	f000 f91b 	bl	8000b3c <HAL_Init>
  SystemClock_Config();
 8000906:	f7ff ff81 	bl	800080c <SystemClock_Config>
  PeriphCommonClock_Config();
 800090a:	f7ff ffd3 	bl	80008b4 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800090e:	f7ff fe21 	bl	8000554 <MX_GPIO_Init>
  MX_CORDIC_Init();
 8000912:	f7ff fdcd 	bl	80004b0 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8000916:	f7ff fdf3 	bl	8000500 <MX_FMAC_Init>
  MX_I2C3_Init();
 800091a:	f7ff fef5 	bl	8000708 <MX_I2C3_Init>
  MX_SPI1_Init();
 800091e:	f000 f829 	bl	8000974 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000922:	f000 f853 	bl	80009cc <MX_SPI2_Init>
  MX_TIM2_Init();
 8000926:	f007 fc83 	bl	8008230 <MX_TIM2_Init>
  MX_TIM4_Init();
 800092a:	f007 fcc1 	bl	80082b0 <MX_TIM4_Init>
  MX_ADC1_Init();
 800092e:	f7ff fced 	bl	800030c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000932:	f007 fd19 	bl	8008368 <MX_USB_DEVICE_Init>
    usbTxBufLen = snprintf((char *) usbTxBuf, USBBUF_MAXLEN, "Hello World!\r\n");
 8000936:	4c0b      	ldr	r4, [pc, #44]	@ (8000964 <main+0x64>)
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <main+0x68>)
 800093a:	46a4      	mov	ip, r4
 800093c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8000942:	f82c 3b02 	strh.w	r3, [ip], #2
 8000946:	0c1b      	lsrs	r3, r3, #16
 8000948:	f88c 3000 	strb.w	r3, [ip]
 800094c:	210e      	movs	r1, #14
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <main+0x6c>)
 8000950:	8019      	strh	r1, [r3, #0]
    CDC_Transmit_HS(usbTxBuf, usbTxBufLen);
 8000952:	4620      	mov	r0, r4
 8000954:	f008 f800 	bl	8008958 <CDC_Transmit_HS>
    HAL_Delay(1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095c:	f000 f92e 	bl	8000bbc <HAL_Delay>
  while (1)
 8000960:	e7e9      	b.n	8000936 <main+0x36>
 8000962:	bf00      	nop
 8000964:	20000248 	.word	0x20000248
 8000968:	08009a10 	.word	0x08009a10
 800096c:	20000244 	.word	0x20000244

08000970 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000970:	4770      	bx	lr
	...

08000974 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000974:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000976:	4813      	ldr	r0, [pc, #76]	@ (80009c4 <MX_SPI1_Init+0x50>)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_SPI1_Init+0x54>)
 800097a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000980:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	2300      	movs	r3, #0
 8000984:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000986:	2203      	movs	r2, #3
 8000988:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098c:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000992:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000996:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000998:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800099c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a4:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009a6:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a8:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009aa:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ac:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009ae:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b0:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b2:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009b4:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b6:	f005 fd6f 	bl	8006498 <HAL_SPI_Init>
 80009ba:	b900      	cbnz	r0, 80009be <MX_SPI1_Init+0x4a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009be:	f7ff ff23 	bl	8000808 <Error_Handler>
}
 80009c2:	e7fb      	b.n	80009bc <MX_SPI1_Init+0x48>
 80009c4:	20000350 	.word	0x20000350
 80009c8:	40013000 	.word	0x40013000

080009cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009cc:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <MX_SPI2_Init+0x50>)
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_SPI2_Init+0x54>)
 80009d2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009d8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	2300      	movs	r3, #0
 80009dc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009de:	2203      	movs	r2, #3
 80009e0:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009ea:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ec:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ee:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f0:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009f4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009fa:	6342      	str	r2, [r0, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009fc:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009fe:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a00:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a02:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a04:	6483      	str	r3, [r0, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a06:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a08:	6503      	str	r3, [r0, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a0a:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a0c:	6583      	str	r3, [r0, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a0e:	f005 fd43 	bl	8006498 <HAL_SPI_Init>
 8000a12:	b900      	cbnz	r0, 8000a16 <MX_SPI2_Init+0x4a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a16:	f7ff fef7 	bl	8000808 <Error_Handler>
}
 8000a1a:	e7fb      	b.n	8000a14 <MX_SPI2_Init+0x48>
 8000a1c:	200002c8 	.word	0x200002c8
 8000a20:	40003800 	.word	0x40003800

08000a24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a24:	b500      	push	{lr}
 8000a26:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	9306      	str	r3, [sp, #24]
 8000a2e:	9307      	str	r3, [sp, #28]
 8000a30:	9308      	str	r3, [sp, #32]
 8000a32:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <HAL_SPI_MspInit+0xb8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d005      	beq.n	8000a48 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8000a3c:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <HAL_SPI_MspInit+0xbc>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d026      	beq.n	8000a90 <HAL_SPI_MspInit+0x6c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a42:	b00b      	add	sp, #44	@ 0x2c
 8000a44:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a48:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <HAL_SPI_MspInit+0xc0>)
 8000a4a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000a4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000a52:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000a56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000a5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000a5e:	9201      	str	r2, [sp, #4]
 8000a60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000a66:	f042 0202 	orr.w	r2, r2, #2
 8000a6a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8000a7a:	2338      	movs	r3, #56	@ 0x38
 8000a7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a82:	2305      	movs	r3, #5
 8000a84:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	a905      	add	r1, sp, #20
 8000a88:	4817      	ldr	r0, [pc, #92]	@ (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a8a:	f001 fcb1 	bl	80023f0 <HAL_GPIO_Init>
 8000a8e:	e7d8      	b.n	8000a42 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_SPI_MspInit+0xc0>)
 8000a92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000a96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a9a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000a9e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000aa2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000aa6:	9203      	str	r2, [sp, #12]
 8000aa8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000aae:	f042 0202 	orr.w	r2, r2, #2
 8000ab2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	9304      	str	r3, [sp, #16]
 8000ac0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = LoRa_SCK_Pin|LoRa_MISO_Pin|LoRa_MOSI_Pin;
 8000ac2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ac6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000acc:	2305      	movs	r3, #5
 8000ace:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	a905      	add	r1, sp, #20
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000ad4:	f001 fc8c 	bl	80023f0 <HAL_GPIO_Init>
}
 8000ad8:	e7b3      	b.n	8000a42 <HAL_SPI_MspInit+0x1e>
 8000ada:	bf00      	nop
 8000adc:	40013000 	.word	0x40013000
 8000ae0:	40003800 	.word	0x40003800
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	58020400 	.word	0x58020400

08000aec <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_InitTick+0x44>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b90b      	cbnz	r3, 8000af6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000af2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000af4:	4770      	bx	lr
{
 8000af6:	b510      	push	{r4, lr}
 8000af8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_InitTick+0x48>)
 8000b04:	6810      	ldr	r0, [r2, #0]
 8000b06:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0a:	f001 fbf1 	bl	80022f0 <HAL_SYSTICK_Config>
 8000b0e:	b968      	cbnz	r0, 8000b2c <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	2c0f      	cmp	r4, #15
 8000b12:	d901      	bls.n	8000b18 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000b14:	2001      	movs	r0, #1
 8000b16:	e00a      	b.n	8000b2e <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f001 fbb4 	bl	800228c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <HAL_InitTick+0x4c>)
 8000b26:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e000      	b.n	8000b2e <HAL_InitTick+0x42>
      return HAL_ERROR;
 8000b2c:	2001      	movs	r0, #1
}
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	2000000c 	.word	0x2000000c
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_Init>:
{
 8000b3c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 fb86 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b44:	f003 fa84 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8000b48:	490f      	ldr	r1, [pc, #60]	@ (8000b88 <HAL_Init+0x4c>)
 8000b4a:	698b      	ldr	r3, [r1, #24]
 8000b4c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000b50:	4a0e      	ldr	r2, [pc, #56]	@ (8000b8c <HAL_Init+0x50>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b5a:	698b      	ldr	r3, [r1, #24]
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	f003 031f 	and.w	r3, r3, #31
 8000b66:	fa20 f303 	lsr.w	r3, r0, r3
 8000b6a:	4a09      	ldr	r2, [pc, #36]	@ (8000b90 <HAL_Init+0x54>)
 8000b6c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_Init+0x58>)
 8000b70:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	200f      	movs	r0, #15
 8000b74:	f7ff ffba 	bl	8000aec <HAL_InitTick>
 8000b78:	b110      	cbz	r0, 8000b80 <HAL_Init+0x44>
    return HAL_ERROR;
 8000b7a:	2401      	movs	r4, #1
}
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	bd10      	pop	{r4, pc}
 8000b80:	4604      	mov	r4, r0
  HAL_MspInit();
 8000b82:	f001 ff8b 	bl	8002a9c <HAL_MspInit>
  return HAL_OK;
 8000b86:	e7f9      	b.n	8000b7c <HAL_Init+0x40>
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	08009de4 	.word	0x08009de4
 8000b90:	20000008 	.word	0x20000008
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_IncTick+0x10>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <HAL_IncTick+0x14>)
 8000b9e:	6811      	ldr	r1, [r2, #0]
 8000ba0:	440b      	add	r3, r1
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	200003d8 	.word	0x200003d8

08000bb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb0:	4b01      	ldr	r3, [pc, #4]	@ (8000bb8 <HAL_GetTick+0x8>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200003d8 	.word	0x200003d8

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff6 	bl	8000bb0 <HAL_GetTick>
 8000bc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000bca:	d002      	beq.n	8000bd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <HAL_Delay+0x24>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	f7ff ffed 	bl	8000bb0 <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d3fa      	bcc.n	8000bd2 <HAL_Delay+0x16>
  {
  }
}
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000

08000be4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000be4:	b538      	push	{r3, r4, r5, lr}
 8000be6:	4604      	mov	r4, r0
 8000be8:	460d      	mov	r5, r1
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
 8000bea:	f010 6f70 	tst.w	r0, #251658240	@ 0xf000000
 8000bee:	d006      	beq.n	8000bfe <HAL_SYSCFG_AnalogSwitchConfig+0x1a>
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000bf2:	6850      	ldr	r0, [r2, #4]
 8000bf4:	ea20 0004 	bic.w	r0, r0, r4
 8000bf8:	4328      	orrs	r0, r5
 8000bfa:	6050      	str	r0, [r2, #4]
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
 8000bfe:	f240 217a 	movw	r1, #634	@ 0x27a
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <HAL_SYSCFG_AnalogSwitchConfig+0x2c>)
 8000c04:	f7ff feb4 	bl	8000970 <assert_failed>
 8000c08:	e7f2      	b.n	8000bf0 <HAL_SYSCFG_AnalogSwitchConfig+0xc>
 8000c0a:	bf00      	nop
 8000c0c:	58000400 	.word	0x58000400
 8000c10:	08009a20 	.word	0x08009a20

08000c14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000c14:	b410      	push	{r4}
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c16:	f100 0c60 	add.w	ip, r0, #96	@ 0x60
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8000c1a:	4c0d      	ldr	r4, [pc, #52]	@ (8000c50 <LL_ADC_SetOffset+0x3c>)
 8000c1c:	42a0      	cmp	r0, r4
 8000c1e:	d00c      	beq.n	8000c3a <LL_ADC_SetOffset+0x26>
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000c20:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 8000c24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c28:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c38:	4770      	bx	lr
    MODIFY_REG(*preg,
 8000c3a:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 8000c3e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8000c42:	4313      	orrs	r3, r2
 8000c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c48:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
 8000c4c:	e7f2      	b.n	8000c34 <LL_ADC_SetOffset+0x20>
 8000c4e:	bf00      	nop
 8000c50:	58026000 	.word	0x58026000

08000c54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c54:	f100 0c60 	add.w	ip, r0, #96	@ 0x60
  if (ADCx == ADC3)
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <LL_ADC_SetOffsetState+0x2c>)
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d007      	beq.n	8000c6e <LL_ADC_SetOffsetState+0x1a>
               ADC3_OFR1_OFFSET1_EN,
               OffsetState);
  }
  else
  {
    MODIFY_REG(*preg,
 8000c5e:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8000c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c66:	431a      	orrs	r2, r3
 8000c68:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8000c6c:	4770      	bx	lr
    MODIFY_REG(*preg,
 8000c6e:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8000c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	4313      	orrs	r3, r2
 8000c78:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	58026000 	.word	0x58026000

08000c84 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c84:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c86:	3030      	adds	r0, #48	@ 0x30
 8000c88:	0a0b      	lsrs	r3, r1, #8
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 8000c90:	58c4      	ldr	r4, [r0, r3]
 8000c92:	f001 011f 	and.w	r1, r1, #31
 8000c96:	f04f 0c1f 	mov.w	ip, #31
 8000c9a:	fa0c fc01 	lsl.w	ip, ip, r1
 8000c9e:	ea24 0c0c 	bic.w	ip, r4, ip
 8000ca2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000ca6:	408a      	lsls	r2, r1
 8000ca8:	ea4c 0202 	orr.w	r2, ip, r2
 8000cac:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cb4:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cb6:	3014      	adds	r0, #20
 8000cb8:	0e4b      	lsrs	r3, r1, #25
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8000cc0:	58c4      	ldr	r4, [r0, r3]
 8000cc2:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000cc6:	f04f 0c07 	mov.w	ip, #7
 8000cca:	fa0c fc01 	lsl.w	ip, ip, r1
 8000cce:	ea24 0c0c 	bic.w	ip, r4, ip
 8000cd2:	408a      	lsls	r2, r1
 8000cd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cd8:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_SetChannelSingleDiff>:
{
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <LL_ADC_SetChannelSingleDiff+0x50>)
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d011      	beq.n	8000d0a <LL_ADC_SetChannelSingleDiff+0x2a>
               Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
               (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
  }
  else
  {
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8000ce6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8000cea:	f3c1 0c13 	ubfx	ip, r1, #0, #20
 8000cee:	ea23 0c0c 	bic.w	ip, r3, ip
 8000cf2:	f002 0218 	and.w	r2, r2, #24
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <LL_ADC_SetChannelSingleDiff+0x54>)
 8000cf8:	40d3      	lsrs	r3, r2
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8000d00:	ea4c 0101 	orr.w	r1, ip, r1
 8000d04:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000d08:	4770      	bx	lr
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8000d0a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8000d0e:	f3c1 0c13 	ubfx	ip, r1, #0, #20
 8000d12:	ea23 0c0c 	bic.w	ip, r3, ip
 8000d16:	f002 0218 	and.w	r2, r2, #24
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <LL_ADC_SetChannelSingleDiff+0x54>)
 8000d1c:	40d3      	lsrs	r3, r2
 8000d1e:	400b      	ands	r3, r1
 8000d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d24:	ea4c 0303 	orr.w	r3, ip, r3
 8000d28:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	58026000 	.word	0x58026000
 8000d34:	000fffff 	.word	0x000fffff

08000d38 <LL_ADC_SetChannelPreselection>:
    if (ADCx != ADC3)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <LL_ADC_SetChannelPreselection+0x34>)
 8000d3a:	4298      	cmp	r0, r3
 8000d3c:	d009      	beq.n	8000d52 <LL_ADC_SetChannelPreselection+0x1a>
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000d3e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000d42:	b93b      	cbnz	r3, 8000d54 <LL_ADC_SetChannelPreselection+0x1c>
 8000d44:	f3c1 6184 	ubfx	r1, r1, #26, #5
 8000d48:	2201      	movs	r2, #1
 8000d4a:	408a      	lsls	r2, r1
 8000d4c:	69c3      	ldr	r3, [r0, #28]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61c3      	str	r3, [r0, #28]
}
 8000d52:	4770      	bx	lr
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	fa91 f1a1 	rbit	r1, r1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d58:	b131      	cbz	r1, 8000d68 <LL_ADC_SetChannelPreselection+0x30>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8000d5a:	fab1 f181 	clz	r1, r1
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8000d5e:	f001 011f 	and.w	r1, r1, #31
 8000d62:	2201      	movs	r2, #1
 8000d64:	408a      	lsls	r2, r1
 8000d66:	e7f1      	b.n	8000d4c <LL_ADC_SetChannelPreselection+0x14>
    return 32U;
 8000d68:	2120      	movs	r1, #32
 8000d6a:	e7f8      	b.n	8000d5e <LL_ADC_SetChannelPreselection+0x26>
 8000d6c:	58026000 	.word	0x58026000

08000d70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	4604      	mov	r4, r0
 8000d76:	460d      	mov	r5, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000d7c:	6803      	ldr	r3, [r0, #0]
 8000d7e:	49a2      	ldr	r1, [pc, #648]	@ (8001008 <HAL_ADC_ConfigChannel+0x298>)
 8000d80:	4aa2      	ldr	r2, [pc, #648]	@ (800100c <HAL_ADC_ConfigChannel+0x29c>)
 8000d82:	428b      	cmp	r3, r1
 8000d84:	bf18      	it	ne
 8000d86:	4293      	cmpne	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_ADC_ConfigChannel+0x2a>
 8000d8a:	4aa1      	ldr	r2, [pc, #644]	@ (8001010 <HAL_ADC_ConfigChannel+0x2a0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d004      	beq.n	8000d9a <HAL_ADC_ConfigChannel+0x2a>
 8000d90:	f640 310d 	movw	r1, #2829	@ 0xb0d
 8000d94:	489f      	ldr	r0, [pc, #636]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000d96:	f7ff fdeb 	bl	8000970 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000d9a:	686b      	ldr	r3, [r5, #4]
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	bf18      	it	ne
 8000da0:	2b0c      	cmpne	r3, #12
 8000da2:	d027      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000da4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8000da8:	f200 80d0 	bhi.w	8000f4c <HAL_ADC_ConfigChannel+0x1dc>
 8000dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000db0:	d213      	bcs.n	8000dda <HAL_ADC_ConfigChannel+0x6a>
 8000db2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000db6:	d818      	bhi.n	8000dea <HAL_ADC_ConfigChannel+0x7a>
 8000db8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dbc:	d308      	bcc.n	8000dd0 <HAL_ADC_ConfigChannel+0x60>
 8000dbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000dc2:	4a95      	ldr	r2, [pc, #596]	@ (8001018 <HAL_ADC_ConfigChannel+0x2a8>)
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	f013 0f01 	tst.w	r3, #1
 8000dcc:	d112      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000dce:	e00c      	b.n	8000dea <HAL_ADC_ConfigChannel+0x7a>
 8000dd0:	2b12      	cmp	r3, #18
 8000dd2:	d00f      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000dd4:	2b18      	cmp	r3, #24
 8000dd6:	d00d      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000dd8:	e007      	b.n	8000dea <HAL_ADC_ConfigChannel+0x7a>
 8000dda:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000dde:	4a8e      	ldr	r2, [pc, #568]	@ (8001018 <HAL_ADC_ConfigChannel+0x2a8>)
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	f013 0f01 	tst.w	r3, #1
 8000de8:	d104      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000dea:	f640 310e 	movw	r1, #2830	@ 0xb0e
 8000dee:	4889      	ldr	r0, [pc, #548]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000df0:	f7ff fdbe 	bl	8000970 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000df4:	68ab      	ldr	r3, [r5, #8]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	f200 80b2 	bhi.w	8000f60 <HAL_ADC_ConfigChannel+0x1f0>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000dfc:	68eb      	ldr	r3, [r5, #12]
 8000dfe:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000e02:	4a86      	ldr	r2, [pc, #536]	@ (800101c <HAL_ADC_ConfigChannel+0x2ac>)
 8000e04:	428b      	cmp	r3, r1
 8000e06:	bf18      	it	ne
 8000e08:	4293      	cmpne	r3, r2
 8000e0a:	f040 80af 	bne.w	8000f6c <HAL_ADC_ConfigChannel+0x1fc>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000e0e:	692b      	ldr	r3, [r5, #16]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	bf18      	it	ne
 8000e14:	2b00      	cmpne	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0xb0>
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	f200 80ac 	bhi.w	8000f78 <HAL_ADC_ConfigChannel+0x208>
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e20:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	f000 80ad 	beq.w	8000f84 <HAL_ADC_ConfigChannel+0x214>
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.Ratio + 1U)));
  }
  else
  {
#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8000e2a:	6822      	ldr	r2, [r4, #0]
 8000e2c:	4b78      	ldr	r3, [pc, #480]	@ (8001010 <HAL_ADC_ConfigChannel+0x2a0>)
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	f000 80cb 	beq.w	8000fca <HAL_ADC_ConfigChannel+0x25a>
      assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
    }
    else
#endif /* ADC_VER_V5_V90 */
    {
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000e34:	6969      	ldr	r1, [r5, #20]
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8000e36:	68d3      	ldr	r3, [r2, #12]
 8000e38:	f003 031c 	and.w	r3, r3, #28
 8000e3c:	2b1c      	cmp	r3, #28
 8000e3e:	d002      	beq.n	8000e46 <HAL_ADC_ConfigChannel+0xd6>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8000e40:	68d3      	ldr	r3, [r2, #12]
 8000e42:	f003 031c 	and.w	r3, r3, #28
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	4299      	cmp	r1, r3
 8000e52:	f200 80cc 	bhi.w	8000fee <HAL_ADC_ConfigChannel+0x27e>
    }
  }

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8000e56:	692b      	ldr	r3, [r5, #16]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d004      	beq.n	8000e66 <HAL_ADC_ConfigChannel+0xf6>
 8000e5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f000 80ca 	beq.w	8000ffa <HAL_ADC_ConfigChannel+0x28a>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000e66:	68ea      	ldr	r2, [r5, #12]
 8000e68:	4b6c      	ldr	r3, [pc, #432]	@ (800101c <HAL_ADC_ConfigChannel+0x2ac>)
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f000 80fa 	beq.w	8001064 <HAL_ADC_ConfigChannel+0x2f4>
  {
    assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	4a6b      	ldr	r2, [pc, #428]	@ (8001020 <HAL_ADC_ConfigChannel+0x2b0>)
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	bf18      	it	ne
 8000e78:	4293      	cmpne	r3, r2
 8000e7a:	f000 80ff 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000e7e:	4a69      	ldr	r2, [pc, #420]	@ (8001024 <HAL_ADC_ConfigChannel+0x2b4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	f000 80fb 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000e86:	4a68      	ldr	r2, [pc, #416]	@ (8001028 <HAL_ADC_ConfigChannel+0x2b8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	f000 80f7 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000e8e:	4a67      	ldr	r2, [pc, #412]	@ (800102c <HAL_ADC_ConfigChannel+0x2bc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	f000 80f3 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000e96:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8000e9a:	3210      	adds	r2, #16
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	f000 80ed 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ea2:	4a63      	ldr	r2, [pc, #396]	@ (8001030 <HAL_ADC_ConfigChannel+0x2c0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	f000 80e9 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000eaa:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8000eae:	3240      	adds	r2, #64	@ 0x40
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f000 80e3 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_ADC_ConfigChannel+0x2c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	f000 80df 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ebe:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8000ec2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f000 80d8 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ecc:	4a5a      	ldr	r2, [pc, #360]	@ (8001038 <HAL_ADC_ConfigChannel+0x2c8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f000 80d4 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ed4:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8000ed8:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8000edc:	4293      	cmp	r3, r2
 8000ede:	f000 80cd 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ee2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8000ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f000 80c6 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ef0:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_ADC_ConfigChannel+0x2cc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f000 80c2 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000ef8:	4a51      	ldr	r2, [pc, #324]	@ (8001040 <HAL_ADC_ConfigChannel+0x2d0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	f000 80be 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f00:	4a50      	ldr	r2, [pc, #320]	@ (8001044 <HAL_ADC_ConfigChannel+0x2d4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f000 80ba 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_ADC_ConfigChannel+0x2d8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	f000 80b6 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_ADC_ConfigChannel+0x2dc>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	f000 80b2 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_ADC_ConfigChannel+0x2e0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	f000 80ae 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_ADC_ConfigChannel+0x2e4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f000 80aa 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_ADC_ConfigChannel+0x2e8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	f000 80a6 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f30:	4a4a      	ldr	r2, [pc, #296]	@ (800105c <HAL_ADC_ConfigChannel+0x2ec>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	f000 80a2 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f38:	4a49      	ldr	r2, [pc, #292]	@ (8001060 <HAL_ADC_ConfigChannel+0x2f0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	f000 809e 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f40:	f640 312c 	movw	r1, #2860	@ 0xb2c
 8000f44:	4833      	ldr	r0, [pc, #204]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f46:	f7ff fd13 	bl	8000970 <assert_failed>
 8000f4a:	e097      	b.n	800107c <HAL_ADC_ConfigChannel+0x30c>
 8000f4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f50:	f43f af50 	beq.w	8000df4 <HAL_ADC_ConfigChannel+0x84>
 8000f54:	f240 3206 	movw	r2, #774	@ 0x306
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f47f af46 	bne.w	8000dea <HAL_ADC_ConfigChannel+0x7a>
 8000f5e:	e749      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x84>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000f60:	f640 310f 	movw	r1, #2831	@ 0xb0f
 8000f64:	482b      	ldr	r0, [pc, #172]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f66:	f7ff fd03 	bl	8000970 <assert_failed>
 8000f6a:	e747      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x8c>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 8000f6c:	f44f 6131 	mov.w	r1, #2832	@ 0xb10
 8000f70:	4828      	ldr	r0, [pc, #160]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f72:	f7ff fcfd 	bl	8000970 <assert_failed>
 8000f76:	e74a      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x9e>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 8000f78:	f640 3111 	movw	r1, #2833	@ 0xb11
 8000f7c:	4825      	ldr	r0, [pc, #148]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000f7e:	f7ff fcf7 	bl	8000970 <assert_failed>
 8000f82:	e74d      	b.n	8000e20 <HAL_ADC_ConfigChannel+0xb0>
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.Ratio + 1U)));
 8000f84:	696b      	ldr	r3, [r5, #20]
 8000f86:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000f88:	3201      	adds	r2, #1
 8000f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f8e:	6822      	ldr	r2, [r4, #0]
  if (ADCx == ADC3)
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <HAL_ADC_ConfigChannel+0x2a0>)
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d015      	beq.n	8000fc2 <HAL_ADC_ConfigChannel+0x252>
    if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
 8000f96:	68d3      	ldr	r3, [r2, #12]
 8000f98:	f003 031c 	and.w	r3, r3, #28
 8000f9c:	2b1c      	cmp	r3, #28
 8000f9e:	d002      	beq.n	8000fa6 <HAL_ADC_ConfigChannel+0x236>
      return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8000fa0:	68d3      	ldr	r3, [r2, #12]
 8000fa2:	f003 031c 	and.w	r3, r3, #28
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	4299      	cmp	r1, r3
 8000fb2:	f67f af50 	bls.w	8000e56 <HAL_ADC_ConfigChannel+0xe6>
 8000fb6:	f640 3115 	movw	r1, #2837	@ 0xb15
 8000fba:	4816      	ldr	r0, [pc, #88]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000fbc:	f7ff fcd8 	bl	8000970 <assert_failed>
 8000fc0:	e749      	b.n	8000e56 <HAL_ADC_ConfigChannel+0xe6>
    return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
 8000fc2:	68d3      	ldr	r3, [r2, #12]
 8000fc4:	f003 0318 	and.w	r3, r3, #24
 8000fc8:	e7ed      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x236>
      assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000fca:	6969      	ldr	r1, [r5, #20]
 8000fcc:	68d3      	ldr	r3, [r2, #12]
 8000fce:	f003 0318 	and.w	r3, r3, #24
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	f67f af3a 	bls.w	8000e56 <HAL_ADC_ConfigChannel+0xe6>
 8000fe2:	f640 311c 	movw	r1, #2844	@ 0xb1c
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000fe8:	f7ff fcc2 	bl	8000970 <assert_failed>
 8000fec:	e733      	b.n	8000e56 <HAL_ADC_ConfigChannel+0xe6>
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8000fee:	f640 3121 	movw	r1, #2849	@ 0xb21
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8000ff4:	f7ff fcbc 	bl	8000970 <assert_failed>
 8000ff8:	e72d      	b.n	8000e56 <HAL_ADC_ConfigChannel+0xe6>
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8000ffa:	f640 3127 	movw	r1, #2855	@ 0xb27
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <HAL_ADC_ConfigChannel+0x2a4>)
 8001000:	f7ff fcb6 	bl	8000970 <assert_failed>
 8001004:	e72f      	b.n	8000e66 <HAL_ADC_ConfigChannel+0xf6>
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000
 800100c:	40022100 	.word	0x40022100
 8001010:	58026000 	.word	0x58026000
 8001014:	08009a54 	.word	0x08009a54
 8001018:	01041041 	.word	0x01041041
 800101c:	47ff0000 	.word	0x47ff0000
 8001020:	04300002 	.word	0x04300002
 8001024:	08600004 	.word	0x08600004
 8001028:	0c900008 	.word	0x0c900008
 800102c:	10c00010 	.word	0x10c00010
 8001030:	19200040 	.word	0x19200040
 8001034:	21800100 	.word	0x21800100
 8001038:	2a000400 	.word	0x2a000400
 800103c:	36902000 	.word	0x36902000
 8001040:	3ac04000 	.word	0x3ac04000
 8001044:	3ef08000 	.word	0x3ef08000
 8001048:	43210000 	.word	0x43210000
 800104c:	47520000 	.word	0x47520000
 8001050:	4b840000 	.word	0x4b840000
 8001054:	4fb80000 	.word	0x4fb80000
 8001058:	c7520000 	.word	0xc7520000
 800105c:	c3210000 	.word	0xc3210000
 8001060:	cb840000 	.word	0xcb840000
  }
  else
  {
    if (hadc->Instance == ADC1)
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	4ba0      	ldr	r3, [pc, #640]	@ (80012e8 <HAL_ADC_ConfigChannel+0x578>)
 8001068:	429a      	cmp	r2, r3
 800106a:	d01f      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x33c>
    {
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
    }
    if (hadc->Instance == ADC2)
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	4b9f      	ldr	r3, [pc, #636]	@ (80012ec <HAL_ADC_ConfigChannel+0x57c>)
 8001070:	429a      	cmp	r2, r3
 8001072:	d048      	beq.n	8001106 <HAL_ADC_ConfigChannel+0x396>
    {
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
    }
#if defined(ADC3)
    /* ADC3 is not available on some STM32H7 products */
    if (hadc->Instance == ADC3)
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	4b9e      	ldr	r3, [pc, #632]	@ (80012f0 <HAL_ADC_ConfigChannel+0x580>)
 8001078:	429a      	cmp	r2, r3
 800107a:	d06e      	beq.n	800115a <HAL_ADC_ConfigChannel+0x3ea>
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800107c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8001080:	2b01      	cmp	r3, #1
 8001082:	f000 839a 	beq.w	80017ba <HAL_ADC_ConfigChannel+0xa4a>
 8001086:	2301      	movs	r3, #1
 8001088:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800108c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	f012 0f04 	tst.w	r2, #4
 8001094:	f000 8091 	beq.w	80011ba <HAL_ADC_ConfigChannel+0x44a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001098:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6623      	str	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a2:	2300      	movs	r3, #0
 80010a4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
}
 80010a8:	b002      	add	sp, #8
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	4991      	ldr	r1, [pc, #580]	@ (80012f4 <HAL_ADC_ConfigChannel+0x584>)
 80010b0:	4a91      	ldr	r2, [pc, #580]	@ (80012f8 <HAL_ADC_ConfigChannel+0x588>)
 80010b2:	428b      	cmp	r3, r1
 80010b4:	bf18      	it	ne
 80010b6:	4293      	cmpne	r3, r2
 80010b8:	d0d8      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010ba:	4a90      	ldr	r2, [pc, #576]	@ (80012fc <HAL_ADC_ConfigChannel+0x58c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d0d5      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010c0:	4a8f      	ldr	r2, [pc, #572]	@ (8001300 <HAL_ADC_ConfigChannel+0x590>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d0d2      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010c6:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80010ca:	3210      	adds	r2, #16
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d0cd      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010d0:	4a8c      	ldr	r2, [pc, #560]	@ (8001304 <HAL_ADC_ConfigChannel+0x594>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d0ca      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010d6:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80010da:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80010de:	4293      	cmp	r3, r2
 80010e0:	d0c4      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010e2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80010e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d0be      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010ee:	4a86      	ldr	r2, [pc, #536]	@ (8001308 <HAL_ADC_ConfigChannel+0x598>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d0bb      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010f4:	4a85      	ldr	r2, [pc, #532]	@ (800130c <HAL_ADC_ConfigChannel+0x59c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d0b8      	beq.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
 80010fa:	f640 3132 	movw	r1, #2866	@ 0xb32
 80010fe:	4884      	ldr	r0, [pc, #528]	@ (8001310 <HAL_ADC_ConfigChannel+0x5a0>)
 8001100:	f7ff fc36 	bl	8000970 <assert_failed>
 8001104:	e7b2      	b.n	800106c <HAL_ADC_ConfigChannel+0x2fc>
      assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	497a      	ldr	r1, [pc, #488]	@ (80012f4 <HAL_ADC_ConfigChannel+0x584>)
 800110a:	4a7b      	ldr	r2, [pc, #492]	@ (80012f8 <HAL_ADC_ConfigChannel+0x588>)
 800110c:	428b      	cmp	r3, r1
 800110e:	bf18      	it	ne
 8001110:	4293      	cmpne	r3, r2
 8001112:	d0af      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 8001114:	4a79      	ldr	r2, [pc, #484]	@ (80012fc <HAL_ADC_ConfigChannel+0x58c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d0ac      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 800111a:	4a79      	ldr	r2, [pc, #484]	@ (8001300 <HAL_ADC_ConfigChannel+0x590>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d0a9      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 8001120:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001124:	3210      	adds	r2, #16
 8001126:	4293      	cmp	r3, r2
 8001128:	d0a4      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 800112a:	4a76      	ldr	r2, [pc, #472]	@ (8001304 <HAL_ADC_ConfigChannel+0x594>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d0a1      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 8001130:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8001134:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8001138:	4293      	cmp	r3, r2
 800113a:	d09b      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 800113c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001144:	4293      	cmp	r3, r2
 8001146:	d095      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 8001148:	4a70      	ldr	r2, [pc, #448]	@ (800130c <HAL_ADC_ConfigChannel+0x59c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d092      	beq.n	8001074 <HAL_ADC_ConfigChannel+0x304>
 800114e:	f640 3136 	movw	r1, #2870	@ 0xb36
 8001152:	486f      	ldr	r0, [pc, #444]	@ (8001310 <HAL_ADC_ConfigChannel+0x5a0>)
 8001154:	f7ff fc0c 	bl	8000970 <assert_failed>
 8001158:	e78c      	b.n	8001074 <HAL_ADC_ConfigChannel+0x304>
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	4965      	ldr	r1, [pc, #404]	@ (80012f4 <HAL_ADC_ConfigChannel+0x584>)
 800115e:	4a66      	ldr	r2, [pc, #408]	@ (80012f8 <HAL_ADC_ConfigChannel+0x588>)
 8001160:	428b      	cmp	r3, r1
 8001162:	bf18      	it	ne
 8001164:	4293      	cmpne	r3, r2
 8001166:	d089      	beq.n	800107c <HAL_ADC_ConfigChannel+0x30c>
 8001168:	4a64      	ldr	r2, [pc, #400]	@ (80012fc <HAL_ADC_ConfigChannel+0x58c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d086      	beq.n	800107c <HAL_ADC_ConfigChannel+0x30c>
 800116e:	4a64      	ldr	r2, [pc, #400]	@ (8001300 <HAL_ADC_ConfigChannel+0x590>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d083      	beq.n	800107c <HAL_ADC_ConfigChannel+0x30c>
 8001174:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001178:	3210      	adds	r2, #16
 800117a:	4293      	cmp	r3, r2
 800117c:	f43f af7e 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8001180:	4a60      	ldr	r2, [pc, #384]	@ (8001304 <HAL_ADC_ConfigChannel+0x594>)
 8001182:	4293      	cmp	r3, r2
 8001184:	f43f af7a 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8001188:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 800118c:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8001190:	4293      	cmp	r3, r2
 8001192:	f43f af73 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 8001196:	4a5f      	ldr	r2, [pc, #380]	@ (8001314 <HAL_ADC_ConfigChannel+0x5a4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f43f af6f 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 800119e:	4a5e      	ldr	r2, [pc, #376]	@ (8001318 <HAL_ADC_ConfigChannel+0x5a8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	f43f af6b 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 80011a6:	4a5d      	ldr	r2, [pc, #372]	@ (800131c <HAL_ADC_ConfigChannel+0x5ac>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	f43f af67 	beq.w	800107c <HAL_ADC_ConfigChannel+0x30c>
 80011ae:	f640 313c 	movw	r1, #2876	@ 0xb3c
 80011b2:	4857      	ldr	r0, [pc, #348]	@ (8001310 <HAL_ADC_ConfigChannel+0x5a0>)
 80011b4:	f7ff fbdc 	bl	8000970 <assert_failed>
 80011b8:	e760      	b.n	800107c <HAL_ADC_ConfigChannel+0x30c>
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80011ba:	682a      	ldr	r2, [r5, #0]
 80011bc:	2a00      	cmp	r2, #0
 80011be:	db0c      	blt.n	80011da <HAL_ADC_ConfigChannel+0x46a>
      if (hadc->Instance != ADC3)
 80011c0:	494b      	ldr	r1, [pc, #300]	@ (80012f0 <HAL_ADC_ConfigChannel+0x580>)
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d009      	beq.n	80011da <HAL_ADC_ConfigChannel+0x46a>
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80011c6:	f3c2 0113 	ubfx	r1, r2, #0, #20
 80011ca:	bb59      	cbnz	r1, 8001224 <HAL_ADC_ConfigChannel+0x4b4>
 80011cc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80011d0:	2101      	movs	r1, #1
 80011d2:	4091      	lsls	r1, r2
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011da:	682a      	ldr	r2, [r5, #0]
 80011dc:	6869      	ldr	r1, [r5, #4]
 80011de:	6820      	ldr	r0, [r4, #0]
 80011e0:	f7ff fd50 	bl	8000c84 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	6886      	ldr	r6, [r0, #8]
 80011e8:	f016 0604 	ands.w	r6, r6, #4
 80011ec:	d000      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0x480>
 80011ee:	2601      	movs	r6, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011f0:	6883      	ldr	r3, [r0, #8]
 80011f2:	f013 0f08 	tst.w	r3, #8
 80011f6:	d100      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011f8:	b306      	cbz	r6, 800123c <HAL_ADC_ConfigChannel+0x4cc>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011fa:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011fc:	6886      	ldr	r6, [r0, #8]
 80011fe:	f016 0601 	ands.w	r6, r6, #1
 8001202:	f040 82d6 	bne.w	80017b2 <HAL_ADC_ConfigChannel+0xa42>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001206:	68ea      	ldr	r2, [r5, #12]
 8001208:	6829      	ldr	r1, [r5, #0]
 800120a:	f7ff fd69 	bl	8000ce0 <LL_ADC_SetChannelSingleDiff>
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800120e:	68ea      	ldr	r2, [r5, #12]
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HAL_ADC_ConfigChannel+0x5b0>)
 8001212:	429a      	cmp	r2, r3
 8001214:	f000 8183 	beq.w	800151e <HAL_ADC_ConfigChannel+0x7ae>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001218:	682b      	ldr	r3, [r5, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f2c0 8250 	blt.w	80016c0 <HAL_ADC_ConfigChannel+0x950>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2000      	movs	r0, #0
 8001222:	e73e      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001228:	b132      	cbz	r2, 8001238 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800122a:	fab2 f282 	clz	r2, r2
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800122e:	f002 021f 	and.w	r2, r2, #31
 8001232:	2101      	movs	r1, #1
 8001234:	4091      	lsls	r1, r2
 8001236:	e7cd      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x464>
    return 32U;
 8001238:	2220      	movs	r2, #32
 800123a:	e7f8      	b.n	800122e <HAL_ADC_ConfigChannel+0x4be>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800123c:	68aa      	ldr	r2, [r5, #8]
 800123e:	6829      	ldr	r1, [r5, #0]
 8001240:	f7ff fd38 	bl	8000cb4 <LL_ADC_SetChannelSamplingTime>
      if (hadc->Instance == ADC3)
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <HAL_ADC_ConfigChannel+0x580>)
 8001248:	4298      	cmp	r0, r3
 800124a:	d011      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x500>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800124c:	4b35      	ldr	r3, [pc, #212]	@ (8001324 <HAL_ADC_ConfigChannel+0x5b4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001258:	d03e      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x568>
 800125a:	68c3      	ldr	r3, [r0, #12]
 800125c:	f013 0f10 	tst.w	r3, #16
 8001260:	d162      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x5b8>
 8001262:	696b      	ldr	r3, [r5, #20]
 8001264:	68c2      	ldr	r2, [r0, #12]
 8001266:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800126a:	0052      	lsls	r2, r2, #1
 800126c:	4093      	lsls	r3, r2
 800126e:	e005      	b.n	800127c <HAL_ADC_ConfigChannel+0x50c>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001270:	696b      	ldr	r3, [r5, #20]
 8001272:	68c2      	ldr	r2, [r0, #12]
 8001274:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001278:	0052      	lsls	r2, r2, #1
 800127a:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800127c:	6929      	ldr	r1, [r5, #16]
 800127e:	2904      	cmp	r1, #4
 8001280:	d15a      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x5c8>
        if (hadc->Instance == ADC3)
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_ADC_ConfigChannel+0x580>)
 8001284:	4298      	cmp	r0, r3
 8001286:	f000 80d3 	beq.w	8001430 <HAL_ADC_ConfigChannel+0x6c0>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800128a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800128c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8001290:	682a      	ldr	r2, [r5, #0]
 8001292:	ebb3 6f82 	cmp.w	r3, r2, lsl #26
 8001296:	f000 8133 	beq.w	8001500 <HAL_ADC_ConfigChannel+0x790>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800129e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80012a2:	6829      	ldr	r1, [r5, #0]
 80012a4:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80012a8:	f000 812f 	beq.w	800150a <HAL_ADC_ConfigChannel+0x79a>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 80012b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80012b4:	6829      	ldr	r1, [r5, #0]
 80012b6:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80012ba:	f000 812b 	beq.w	8001514 <HAL_ADC_ConfigChannel+0x7a4>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80012c2:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80012c6:	6829      	ldr	r1, [r5, #0]
 80012c8:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 80012cc:	d195      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80012ce:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 80012d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012d4:	66d3      	str	r3, [r2, #108]	@ 0x6c
 80012d6:	e790      	b.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80012d8:	696b      	ldr	r3, [r5, #20]
 80012da:	68c2      	ldr	r2, [r0, #12]
 80012dc:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	4093      	lsls	r3, r2
 80012e4:	e7ca      	b.n	800127c <HAL_ADC_ConfigChannel+0x50c>
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40022100 	.word	0x40022100
 80012f0:	58026000 	.word	0x58026000
 80012f4:	04300002 	.word	0x04300002
 80012f8:	08600004 	.word	0x08600004
 80012fc:	0c900008 	.word	0x0c900008
 8001300:	10c00010 	.word	0x10c00010
 8001304:	2a000400 	.word	0x2a000400
 8001308:	43210000 	.word	0x43210000
 800130c:	4b840000 	.word	0x4b840000
 8001310:	08009a54 	.word	0x08009a54
 8001314:	36902000 	.word	0x36902000
 8001318:	3ac04000 	.word	0x3ac04000
 800131c:	3ef08000 	.word	0x3ef08000
 8001320:	47ff0000 	.word	0x47ff0000
 8001324:	5c001000 	.word	0x5c001000
 8001328:	696b      	ldr	r3, [r5, #20]
 800132a:	68c2      	ldr	r2, [r0, #12]
 800132c:	0892      	lsrs	r2, r2, #2
 800132e:	f002 0204 	and.w	r2, r2, #4
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	4093      	lsls	r3, r2
 8001336:	e7a1      	b.n	800127c <HAL_ADC_ConfigChannel+0x50c>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001338:	682a      	ldr	r2, [r5, #0]
 800133a:	f7ff fc6b 	bl	8000c14 <LL_ADC_SetOffset>
        if (hadc->Instance == ADC3)
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	4b95      	ldr	r3, [pc, #596]	@ (8001598 <HAL_ADC_ConfigChannel+0x828>)
 8001342:	429a      	cmp	r2, r3
 8001344:	d027      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x626>
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 8001346:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800134a:	2b01      	cmp	r3, #1
 800134c:	d85e      	bhi.n	800140c <HAL_ADC_ConfigChannel+0x69c>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	6928      	ldr	r0, [r5, #16]
 8001352:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 8001356:	2a01      	cmp	r2, #1
 8001358:	d05e      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x6a8>
 800135a:	4632      	mov	r2, r6
  if (ADCx == ADC3)
 800135c:	498e      	ldr	r1, [pc, #568]	@ (8001598 <HAL_ADC_ConfigChannel+0x828>)
 800135e:	428b      	cmp	r3, r1
 8001360:	d007      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x602>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001362:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001364:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8001368:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800136c:	430a      	orrs	r2, r1
 800136e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 8001372:	7e2b      	ldrb	r3, [r5, #24]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d852      	bhi.n	800141e <HAL_ADC_ConfigChannel+0x6ae>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001378:	6820      	ldr	r0, [r4, #0]
 800137a:	6929      	ldr	r1, [r5, #16]
 800137c:	7e2b      	ldrb	r3, [r5, #24]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d053      	beq.n	800142a <HAL_ADC_ConfigChannel+0x6ba>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001382:	6902      	ldr	r2, [r0, #16]
 8001384:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8001388:	f001 031f 	and.w	r3, r1, #31
 800138c:	fa06 f303 	lsl.w	r3, r6, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	6103      	str	r3, [r0, #16]
}
 8001394:	e731      	b.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
 8001396:	69eb      	ldr	r3, [r5, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf18      	it	ne
 800139c:	f1b3 7f80 	cmpne.w	r3, #16777216	@ 0x1000000
 80013a0:	d11c      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x66c>
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 80013a2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d81e      	bhi.n	80013e8 <HAL_ADC_ConfigChannel+0x678>
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	6928      	ldr	r0, [r5, #16]
 80013ae:	69e9      	ldr	r1, [r5, #28]
  if (ADCx == ADC3)
 80013b0:	4a79      	ldr	r2, [pc, #484]	@ (8001598 <HAL_ADC_ConfigChannel+0x828>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d01e      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x684>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	6929      	ldr	r1, [r5, #16]
 80013ba:	f895 2020 	ldrb.w	r2, [r5, #32]
 80013be:	2a01      	cmp	r2, #1
 80013c0:	d021      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x696>
  if (ADCx == ADC3)
 80013c2:	4a75      	ldr	r2, [pc, #468]	@ (8001598 <HAL_ADC_ConfigChannel+0x828>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f47f af18 	bne.w	80011fa <HAL_ADC_ConfigChannel+0x48a>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ca:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg,
 80013cc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80013d0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80013d4:	4332      	orrs	r2, r6
 80013d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80013da:	e70e      	b.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
 80013dc:	f640 3181 	movw	r1, #2945	@ 0xb81
 80013e0:	486e      	ldr	r0, [pc, #440]	@ (800159c <HAL_ADC_ConfigChannel+0x82c>)
 80013e2:	f7ff fac5 	bl	8000970 <assert_failed>
 80013e6:	e7dc      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x632>
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 80013e8:	f640 3182 	movw	r1, #2946	@ 0xb82
 80013ec:	486b      	ldr	r0, [pc, #428]	@ (800159c <HAL_ADC_ConfigChannel+0x82c>)
 80013ee:	f7ff fabf 	bl	8000970 <assert_failed>
 80013f2:	e7da      	b.n	80013aa <HAL_ADC_ConfigChannel+0x63a>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013f4:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg,
 80013f6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80013fa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80013fe:	4311      	orrs	r1, r2
 8001400:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8001404:	e7d7      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x646>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001406:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800140a:	e7da      	b.n	80013c2 <HAL_ADC_ConfigChannel+0x652>
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
 800140c:	f640 318a 	movw	r1, #2954	@ 0xb8a
 8001410:	4862      	ldr	r0, [pc, #392]	@ (800159c <HAL_ADC_ConfigChannel+0x82c>)
 8001412:	f7ff faad 	bl	8000970 <assert_failed>
 8001416:	e79a      	b.n	800134e <HAL_ADC_ConfigChannel+0x5de>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800141c:	e79e      	b.n	800135c <HAL_ADC_ConfigChannel+0x5ec>
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
 800141e:	f640 318e 	movw	r1, #2958	@ 0xb8e
 8001422:	485e      	ldr	r0, [pc, #376]	@ (800159c <HAL_ADC_ConfigChannel+0x82c>)
 8001424:	f7ff faa4 	bl	8000970 <assert_failed>
 8001428:	e7a6      	b.n	8001378 <HAL_ADC_ConfigChannel+0x608>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800142a:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 800142e:	e7a8      	b.n	8001382 <HAL_ADC_ConfigChannel+0x612>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001432:	6e02      	ldr	r2, [r0, #96]	@ 0x60
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001434:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800143e:	bb81      	cbnz	r1, 80014a2 <HAL_ADC_ConfigChannel+0x732>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	429a      	cmp	r2, r3
 8001446:	d034      	beq.n	80014b2 <HAL_ADC_ConfigChannel+0x742>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800144c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800144e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001452:	682b      	ldr	r3, [r5, #0]
 8001454:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8001458:	bb81      	cbnz	r1, 80014bc <HAL_ADC_ConfigChannel+0x74c>
 800145a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800145e:	429a      	cmp	r2, r3
 8001460:	d034      	beq.n	80014cc <HAL_ADC_ConfigChannel+0x75c>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001462:	6820      	ldr	r0, [r4, #0]
 8001464:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001466:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8001468:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8001472:	bb81      	cbnz	r1, 80014d6 <HAL_ADC_ConfigChannel+0x766>
 8001474:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001478:	429a      	cmp	r2, r3
 800147a:	d034      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x776>
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001480:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8001482:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800148c:	bb81      	cbnz	r1, 80014f0 <HAL_ADC_ConfigChannel+0x780>
 800148e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001492:	429a      	cmp	r2, r3
 8001494:	f47f aeb1 	bne.w	80011fa <HAL_ADC_ConfigChannel+0x48a>
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001498:	2200      	movs	r2, #0
 800149a:	2103      	movs	r1, #3
 800149c:	f7ff fbda 	bl	8000c54 <LL_ADC_SetOffsetState>
 80014a0:	e6ab      	b.n	80011fa <HAL_ADC_ConfigChannel+0x48a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014a6:	b113      	cbz	r3, 80014ae <HAL_ADC_ConfigChannel+0x73e>
  return __builtin_clz(value);
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	e7ca      	b.n	8001444 <HAL_ADC_ConfigChannel+0x6d4>
    return 32U;
 80014ae:	2320      	movs	r3, #32
 80014b0:	e7c8      	b.n	8001444 <HAL_ADC_ConfigChannel+0x6d4>
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80014b2:	2200      	movs	r2, #0
 80014b4:	4611      	mov	r1, r2
 80014b6:	f7ff fbcd 	bl	8000c54 <LL_ADC_SetOffsetState>
 80014ba:	e7c5      	b.n	8001448 <HAL_ADC_ConfigChannel+0x6d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014c0:	b113      	cbz	r3, 80014c8 <HAL_ADC_ConfigChannel+0x758>
  return __builtin_clz(value);
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	e7ca      	b.n	800145e <HAL_ADC_ConfigChannel+0x6ee>
    return 32U;
 80014c8:	2320      	movs	r3, #32
 80014ca:	e7c8      	b.n	800145e <HAL_ADC_ConfigChannel+0x6ee>
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2101      	movs	r1, #1
 80014d0:	f7ff fbc0 	bl	8000c54 <LL_ADC_SetOffsetState>
 80014d4:	e7c5      	b.n	8001462 <HAL_ADC_ConfigChannel+0x6f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014da:	b113      	cbz	r3, 80014e2 <HAL_ADC_ConfigChannel+0x772>
  return __builtin_clz(value);
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	e7ca      	b.n	8001478 <HAL_ADC_ConfigChannel+0x708>
    return 32U;
 80014e2:	2320      	movs	r3, #32
 80014e4:	e7c8      	b.n	8001478 <HAL_ADC_ConfigChannel+0x708>
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2102      	movs	r1, #2
 80014ea:	f7ff fbb3 	bl	8000c54 <LL_ADC_SetOffsetState>
 80014ee:	e7c5      	b.n	800147c <HAL_ADC_ConfigChannel+0x70c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80014f4:	b113      	cbz	r3, 80014fc <HAL_ADC_ConfigChannel+0x78c>
  return __builtin_clz(value);
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	e7ca      	b.n	8001492 <HAL_ADC_ConfigChannel+0x722>
    return 32U;
 80014fc:	2320      	movs	r3, #32
 80014fe:	e7c8      	b.n	8001492 <HAL_ADC_ConfigChannel+0x722>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001500:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001506:	6603      	str	r3, [r0, #96]	@ 0x60
 8001508:	e6c7      	b.n	800129a <HAL_ADC_ConfigChannel+0x52a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800150a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800150c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001510:	6653      	str	r3, [r2, #100]	@ 0x64
 8001512:	e6cb      	b.n	80012ac <HAL_ADC_ConfigChannel+0x53c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001514:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 8001516:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800151a:	6693      	str	r3, [r2, #104]	@ 0x68
 800151c:	e6cf      	b.n	80012be <HAL_ADC_ConfigChannel+0x54e>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_ADC_ConfigChannel+0x830>)
 8001522:	4298      	cmp	r0, r3
 8001524:	d009      	beq.n	800153a <HAL_ADC_ConfigChannel+0x7ca>
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_ADC_ConfigChannel+0x834>)
 8001528:	4298      	cmp	r0, r3
 800152a:	d04d      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x858>
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <HAL_ADC_ConfigChannel+0x828>)
 800152e:	4298      	cmp	r0, r3
 8001530:	d070      	beq.n	8001614 <HAL_ADC_ConfigChannel+0x8a4>
 8001532:	4631      	mov	r1, r6
 8001534:	f7ff fc00 	bl	8000d38 <LL_ADC_SetChannelPreselection>
 8001538:	e66e      	b.n	8001218 <HAL_ADC_ConfigChannel+0x4a8>
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <HAL_ADC_ConfigChannel+0x838>)
 800153e:	4293      	cmp	r3, r2
 8001540:	f000 808c 	beq.w	800165c <HAL_ADC_ConfigChannel+0x8ec>
 8001544:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_ADC_ConfigChannel+0x83c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	f000 808a 	beq.w	8001660 <HAL_ADC_ConfigChannel+0x8f0>
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <HAL_ADC_ConfigChannel+0x840>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f000 8088 	beq.w	8001664 <HAL_ADC_ConfigChannel+0x8f4>
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_ADC_ConfigChannel+0x844>)
 8001556:	4293      	cmp	r3, r2
 8001558:	f000 8086 	beq.w	8001668 <HAL_ADC_ConfigChannel+0x8f8>
 800155c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001560:	3210      	adds	r2, #16
 8001562:	4293      	cmp	r3, r2
 8001564:	f000 8082 	beq.w	800166c <HAL_ADC_ConfigChannel+0x8fc>
 8001568:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <HAL_ADC_ConfigChannel+0x848>)
 800156a:	4293      	cmp	r3, r2
 800156c:	f000 8080 	beq.w	8001670 <HAL_ADC_ConfigChannel+0x900>
 8001570:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8001574:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8001578:	4293      	cmp	r3, r2
 800157a:	d07b      	beq.n	8001674 <HAL_ADC_ConfigChannel+0x904>
 800157c:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001584:	4293      	cmp	r3, r2
 8001586:	d077      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x908>
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_ADC_ConfigChannel+0x84c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d076      	beq.n	800167c <HAL_ADC_ConfigChannel+0x90c>
 800158e:	4a0c      	ldr	r2, [pc, #48]	@ (80015c0 <HAL_ADC_ConfigChannel+0x850>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d1ce      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001594:	4e0b      	ldr	r6, [pc, #44]	@ (80015c4 <HAL_ADC_ConfigChannel+0x854>)
 8001596:	e7cc      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001598:	58026000 	.word	0x58026000
 800159c:	08009a54 	.word	0x08009a54
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40022100 	.word	0x40022100
 80015a8:	04300002 	.word	0x04300002
 80015ac:	08600004 	.word	0x08600004
 80015b0:	0c900008 	.word	0x0c900008
 80015b4:	10c00010 	.word	0x10c00010
 80015b8:	2a000400 	.word	0x2a000400
 80015bc:	43210000 	.word	0x43210000
 80015c0:	4b840000 	.word	0x4b840000
 80015c4:	4fb80000 	.word	0x4fb80000
 80015c8:	682b      	ldr	r3, [r5, #0]
 80015ca:	4a7d      	ldr	r2, [pc, #500]	@ (80017c0 <HAL_ADC_ConfigChannel+0xa50>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d057      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x910>
 80015d0:	4a7c      	ldr	r2, [pc, #496]	@ (80017c4 <HAL_ADC_ConfigChannel+0xa54>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d056      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x914>
 80015d6:	4a7c      	ldr	r2, [pc, #496]	@ (80017c8 <HAL_ADC_ConfigChannel+0xa58>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d055      	beq.n	8001688 <HAL_ADC_ConfigChannel+0x918>
 80015dc:	4a7b      	ldr	r2, [pc, #492]	@ (80017cc <HAL_ADC_ConfigChannel+0xa5c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d054      	beq.n	800168c <HAL_ADC_ConfigChannel+0x91c>
 80015e2:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 80015e6:	3210      	adds	r2, #16
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d051      	beq.n	8001690 <HAL_ADC_ConfigChannel+0x920>
 80015ec:	4a78      	ldr	r2, [pc, #480]	@ (80017d0 <HAL_ADC_ConfigChannel+0xa60>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d050      	beq.n	8001694 <HAL_ADC_ConfigChannel+0x924>
 80015f2:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 80015f6:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d04c      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x928>
 80015fe:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001606:	4293      	cmp	r3, r2
 8001608:	d048      	beq.n	800169c <HAL_ADC_ConfigChannel+0x92c>
 800160a:	4a72      	ldr	r2, [pc, #456]	@ (80017d4 <HAL_ADC_ConfigChannel+0xa64>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d190      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001610:	4e71      	ldr	r6, [pc, #452]	@ (80017d8 <HAL_ADC_ConfigChannel+0xa68>)
 8001612:	e78e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	4a6a      	ldr	r2, [pc, #424]	@ (80017c0 <HAL_ADC_ConfigChannel+0xa50>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d041      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x930>
 800161c:	4a69      	ldr	r2, [pc, #420]	@ (80017c4 <HAL_ADC_ConfigChannel+0xa54>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d040      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x934>
 8001622:	4a69      	ldr	r2, [pc, #420]	@ (80017c8 <HAL_ADC_ConfigChannel+0xa58>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d03f      	beq.n	80016a8 <HAL_ADC_ConfigChannel+0x938>
 8001628:	4a68      	ldr	r2, [pc, #416]	@ (80017cc <HAL_ADC_ConfigChannel+0xa5c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d03e      	beq.n	80016ac <HAL_ADC_ConfigChannel+0x93c>
 800162e:	f102 6286 	add.w	r2, r2, #70254592	@ 0x4300000
 8001632:	3210      	adds	r2, #16
 8001634:	4293      	cmp	r3, r2
 8001636:	d03b      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x940>
 8001638:	4a65      	ldr	r2, [pc, #404]	@ (80017d0 <HAL_ADC_ConfigChannel+0xa60>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d03a      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x944>
 800163e:	f102 2204 	add.w	r2, r2, #67109888	@ 0x4000400
 8001642:	f502 1240 	add.w	r2, r2, #3145728	@ 0x300000
 8001646:	4293      	cmp	r3, r2
 8001648:	d036      	beq.n	80016b8 <HAL_ADC_ConfigChannel+0x948>
 800164a:	4a64      	ldr	r2, [pc, #400]	@ (80017dc <HAL_ADC_ConfigChannel+0xa6c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d035      	beq.n	80016bc <HAL_ADC_ConfigChannel+0x94c>
 8001650:	4a63      	ldr	r2, [pc, #396]	@ (80017e0 <HAL_ADC_ConfigChannel+0xa70>)
 8001652:	4293      	cmp	r3, r2
 8001654:	f47f af6d 	bne.w	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001658:	4e62      	ldr	r6, [pc, #392]	@ (80017e4 <HAL_ADC_ConfigChannel+0xa74>)
 800165a:	e76a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 800165c:	2601      	movs	r6, #1
 800165e:	e768      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001660:	4e61      	ldr	r6, [pc, #388]	@ (80017e8 <HAL_ADC_ConfigChannel+0xa78>)
 8001662:	e766      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001664:	4e61      	ldr	r6, [pc, #388]	@ (80017ec <HAL_ADC_ConfigChannel+0xa7c>)
 8001666:	e764      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001668:	4e61      	ldr	r6, [pc, #388]	@ (80017f0 <HAL_ADC_ConfigChannel+0xa80>)
 800166a:	e762      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 800166c:	4e61      	ldr	r6, [pc, #388]	@ (80017f4 <HAL_ADC_ConfigChannel+0xa84>)
 800166e:	e760      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001670:	4e61      	ldr	r6, [pc, #388]	@ (80017f8 <HAL_ADC_ConfigChannel+0xa88>)
 8001672:	e75e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001674:	4e61      	ldr	r6, [pc, #388]	@ (80017fc <HAL_ADC_ConfigChannel+0xa8c>)
 8001676:	e75c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001678:	4e58      	ldr	r6, [pc, #352]	@ (80017dc <HAL_ADC_ConfigChannel+0xa6c>)
 800167a:	e75a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 800167c:	4e60      	ldr	r6, [pc, #384]	@ (8001800 <HAL_ADC_ConfigChannel+0xa90>)
 800167e:	e758      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001680:	2601      	movs	r6, #1
 8001682:	e756      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001684:	4e58      	ldr	r6, [pc, #352]	@ (80017e8 <HAL_ADC_ConfigChannel+0xa78>)
 8001686:	e754      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001688:	4e58      	ldr	r6, [pc, #352]	@ (80017ec <HAL_ADC_ConfigChannel+0xa7c>)
 800168a:	e752      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 800168c:	4e58      	ldr	r6, [pc, #352]	@ (80017f0 <HAL_ADC_ConfigChannel+0xa80>)
 800168e:	e750      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001690:	4e58      	ldr	r6, [pc, #352]	@ (80017f4 <HAL_ADC_ConfigChannel+0xa84>)
 8001692:	e74e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001694:	4e58      	ldr	r6, [pc, #352]	@ (80017f8 <HAL_ADC_ConfigChannel+0xa88>)
 8001696:	e74c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 8001698:	4e58      	ldr	r6, [pc, #352]	@ (80017fc <HAL_ADC_ConfigChannel+0xa8c>)
 800169a:	e74a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 800169c:	4e4f      	ldr	r6, [pc, #316]	@ (80017dc <HAL_ADC_ConfigChannel+0xa6c>)
 800169e:	e748      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016a0:	2601      	movs	r6, #1
 80016a2:	e746      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016a4:	4e50      	ldr	r6, [pc, #320]	@ (80017e8 <HAL_ADC_ConfigChannel+0xa78>)
 80016a6:	e744      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016a8:	4e50      	ldr	r6, [pc, #320]	@ (80017ec <HAL_ADC_ConfigChannel+0xa7c>)
 80016aa:	e742      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016ac:	4e50      	ldr	r6, [pc, #320]	@ (80017f0 <HAL_ADC_ConfigChannel+0xa80>)
 80016ae:	e740      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016b0:	4e50      	ldr	r6, [pc, #320]	@ (80017f4 <HAL_ADC_ConfigChannel+0xa84>)
 80016b2:	e73e      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016b4:	4e50      	ldr	r6, [pc, #320]	@ (80017f8 <HAL_ADC_ConfigChannel+0xa88>)
 80016b6:	e73c      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016b8:	4e50      	ldr	r6, [pc, #320]	@ (80017fc <HAL_ADC_ConfigChannel+0xa8c>)
 80016ba:	e73a      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
 80016bc:	4e48      	ldr	r6, [pc, #288]	@ (80017e0 <HAL_ADC_ConfigChannel+0xa70>)
 80016be:	e738      	b.n	8001532 <HAL_ADC_ConfigChannel+0x7c2>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	4950      	ldr	r1, [pc, #320]	@ (8001804 <HAL_ADC_ConfigChannel+0xa94>)
 80016c4:	4850      	ldr	r0, [pc, #320]	@ (8001808 <HAL_ADC_ConfigChannel+0xa98>)
 80016c6:	4282      	cmp	r2, r0
 80016c8:	bf18      	it	ne
 80016ca:	428a      	cmpne	r2, r1
 80016cc:	bf0c      	ite	eq
 80016ce:	2101      	moveq	r1, #1
 80016d0:	2100      	movne	r1, #0
 80016d2:	d118      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x996>
 80016d4:	4e4d      	ldr	r6, [pc, #308]	@ (800180c <HAL_ADC_ConfigChannel+0xa9c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016d6:	68b5      	ldr	r5, [r6, #8]
 80016d8:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016dc:	b1a9      	cbz	r1, 800170a <HAL_ADC_ConfigChannel+0x99a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016de:	4949      	ldr	r1, [pc, #292]	@ (8001804 <HAL_ADC_ConfigChannel+0xa94>)
 80016e0:	6888      	ldr	r0, [r1, #8]
 80016e2:	f010 0001 	ands.w	r0, r0, #1
 80016e6:	d000      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x97a>
 80016e8:	2001      	movs	r0, #1
 80016ea:	4947      	ldr	r1, [pc, #284]	@ (8001808 <HAL_ADC_ConfigChannel+0xa98>)
 80016ec:	6889      	ldr	r1, [r1, #8]
 80016ee:	f011 0101 	ands.w	r1, r1, #1
 80016f2:	d000      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0x986>
 80016f4:	2101      	movs	r1, #1
 80016f6:	4301      	orrs	r1, r0
 80016f8:	d00c      	beq.n	8001714 <HAL_ADC_ConfigChannel+0x9a4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80016fc:	f043 0320 	orr.w	r3, r3, #32
 8001700:	6623      	str	r3, [r4, #96]	@ 0x60
          tmp_hal_status = HAL_ERROR;
 8001702:	2001      	movs	r0, #1
 8001704:	e4cd      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001706:	4e42      	ldr	r6, [pc, #264]	@ (8001810 <HAL_ADC_ConfigChannel+0xaa0>)
 8001708:	e7e5      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x966>
 800170a:	4942      	ldr	r1, [pc, #264]	@ (8001814 <HAL_ADC_ConfigChannel+0xaa4>)
 800170c:	6889      	ldr	r1, [r1, #8]
 800170e:	f011 0f01 	tst.w	r1, #1
 8001712:	d1f2      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x98a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001714:	4940      	ldr	r1, [pc, #256]	@ (8001818 <HAL_ADC_ConfigChannel+0xaa8>)
 8001716:	428b      	cmp	r3, r1
 8001718:	d007      	beq.n	800172a <HAL_ADC_ConfigChannel+0x9ba>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800171a:	4940      	ldr	r1, [pc, #256]	@ (800181c <HAL_ADC_ConfigChannel+0xaac>)
 800171c:	428b      	cmp	r3, r1
 800171e:	d026      	beq.n	800176e <HAL_ADC_ConfigChannel+0x9fe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001720:	493f      	ldr	r1, [pc, #252]	@ (8001820 <HAL_ADC_ConfigChannel+0xab0>)
 8001722:	428b      	cmp	r3, r1
 8001724:	d034      	beq.n	8001790 <HAL_ADC_ConfigChannel+0xa20>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001726:	2000      	movs	r0, #0
 8001728:	e4bb      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800172a:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 800172e:	d1f4      	bne.n	800171a <HAL_ADC_ConfigChannel+0x9aa>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001730:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <HAL_ADC_ConfigChannel+0xaa4>)
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_ADC_ConfigChannel+0x9ca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001736:	2000      	movs	r0, #0
 8001738:	e4b3      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800173a:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800173e:	68b2      	ldr	r2, [r6, #8]
 8001740:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001744:	4313      	orrs	r3, r2
 8001746:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001748:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <HAL_ADC_ConfigChannel+0xab4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	4a36      	ldr	r2, [pc, #216]	@ (8001828 <HAL_ADC_ConfigChannel+0xab8>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 800175c:	e002      	b.n	8001764 <HAL_ADC_ConfigChannel+0x9f4>
                wait_loop_index--;
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	3b01      	subs	r3, #1
 8001762:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8001764:	9b01      	ldr	r3, [sp, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f9      	bne.n	800175e <HAL_ADC_ConfigChannel+0x9ee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176a:	2000      	movs	r0, #0
 800176c:	e499      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800176e:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8001772:	d1d5      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x9b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <HAL_ADC_ConfigChannel+0xaa4>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_ADC_ConfigChannel+0xa0e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177a:	2000      	movs	r0, #0
 800177c:	e491      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800177e:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 8001782:	68b2      	ldr	r2, [r6, #8]
 8001784:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001788:	4313      	orrs	r3, r2
 800178a:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800178c:	2000      	movs	r0, #0
}
 800178e:	e488      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001790:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 8001794:	d10f      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0xa46>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_ADC_ConfigChannel+0xaa4>)
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0xa30>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2000      	movs	r0, #0
 800179e:	e480      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80017a0:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017a4:	68b2      	ldr	r2, [r6, #8]
 80017a6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2000      	movs	r0, #0
}
 80017b0:	e477      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
 80017b2:	2000      	movs	r0, #0
 80017b4:	e475      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
 80017b6:	2000      	movs	r0, #0
 80017b8:	e473      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x332>
  __HAL_LOCK(hadc);
 80017ba:	2002      	movs	r0, #2
 80017bc:	e474      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x338>
 80017be:	bf00      	nop
 80017c0:	04300002 	.word	0x04300002
 80017c4:	08600004 	.word	0x08600004
 80017c8:	0c900008 	.word	0x0c900008
 80017cc:	10c00010 	.word	0x10c00010
 80017d0:	2a000400 	.word	0x2a000400
 80017d4:	4b840000 	.word	0x4b840000
 80017d8:	4fb80000 	.word	0x4fb80000
 80017dc:	36902000 	.word	0x36902000
 80017e0:	3ac04000 	.word	0x3ac04000
 80017e4:	3ef08000 	.word	0x3ef08000
 80017e8:	19200040 	.word	0x19200040
 80017ec:	1d500080 	.word	0x1d500080
 80017f0:	21800100 	.word	0x21800100
 80017f4:	25b00200 	.word	0x25b00200
 80017f8:	2e300800 	.word	0x2e300800
 80017fc:	32601000 	.word	0x32601000
 8001800:	47520000 	.word	0x47520000
 8001804:	40022000 	.word	0x40022000
 8001808:	40022100 	.word	0x40022100
 800180c:	40022300 	.word	0x40022300
 8001810:	58026300 	.word	0x58026300
 8001814:	58026000 	.word	0x58026000
 8001818:	c7520000 	.word	0xc7520000
 800181c:	c3210000 	.word	0xc3210000
 8001820:	cb840000 	.word	0xcb840000
 8001824:	2000000c 	.word	0x2000000c
 8001828:	053e2d63 	.word	0x053e2d63

0800182c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	4943      	ldr	r1, [pc, #268]	@ (8001940 <ADC_ConfigureBoostMode+0x114>)
 8001834:	4a43      	ldr	r2, [pc, #268]	@ (8001944 <ADC_ConfigureBoostMode+0x118>)
 8001836:	4293      	cmp	r3, r2
 8001838:	bf18      	it	ne
 800183a:	428b      	cmpne	r3, r1
 800183c:	d11f      	bne.n	800187e <ADC_ConfigureBoostMode+0x52>
 800183e:	4b42      	ldr	r3, [pc, #264]	@ (8001948 <ADC_ConfigureBoostMode+0x11c>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001846:	3b00      	subs	r3, #0
 8001848:	bf18      	it	ne
 800184a:	2301      	movne	r3, #1
 800184c:	b30b      	cbz	r3, 8001892 <ADC_ConfigureBoostMode+0x66>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800184e:	f002 ff3f 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001858:	d005      	beq.n	8001866 <ADC_ConfigureBoostMode+0x3a>
 800185a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800185e:	d016      	beq.n	800188e <ADC_ConfigureBoostMode+0x62>
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001864:	d102      	bne.n	800186c <ADC_ConfigureBoostMode+0x40>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001866:	0c1b      	lsrs	r3, r3, #16
 8001868:	fbb0 f0f3 	udiv	r0, r0, r3
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
  if (freq <= 6250000UL)
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <ADC_ConfigureBoostMode+0x120>)
 800186e:	4298      	cmp	r0, r3
 8001870:	d849      	bhi.n	8001906 <ADC_ConfigureBoostMode+0xda>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	6893      	ldr	r3, [r2, #8]
 8001876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800187a:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800187c:	bd10      	pop	{r4, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800187e:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <ADC_ConfigureBoostMode+0x124>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001886:	3b00      	subs	r3, #0
 8001888:	bf18      	it	ne
 800188a:	2301      	movne	r3, #1
 800188c:	e7de      	b.n	800184c <ADC_ConfigureBoostMode+0x20>
        freq /= 4UL;
 800188e:	0880      	lsrs	r0, r0, #2
        break;
 8001890:	e7ec      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001892:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001896:	2100      	movs	r1, #0
 8001898:	f004 faf2 	bl	8005e80 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800189c:	6863      	ldr	r3, [r4, #4]
 800189e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80018a2:	d02c      	beq.n	80018fe <ADC_ConfigureBoostMode+0xd2>
 80018a4:	d821      	bhi.n	80018ea <ADC_ConfigureBoostMode+0xbe>
 80018a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80018aa:	d026      	beq.n	80018fa <ADC_ConfigureBoostMode+0xce>
 80018ac:	d904      	bls.n	80018b8 <ADC_ConfigureBoostMode+0x8c>
 80018ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018b2:	d1db      	bne.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= 32UL;
 80018b4:	0940      	lsrs	r0, r0, #5
        break;
 80018b6:	e7d9      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 80018b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018bc:	d010      	beq.n	80018e0 <ADC_ConfigureBoostMode+0xb4>
 80018be:	d809      	bhi.n	80018d4 <ADC_ConfigureBoostMode+0xa8>
 80018c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80018c4:	d00c      	beq.n	80018e0 <ADC_ConfigureBoostMode+0xb4>
 80018c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80018ca:	d009      	beq.n	80018e0 <ADC_ConfigureBoostMode+0xb4>
 80018cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018d0:	d006      	beq.n	80018e0 <ADC_ConfigureBoostMode+0xb4>
 80018d2:	e7cb      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
 80018d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80018d8:	d002      	beq.n	80018e0 <ADC_ConfigureBoostMode+0xb4>
 80018da:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80018de:	d1c5      	bne.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80018e0:	0c9b      	lsrs	r3, r3, #18
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80018e8:	e7c0      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
    switch (hadc->Init.ClockPrescaler)
 80018ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80018ee:	d008      	beq.n	8001902 <ADC_ConfigureBoostMode+0xd6>
 80018f0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80018f4:	d1ba      	bne.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= 256UL;
 80018f6:	0a00      	lsrs	r0, r0, #8
        break;
 80018f8:	e7b8      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= 16UL;
 80018fa:	0900      	lsrs	r0, r0, #4
        break;
 80018fc:	e7b6      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= 64UL;
 80018fe:	0980      	lsrs	r0, r0, #6
        break;
 8001900:	e7b4      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
        freq /= 128UL;
 8001902:	09c0      	lsrs	r0, r0, #7
        break;
 8001904:	e7b2      	b.n	800186c <ADC_ConfigureBoostMode+0x40>
  else if (freq <= 12500000UL)
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <ADC_ConfigureBoostMode+0x128>)
 8001908:	4298      	cmp	r0, r3
 800190a:	d807      	bhi.n	800191c <ADC_ConfigureBoostMode+0xf0>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	6893      	ldr	r3, [r2, #8]
 8001910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6093      	str	r3, [r2, #8]
 800191a:	e7af      	b.n	800187c <ADC_ConfigureBoostMode+0x50>
  else if (freq <= 25000000UL)
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <ADC_ConfigureBoostMode+0x12c>)
 800191e:	4298      	cmp	r0, r3
 8001920:	d807      	bhi.n	8001932 <ADC_ConfigureBoostMode+0x106>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001922:	6822      	ldr	r2, [r4, #0]
 8001924:	6893      	ldr	r3, [r2, #8]
 8001926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	6093      	str	r3, [r2, #8]
 8001930:	e7a4      	b.n	800187c <ADC_ConfigureBoostMode+0x50>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	6893      	ldr	r3, [r2, #8]
 8001936:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	e79e      	b.n	800187c <ADC_ConfigureBoostMode+0x50>
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000
 8001944:	40022100 	.word	0x40022100
 8001948:	40022300 	.word	0x40022300
 800194c:	00bebc21 	.word	0x00bebc21
 8001950:	58026300 	.word	0x58026300
 8001954:	017d7841 	.word	0x017d7841
 8001958:	02faf081 	.word	0x02faf081

0800195c <HAL_ADC_Init>:
{
 800195c:	b530      	push	{r4, r5, lr}
 800195e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001964:	2800      	cmp	r0, #0
 8001966:	f000 830f 	beq.w	8001f88 <HAL_ADC_Init+0x62c>
 800196a:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	49a4      	ldr	r1, [pc, #656]	@ (8001c00 <HAL_ADC_Init+0x2a4>)
 8001970:	4aa4      	ldr	r2, [pc, #656]	@ (8001c04 <HAL_ADC_Init+0x2a8>)
 8001972:	428b      	cmp	r3, r1
 8001974:	bf18      	it	ne
 8001976:	4293      	cmpne	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_ADC_Init+0x2e>
 800197a:	4aa3      	ldr	r2, [pc, #652]	@ (8001c08 <HAL_ADC_Init+0x2ac>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d004      	beq.n	800198a <HAL_ADC_Init+0x2e>
 8001980:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8001984:	48a1      	ldr	r0, [pc, #644]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001986:	f7fe fff3 	bl	8000970 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001990:	bf18      	it	ne
 8001992:	f5b3 3f00 	cmpne.w	r3, #131072	@ 0x20000
 8001996:	d025      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 8001998:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800199c:	d022      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 800199e:	b30b      	cbz	r3, 80019e4 <HAL_ADC_Init+0x88>
 80019a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019a4:	d01e      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80019aa:	d01b      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80019b0:	d018      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019b6:	d015      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019b8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80019bc:	d012      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019be:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80019c2:	d00f      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019c4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80019c8:	d00c      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80019ce:	d009      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019d0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80019d4:	d006      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80019da:	d003      	beq.n	80019e4 <HAL_ADC_Init+0x88>
 80019dc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80019e0:	f040 80bf 	bne.w	8001b62 <HAL_ADC_Init+0x206>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80019e4:	68a3      	ldr	r3, [r4, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bf18      	it	ne
 80019ea:	2b04      	cmpne	r3, #4
 80019ec:	d00a      	beq.n	8001a04 <HAL_ADC_Init+0xa8>
 80019ee:	2b1c      	cmp	r3, #28
 80019f0:	f200 80bd 	bhi.w	8001b6e <HAL_ADC_Init+0x212>
 80019f4:	f04f 2211 	mov.w	r2, #285217024	@ 0x11001100
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	f013 0f01 	tst.w	r3, #1
 8001a00:	f000 80b5 	beq.w	8001b6e <HAL_ADC_Init+0x212>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001a04:	6923      	ldr	r3, [r4, #16]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f200 80b7 	bhi.w	8001b7a <HAL_ADC_Init+0x21e>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001a0c:	7e63      	ldrb	r3, [r4, #25]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f200 80b9 	bhi.w	8001b86 <HAL_ADC_Init+0x22a>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001a14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf18      	it	ne
 8001a1a:	f5b3 6f80 	cmpne.w	r3, #1024	@ 0x400
 8001a1e:	d006      	beq.n	8001a2e <HAL_ADC_Init+0xd2>
 8001a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a24:	d003      	beq.n	8001a2e <HAL_ADC_Init+0xd2>
 8001a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001a2a:	f040 80b2 	bne.w	8001b92 <HAL_ADC_Init+0x236>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001a2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a34:	bf18      	it	ne
 8001a36:	f5b3 6f84 	cmpne.w	r3, #1056	@ 0x420
 8001a3a:	d040      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a3c:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8001a40:	d03d      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a42:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8001a46:	d03a      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a48:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001a4c:	d037      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a4e:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8001a52:	d034      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a54:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8001a58:	d031      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a5a:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8001a5e:	d02e      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a60:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001a64:	d02b      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a66:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001a6a:	d028      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a6c:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8001a70:	d025      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a72:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001a76:	d022      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a78:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001a7c:	d01f      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a7e:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8001a82:	d01c      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a84:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001a88:	d019      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a8a:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8001a8e:	d016      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001a94:	d013      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a96:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8001a9a:	d010      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001a9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001aa0:	d00d      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001aa2:	f5b3 6fcc 	cmp.w	r3, #1632	@ 0x660
 8001aa6:	d00a      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001aa8:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8001aac:	d007      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001aae:	f5b3 6fd4 	cmp.w	r3, #1696	@ 0x6a0
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001ab4:	f5b3 6fd8 	cmp.w	r3, #1728	@ 0x6c0
 8001ab8:	d001      	beq.n	8001abe <HAL_ADC_Init+0x162>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d16f      	bne.n	8001b9e <HAL_ADC_Init+0x242>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001abe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf18      	it	ne
 8001ac4:	2b02      	cmpne	r3, #2
 8001ac6:	d003      	beq.n	8001ad0 <HAL_ADC_Init+0x174>
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <HAL_ADC_Init+0x174>
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d16c      	bne.n	8001baa <HAL_ADC_Init+0x24e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001ad0:	6963      	ldr	r3, [r4, #20]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf18      	it	ne
 8001ad6:	2b08      	cmpne	r3, #8
 8001ad8:	d16d      	bne.n	8001bb6 <HAL_ADC_Init+0x25a>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001ada:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf18      	it	ne
 8001ae0:	f5b3 5f80 	cmpne.w	r3, #4096	@ 0x1000
 8001ae4:	d16d      	bne.n	8001bc2 <HAL_ADC_Init+0x266>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001ae6:	7e23      	ldrb	r3, [r4, #24]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d870      	bhi.n	8001bce <HAL_ADC_Init+0x272>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001aec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d872      	bhi.n	8001bda <HAL_ADC_Init+0x27e>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af4:	6923      	ldr	r3, [r4, #16]
 8001af6:	b163      	cbz	r3, 8001b12 <HAL_ADC_Init+0x1b6>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001af8:	69e3      	ldr	r3, [r4, #28]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d872      	bhi.n	8001be6 <HAL_ADC_Init+0x28a>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001b00:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d874      	bhi.n	8001bf2 <HAL_ADC_Init+0x296>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b08:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f000 8087 	beq.w	8001c20 <HAL_ADC_Init+0x2c4>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001b12:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	f000 808d 	beq.w	8001c36 <HAL_ADC_Init+0x2da>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b1c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8093 	beq.w	8001c4a <HAL_ADC_Init+0x2ee>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b24:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8001b2c:	d003      	beq.n	8001b36 <HAL_ADC_Init+0x1da>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b2e:	6899      	ldr	r1, [r3, #8]
 8001b30:	4a37      	ldr	r2, [pc, #220]	@ (8001c10 <HAL_ADC_Init+0x2b4>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b36:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8001b3e:	f040 8092 	bne.w	8001c66 <HAL_ADC_Init+0x30a>
  MODIFY_REG(ADCx->CR,
 8001b42:	6899      	ldr	r1, [r3, #8]
 8001b44:	4a33      	ldr	r2, [pc, #204]	@ (8001c14 <HAL_ADC_Init+0x2b8>)
 8001b46:	400a      	ands	r2, r1
 8001b48:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b4c:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b4e:	4b32      	ldr	r3, [pc, #200]	@ (8001c18 <HAL_ADC_Init+0x2bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	4a31      	ldr	r2, [pc, #196]	@ (8001c1c <HAL_ADC_Init+0x2c0>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b60:	e07e      	b.n	8001c60 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001b62:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8001b66:	4829      	ldr	r0, [pc, #164]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001b68:	f7fe ff02 	bl	8000970 <assert_failed>
 8001b6c:	e73a      	b.n	80019e4 <HAL_ADC_Init+0x88>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001b6e:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001b72:	4826      	ldr	r0, [pc, #152]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001b74:	f7fe fefc 	bl	8000970 <assert_failed>
 8001b78:	e744      	b.n	8001a04 <HAL_ADC_Init+0xa8>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001b7a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001b7e:	4823      	ldr	r0, [pc, #140]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001b80:	f7fe fef6 	bl	8000970 <assert_failed>
 8001b84:	e742      	b.n	8001a0c <HAL_ADC_Init+0xb0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001b86:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001b8a:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001b8c:	f7fe fef0 	bl	8000970 <assert_failed>
 8001b90:	e740      	b.n	8001a14 <HAL_ADC_Init+0xb8>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001b92:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001b96:	481d      	ldr	r0, [pc, #116]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001b98:	f7fe feea 	bl	8000970 <assert_failed>
 8001b9c:	e747      	b.n	8001a2e <HAL_ADC_Init+0xd2>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001b9e:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8001ba2:	481a      	ldr	r0, [pc, #104]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001ba4:	f7fe fee4 	bl	8000970 <assert_failed>
 8001ba8:	e789      	b.n	8001abe <HAL_ADC_Init+0x162>
  assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 8001baa:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8001bae:	4817      	ldr	r0, [pc, #92]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bb0:	f7fe fede 	bl	8000970 <assert_failed>
 8001bb4:	e78c      	b.n	8001ad0 <HAL_ADC_Init+0x174>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8001bba:	4814      	ldr	r0, [pc, #80]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bbc:	f7fe fed8 	bl	8000970 <assert_failed>
 8001bc0:	e78b      	b.n	8001ada <HAL_ADC_Init+0x17e>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8001bc2:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8001bc6:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bc8:	f7fe fed2 	bl	8000970 <assert_failed>
 8001bcc:	e78b      	b.n	8001ae6 <HAL_ADC_Init+0x18a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8001bce:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8001bd2:	480e      	ldr	r0, [pc, #56]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bd4:	f7fe fecc 	bl	8000970 <assert_failed>
 8001bd8:	e788      	b.n	8001aec <HAL_ADC_Init+0x190>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001bda:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 8001bde:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001be0:	f7fe fec6 	bl	8000970 <assert_failed>
 8001be4:	e786      	b.n	8001af4 <HAL_ADC_Init+0x198>
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001be6:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8001bea:	4808      	ldr	r0, [pc, #32]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bec:	f7fe fec0 	bl	8000970 <assert_failed>
 8001bf0:	e786      	b.n	8001b00 <HAL_ADC_Init+0x1a4>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001bf2:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <HAL_ADC_Init+0x2b0>)
 8001bf8:	f7fe feba 	bl	8000970 <assert_failed>
 8001bfc:	e784      	b.n	8001b08 <HAL_ADC_Init+0x1ac>
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000
 8001c04:	40022100 	.word	0x40022100
 8001c08:	58026000 	.word	0x58026000
 8001c0c:	08009a54 	.word	0x08009a54
 8001c10:	5fffffc0 	.word	0x5fffffc0
 8001c14:	6fffffc0 	.word	0x6fffffc0
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	053e2d63 	.word	0x053e2d63
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001c20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	2b07      	cmp	r3, #7
 8001c26:	f67f af74 	bls.w	8001b12 <HAL_ADC_Init+0x1b6>
 8001c2a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8001c2e:	487d      	ldr	r0, [pc, #500]	@ (8001e24 <HAL_ADC_Init+0x4c8>)
 8001c30:	f7fe fe9e 	bl	8000970 <assert_failed>
 8001c34:	e76d      	b.n	8001b12 <HAL_ADC_Init+0x1b6>
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8001c36:	7e63      	ldrb	r3, [r4, #25]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	f47f af6f 	bne.w	8001b1c <HAL_ADC_Init+0x1c0>
 8001c3e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001c42:	4878      	ldr	r0, [pc, #480]	@ (8001e24 <HAL_ADC_Init+0x4c8>)
 8001c44:	f7fe fe94 	bl	8000970 <assert_failed>
 8001c48:	e768      	b.n	8001b1c <HAL_ADC_Init+0x1c0>
    HAL_ADC_MspInit(hadc);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7fe fbae 	bl	80003ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	2300      	movs	r3, #0
 8001c52:	6663      	str	r3, [r4, #100]	@ 0x64
    hadc->Lock = HAL_UNLOCKED;
 8001c54:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8001c58:	e764      	b.n	8001b24 <HAL_ADC_Init+0x1c8>
      wait_loop_index--;
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f9      	bne.n	8001c5a <HAL_ADC_Init+0x2fe>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c66:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8001c6e:	f040 809e 	bne.w	8001dae <HAL_ADC_Init+0x452>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001c74:	f042 0210 	orr.w	r2, r2, #16
 8001c78:	6622      	str	r2, [r4, #96]	@ 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	6662      	str	r2, [r4, #100]	@ 0x64
    tmp_hal_status = HAL_ERROR;
 8001c82:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	f012 0204 	ands.w	r2, r2, #4
 8001c8a:	d000      	beq.n	8001c8e <HAL_ADC_Init+0x332>
 8001c8c:	2201      	movs	r2, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001c90:	f011 0f10 	tst.w	r1, #16
 8001c94:	f040 8170 	bne.w	8001f78 <HAL_ADC_Init+0x61c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	f040 816d 	bne.w	8001f78 <HAL_ADC_Init+0x61c>
    ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8001ca0:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 8001ca4:	f041 0102 	orr.w	r1, r1, #2
 8001ca8:	6621      	str	r1, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	f011 0f01 	tst.w	r1, #1
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_ADC_Init+0x394>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb2:	485d      	ldr	r0, [pc, #372]	@ (8001e28 <HAL_ADC_Init+0x4cc>)
 8001cb4:	495d      	ldr	r1, [pc, #372]	@ (8001e2c <HAL_ADC_Init+0x4d0>)
 8001cb6:	428b      	cmp	r3, r1
 8001cb8:	bf18      	it	ne
 8001cba:	4283      	cmpne	r3, r0
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	d176      	bne.n	8001db2 <HAL_ADC_Init+0x456>
 8001cc4:	6880      	ldr	r0, [r0, #8]
 8001cc6:	f010 0001 	ands.w	r0, r0, #1
 8001cca:	d000      	beq.n	8001cce <HAL_ADC_Init+0x372>
 8001ccc:	2001      	movs	r0, #1
 8001cce:	4957      	ldr	r1, [pc, #348]	@ (8001e2c <HAL_ADC_Init+0x4d0>)
 8001cd0:	6889      	ldr	r1, [r1, #8]
 8001cd2:	f011 0101 	ands.w	r1, r1, #1
 8001cd6:	d000      	beq.n	8001cda <HAL_ADC_Init+0x37e>
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4301      	orrs	r1, r0
 8001cdc:	d108      	bne.n	8001cf0 <HAL_ADC_Init+0x394>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d06d      	beq.n	8001dbe <HAL_ADC_Init+0x462>
 8001ce2:	4853      	ldr	r0, [pc, #332]	@ (8001e30 <HAL_ADC_Init+0x4d4>)
 8001ce4:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ce6:	6881      	ldr	r1, [r0, #8]
 8001ce8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6083      	str	r3, [r0, #8]
    if (hadc->Instance == ADC3)
 8001cf0:	6821      	ldr	r1, [r4, #0]
 8001cf2:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_ADC_Init+0x4d8>)
 8001cf4:	4299      	cmp	r1, r3
 8001cf6:	d064      	beq.n	8001dc2 <HAL_ADC_Init+0x466>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf8:	7e62      	ldrb	r2, [r4, #25]
                  hadc->Init.Overrun                                                    |
 8001cfa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cfc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8001d00:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8001d02:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d04:	f894 2020 	ldrb.w	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d0c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001d10:	2a01      	cmp	r2, #1
 8001d12:	d06e      	beq.n	8001df2 <HAL_ADC_Init+0x496>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d14:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001d16:	b122      	cbz	r2, 8001d22 <HAL_ADC_Init+0x3c6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d18:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d1c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001d1e:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d20:	4313      	orrs	r3, r2
    if (hadc->Instance == ADC3)
 8001d22:	4a44      	ldr	r2, [pc, #272]	@ (8001e34 <HAL_ADC_Init+0x4d8>)
 8001d24:	4291      	cmp	r1, r2
 8001d26:	d069      	beq.n	8001dfc <HAL_ADC_Init+0x4a0>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d28:	68c8      	ldr	r0, [r1, #12]
 8001d2a:	4a43      	ldr	r2, [pc, #268]	@ (8001e38 <HAL_ADC_Init+0x4dc>)
 8001d2c:	4002      	ands	r2, r0
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d32:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d34:	6893      	ldr	r3, [r2, #8]
 8001d36:	f013 0304 	ands.w	r3, r3, #4
 8001d3a:	d000      	beq.n	8001d3e <HAL_ADC_Init+0x3e2>
 8001d3c:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d3e:	6891      	ldr	r1, [r2, #8]
 8001d40:	f011 0f08 	tst.w	r1, #8
 8001d44:	d123      	bne.n	8001d8e <HAL_ADC_Init+0x432>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d46:	bb13      	cbnz	r3, 8001d8e <HAL_ADC_Init+0x432>
      if (hadc->Instance == ADC3)
 8001d48:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_ADC_Init+0x4d8>)
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d063      	beq.n	8001e16 <HAL_ADC_Init+0x4ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d4e:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        tmpCFGR = (
 8001d52:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d56:	68d0      	ldr	r0, [r2, #12]
 8001d58:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <HAL_ADC_Init+0x4e0>)
 8001d5a:	4003      	ands	r3, r0
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001d60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d06f      	beq.n	8001e48 <HAL_ADC_Init+0x4ec>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	6913      	ldr	r3, [r2, #16]
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	6913      	ldr	r3, [r2, #16]
 8001d76:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d7a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6113      	str	r3, [r2, #16]
      if (hadc->Instance != ADC3)
 8001d80:	6822      	ldr	r2, [r4, #0]
 8001d82:	4b2c      	ldr	r3, [pc, #176]	@ (8001e34 <HAL_ADC_Init+0x4d8>)
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d002      	beq.n	8001d8e <HAL_ADC_Init+0x432>
        ADC_ConfigureBoostMode(hadc);
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fd4f 	bl	800182c <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8e:	6923      	ldr	r3, [r4, #16]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f000 80e8 	beq.w	8001f66 <HAL_ADC_Init+0x60a>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001d9a:	f023 030f 	bic.w	r3, r3, #15
 8001d9e:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001da0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6623      	str	r3, [r4, #96]	@ 0x60
 8001dac:	e0e9      	b.n	8001f82 <HAL_ADC_Init+0x626>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2500      	movs	r5, #0
 8001db0:	e768      	b.n	8001c84 <HAL_ADC_Init+0x328>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db2:	4920      	ldr	r1, [pc, #128]	@ (8001e34 <HAL_ADC_Init+0x4d8>)
 8001db4:	6889      	ldr	r1, [r1, #8]
 8001db6:	f011 0f01 	tst.w	r1, #1
 8001dba:	d199      	bne.n	8001cf0 <HAL_ADC_Init+0x394>
 8001dbc:	e78f      	b.n	8001cde <HAL_ADC_Init+0x382>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dbe:	4820      	ldr	r0, [pc, #128]	@ (8001e40 <HAL_ADC_Init+0x4e4>)
 8001dc0:	e790      	b.n	8001ce4 <HAL_ADC_Init+0x388>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001dc2:	7e60      	ldrb	r0, [r4, #25]
                  hadc->Init.Overrun                                                     |
 8001dc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001dc6:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
                  hadc->Init.DataAlign                                                   |
 8001dca:	68e0      	ldr	r0, [r4, #12]
                  hadc->Init.Overrun                                                     |
 8001dcc:	4303      	orrs	r3, r0
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001dce:	68a0      	ldr	r0, [r4, #8]
 8001dd0:	2818      	cmp	r0, #24
 8001dd2:	d004      	beq.n	8001dde <HAL_ADC_Init+0x482>
 8001dd4:	281c      	cmp	r0, #28
 8001dd6:	d008      	beq.n	8001dea <HAL_ADC_Init+0x48e>
 8001dd8:	280c      	cmp	r0, #12
 8001dda:	d108      	bne.n	8001dee <HAL_ADC_Init+0x492>
 8001ddc:	2008      	movs	r0, #8
                  hadc->Init.DataAlign                                                   |
 8001dde:	4303      	orrs	r3, r0
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001de0:	f894 2020 	ldrb.w	r2, [r4, #32]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001de8:	e790      	b.n	8001d0c <HAL_ADC_Init+0x3b0>
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001dea:	2010      	movs	r0, #16
 8001dec:	e7f7      	b.n	8001dde <HAL_ADC_Init+0x482>
 8001dee:	4610      	mov	r0, r2
 8001df0:	e7f5      	b.n	8001dde <HAL_ADC_Init+0x482>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001df2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001df4:	3a01      	subs	r2, #1
 8001df6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001dfa:	e78b      	b.n	8001d14 <HAL_ADC_Init+0x3b8>
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001dfc:	68c8      	ldr	r0, [r1, #12]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <HAL_ADC_Init+0x4e8>)
 8001e00:	4002      	ands	r2, r0
 8001e02:	431a      	orrs	r2, r3
 8001e04:	60ca      	str	r2, [r1, #12]
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	6913      	ldr	r3, [r2, #16]
 8001e0a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001e0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6113      	str	r3, [r2, #16]
 8001e14:	e78d      	b.n	8001d32 <HAL_ADC_Init+0x3d6>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e16:	7e23      	ldrb	r3, [r4, #24]
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e18:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8001e1c:	0049      	lsls	r1, r1, #1
        tmpCFGR = (
 8001e1e:	ea41 3183 	orr.w	r1, r1, r3, lsl #14
 8001e22:	e798      	b.n	8001d56 <HAL_ADC_Init+0x3fa>
 8001e24:	08009a54 	.word	0x08009a54
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022100 	.word	0x40022100
 8001e30:	40022300 	.word	0x40022300
 8001e34:	58026000 	.word	0x58026000
 8001e38:	fff0c003 	.word	0xfff0c003
 8001e3c:	ffffbffc 	.word	0xffffbffc
 8001e40:	58026300 	.word	0x58026300
 8001e44:	fff04007 	.word	0xfff04007
        if (hadc->Instance == ADC3)
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_ADC_Init+0x630>)
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d04a      	beq.n	8001ee6 <HAL_ADC_Init+0x58a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001e50:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e58:	d258      	bcs.n	8001f0c <HAL_ADC_Init+0x5b0>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001e5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf18      	it	ne
 8001e60:	2b20      	cmpne	r3, #32
 8001e62:	d017      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d015      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e68:	2b60      	cmp	r3, #96	@ 0x60
 8001e6a:	d013      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e6c:	2b80      	cmp	r3, #128	@ 0x80
 8001e6e:	d011      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e70:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e72:	d00f      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e74:	2bc0      	cmp	r3, #192	@ 0xc0
 8001e76:	d00d      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e78:	2be0      	cmp	r3, #224	@ 0xe0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e80:	d008      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e82:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001e86:	d005      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e8c:	d002      	beq.n	8001e94 <HAL_ADC_Init+0x538>
 8001e8e:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 8001e92:	d141      	bne.n	8001f18 <HAL_ADC_Init+0x5bc>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001e94:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf18      	it	ne
 8001e9a:	f5b3 7f00 	cmpne.w	r3, #512	@ 0x200
 8001e9e:	d141      	bne.n	8001f24 <HAL_ADC_Init+0x5c8>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001ea0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ea2:	f240 4201 	movw	r2, #1025	@ 0x401
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	bf18      	it	ne
 8001eaa:	4293      	cmpne	r3, r2
 8001eac:	d140      	bne.n	8001f30 <HAL_ADC_Init+0x5d4>
        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001eae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001eb0:	b10b      	cbz	r3, 8001eb6 <HAL_ADC_Init+0x55a>
            || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8001eb2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001eb4:	b913      	cbnz	r3, 8001ebc <HAL_ADC_Init+0x560>
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 8001eb6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13f      	bne.n	8001f3c <HAL_ADC_Init+0x5e0>
        if (hadc->Instance == ADC3)
 8001ebc:	6821      	ldr	r1, [r4, #0]
 8001ebe:	4b33      	ldr	r3, [pc, #204]	@ (8001f8c <HAL_ADC_Init+0x630>)
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d041      	beq.n	8001f48 <HAL_ADC_Init+0x5ec>
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ec4:	690a      	ldr	r2, [r1, #16]
 8001ec6:	4b32      	ldr	r3, [pc, #200]	@ (8001f90 <HAL_ADC_Init+0x634>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001ecc:	1e50      	subs	r0, r2, #1
 8001ece:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8001ed0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001ed4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001ed6:	4302      	orrs	r2, r0
 8001ed8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001eda:	4302      	orrs	r2, r0
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	610b      	str	r3, [r1, #16]
 8001ee4:	e745      	b.n	8001d72 <HAL_ADC_Init+0x416>
          assert_param(IS_ADC_OVERSAMPLING_RATIO_ADC3(hadc->Init.Oversampling.Ratio));
 8001ee6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf18      	it	ne
 8001eec:	2b04      	cmpne	r3, #4
 8001eee:	d0b4      	beq.n	8001e5a <HAL_ADC_Init+0x4fe>
 8001ef0:	2b1c      	cmp	r3, #28
 8001ef2:	d805      	bhi.n	8001f00 <HAL_ADC_Init+0x5a4>
 8001ef4:	4a27      	ldr	r2, [pc, #156]	@ (8001f94 <HAL_ADC_Init+0x638>)
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	f013 0f01 	tst.w	r3, #1
 8001efe:	d1ac      	bne.n	8001e5a <HAL_ADC_Init+0x4fe>
 8001f00:	f240 21b9 	movw	r1, #697	@ 0x2b9
 8001f04:	4824      	ldr	r0, [pc, #144]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f06:	f7fe fd33 	bl	8000970 <assert_failed>
 8001f0a:	e7a6      	b.n	8001e5a <HAL_ADC_Init+0x4fe>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8001f0c:	f240 21bd 	movw	r1, #701	@ 0x2bd
 8001f10:	4821      	ldr	r0, [pc, #132]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f12:	f7fe fd2d 	bl	8000970 <assert_failed>
 8001f16:	e7a0      	b.n	8001e5a <HAL_ADC_Init+0x4fe>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8001f18:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8001f1c:	481e      	ldr	r0, [pc, #120]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f1e:	f7fe fd27 	bl	8000970 <assert_failed>
 8001f22:	e7b7      	b.n	8001e94 <HAL_ADC_Init+0x538>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 8001f24:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001f28:	481b      	ldr	r0, [pc, #108]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f2a:	f7fe fd21 	bl	8000970 <assert_failed>
 8001f2e:	e7b7      	b.n	8001ea0 <HAL_ADC_Init+0x544>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 8001f30:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f36:	f7fe fd1b 	bl	8000970 <assert_failed>
 8001f3a:	e7b8      	b.n	8001eae <HAL_ADC_Init+0x552>
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
 8001f3c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8001f40:	4815      	ldr	r0, [pc, #84]	@ (8001f98 <HAL_ADC_Init+0x63c>)
 8001f42:	f7fe fd15 	bl	8000970 <assert_failed>
 8001f46:	e7b9      	b.n	8001ebc <HAL_ADC_Init+0x560>
          MODIFY_REG(hadc->Instance->CFGR2,
 8001f48:	690a      	ldr	r2, [r1, #16]
 8001f4a:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_ADC_Init+0x640>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001f50:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8001f52:	4302      	orrs	r2, r0
 8001f54:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001f56:	4302      	orrs	r2, r0
 8001f58:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001f5a:	4302      	orrs	r2, r0
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	610b      	str	r3, [r1, #16]
 8001f64:	e705      	b.n	8001d72 <HAL_ADC_Init+0x416>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f66:	6821      	ldr	r1, [r4, #0]
 8001f68:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001f6a:	f023 030f 	bic.w	r3, r3, #15
 8001f6e:	69e2      	ldr	r2, [r4, #28]
 8001f70:	3a01      	subs	r2, #1
 8001f72:	4313      	orrs	r3, r2
 8001f74:	630b      	str	r3, [r1, #48]	@ 0x30
 8001f76:	e713      	b.n	8001da0 <HAL_ADC_Init+0x444>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f78:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6623      	str	r3, [r4, #96]	@ 0x60
    tmp_hal_status = HAL_ERROR;
 8001f80:	2501      	movs	r5, #1
}
 8001f82:	4628      	mov	r0, r5
 8001f84:	b003      	add	sp, #12
 8001f86:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001f88:	2501      	movs	r5, #1
 8001f8a:	e7fa      	b.n	8001f82 <HAL_ADC_Init+0x626>
 8001f8c:	58026000 	.word	0x58026000
 8001f90:	fc00f81e 	.word	0xfc00f81e
 8001f94:	11111100 	.word	0x11111100
 8001f98:	08009a54 	.word	0x08009a54
 8001f9c:	fc00f81f 	.word	0xfc00f81f

08001fa0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fa0:	b530      	push	{r4, r5, lr}
 8001fa2:	b09d      	sub	sp, #116	@ 0x74
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	460d      	mov	r5, r1
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef  tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8001fa8:	6802      	ldr	r2, [r0, #0]
 8001faa:	4b70      	ldr	r3, [pc, #448]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d004      	beq.n	8001fba <HAL_ADCEx_MultiModeConfigChannel+0x1a>
 8001fb0:	f640 1162 	movw	r1, #2402	@ 0x962
 8001fb4:	486e      	ldr	r0, [pc, #440]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001fb6:	f7fe fcdb 	bl	8000970 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 8001fba:	682b      	ldr	r3, [r5, #0]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	bf18      	it	ne
 8001fc0:	2b03      	cmpne	r3, #3
 8001fc2:	d903      	bls.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	d86a      	bhi.n	800209e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d36a      	bcc.n	80020a2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	b303      	cbz	r3, 8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
  {
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 8001fd0:	686b      	ldr	r3, [r5, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf18      	it	ne
 8001fd6:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 8001fda:	d002      	beq.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001fdc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001fe0:	d165      	bne.n	80020ae <HAL_ADCEx_MultiModeConfigChannel+0x10e>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8001fe2:	68ab      	ldr	r3, [r5, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf18      	it	ne
 8001fe8:	f5b3 7f80 	cmpne.w	r3, #256	@ 0x100
 8001fec:	d011      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff2:	d00e      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ff8:	d00b      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffe:	d008      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8002000:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002004:	d005      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8002006:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800200a:	d002      	beq.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 800200c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002010:	d153      	bne.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0x11a>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8002016:	2b01      	cmp	r3, #1
 8002018:	f000 80a6 	beq.w	8002168 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>
 800201c:	2301      	movs	r3, #1
 800201e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	9318      	str	r3, [sp, #96]	@ 0x60
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002026:	9319      	str	r3, [sp, #100]	@ 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d04a      	beq.n	80020c6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002030:	2300      	movs	r3, #0
 8002032:	9300      	str	r3, [sp, #0]

  if (tmphadcSlave.Instance == NULL)
 8002034:	9b00      	ldr	r3, [sp, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d049      	beq.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f013 0304 	ands.w	r3, r3, #4
 8002040:	d000      	beq.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002042:	2301      	movs	r3, #1
 8002044:	6891      	ldr	r1, [r2, #8]
 8002046:	f011 0f04 	tst.w	r1, #4
 800204a:	d17f      	bne.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 800204c:	2b00      	cmp	r3, #0
 800204e:	d17d      	bne.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002050:	4946      	ldr	r1, [pc, #280]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002052:	4b48      	ldr	r3, [pc, #288]	@ (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002054:	429a      	cmp	r2, r3
 8002056:	bf18      	it	ne
 8002058:	428a      	cmpne	r2, r1
 800205a:	d141      	bne.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 800205c:	f503 7300 	add.w	r3, r3, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002060:	682a      	ldr	r2, [r5, #0]
 8002062:	2a00      	cmp	r2, #0
 8002064:	d04d      	beq.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x162>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800206c:	6869      	ldr	r1, [r5, #4]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002072:	6822      	ldr	r2, [r4, #0]
 8002074:	483d      	ldr	r0, [pc, #244]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002076:	493f      	ldr	r1, [pc, #252]	@ (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002078:	428a      	cmp	r2, r1
 800207a:	bf18      	it	ne
 800207c:	4282      	cmpne	r2, r0
 800207e:	d131      	bne.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002080:	6881      	ldr	r1, [r0, #8]
 8002082:	f011 0101 	ands.w	r1, r1, #1
 8002086:	d000      	beq.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8002088:	2101      	movs	r1, #1
 800208a:	4a3a      	ldr	r2, [pc, #232]	@ (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800208c:	6892      	ldr	r2, [r2, #8]
 800208e:	f012 0201 	ands.w	r2, r2, #1
 8002092:	d000      	beq.n	8002096 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002094:	2201      	movs	r2, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	d029      	beq.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209a:	2000      	movs	r0, #0
 800209c:	e05b      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800209e:	2b09      	cmp	r3, #9
 80020a0:	d094      	beq.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80020a2:	f640 1163 	movw	r1, #2403	@ 0x963
 80020a6:	4832      	ldr	r0, [pc, #200]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020a8:	f7fe fc62 	bl	8000970 <assert_failed>
 80020ac:	e78e      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
 80020ae:	f640 1166 	movw	r1, #2406	@ 0x966
 80020b2:	482f      	ldr	r0, [pc, #188]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020b4:	f7fe fc5c 	bl	8000970 <assert_failed>
 80020b8:	e793      	b.n	8001fe2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80020ba:	f640 1167 	movw	r1, #2407	@ 0x967
 80020be:	482c      	ldr	r0, [pc, #176]	@ (8002170 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020c0:	f7fe fc56 	bl	8000970 <assert_failed>
 80020c4:	e7a5      	b.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x72>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	e7b2      	b.n	8002034 <HAL_ADCEx_MultiModeConfigChannel+0x94>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ce:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hadc);
 80020d6:	2300      	movs	r3, #0
 80020d8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80020dc:	2001      	movs	r0, #1
 80020de:	e03d      	b.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80020e2:	e7bd      	b.n	8002060 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
 80020e4:	4a25      	ldr	r2, [pc, #148]	@ (800217c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80020e6:	6892      	ldr	r2, [r2, #8]
 80020e8:	f012 0f01 	tst.w	r2, #1
 80020ec:	d138      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80020f2:	400a      	ands	r2, r1
 80020f4:	6829      	ldr	r1, [r5, #0]
 80020f6:	68a8      	ldr	r0, [r5, #8]
 80020f8:	4301      	orrs	r1, r0
 80020fa:	430a      	orrs	r2, r1
 80020fc:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fe:	2000      	movs	r0, #0
 8002100:	e029      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002108:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210a:	6822      	ldr	r2, [r4, #0]
 800210c:	4817      	ldr	r0, [pc, #92]	@ (800216c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800210e:	4919      	ldr	r1, [pc, #100]	@ (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002110:	428a      	cmp	r2, r1
 8002112:	bf18      	it	ne
 8002114:	4282      	cmpne	r2, r0
 8002116:	d10e      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x196>
 8002118:	6881      	ldr	r1, [r0, #8]
 800211a:	f011 0101 	ands.w	r1, r1, #1
 800211e:	d000      	beq.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x182>
 8002120:	2101      	movs	r1, #1
 8002122:	4a14      	ldr	r2, [pc, #80]	@ (8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002124:	6892      	ldr	r2, [r2, #8]
 8002126:	f012 0201 	ands.w	r2, r2, #1
 800212a:	d000      	beq.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 800212c:	2201      	movs	r2, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	d006      	beq.n	8002140 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002132:	2000      	movs	r0, #0
 8002134:	e00f      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002136:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002138:	6892      	ldr	r2, [r2, #8]
 800213a:	f012 0f01 	tst.w	r2, #1
 800213e:	d111      	bne.n	8002164 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002144:	400a      	ands	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002148:	2000      	movs	r0, #0
 800214a:	e004      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	6623      	str	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002154:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002156:	2300      	movs	r3, #0
 8002158:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
}
 800215c:	b01d      	add	sp, #116	@ 0x74
 800215e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2000      	movs	r0, #0
 8002162:	e7f8      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002164:	2000      	movs	r0, #0
 8002166:	e7f6      	b.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  __HAL_LOCK(hadc);
 8002168:	2002      	movs	r0, #2
 800216a:	e7f7      	b.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>
 800216c:	40022000 	.word	0x40022000
 8002170:	08009a8c 	.word	0x08009a8c
 8002174:	40022100 	.word	0x40022100
 8002178:	58026300 	.word	0x58026300
 800217c:	58026000 	.word	0x58026000
 8002180:	fffff0e0 	.word	0xfffff0e0

08002184 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002184:	b1e8      	cbz	r0, 80021c2 <HAL_CORDIC_Init+0x3e>
{
 8002186:	b510      	push	{r4, lr}
 8002188:	4604      	mov	r4, r0
    /* Return error status */
    return HAL_ERROR;
  }

  /* Check the instance */
  assert_param(IS_CORDIC_ALL_INSTANCE(hcordic->Instance));
 800218a:	6802      	ldr	r2, [r0, #0]
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_CORDIC_Init+0x44>)
 800218e:	429a      	cmp	r2, r3
 8002190:	d003      	beq.n	800219a <HAL_CORDIC_Init+0x16>
 8002192:	21d3      	movs	r1, #211	@ 0xd3
 8002194:	480d      	ldr	r0, [pc, #52]	@ (80021cc <HAL_CORDIC_Init+0x48>)
 8002196:	f7fe fbeb 	bl	8000970 <assert_failed>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800219a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800219e:	b153      	cbz	r3, 80021b6 <HAL_CORDIC_Init+0x32>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80021a0:	2000      	movs	r0, #0
 80021a2:	6260      	str	r0, [r4, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80021a4:	6060      	str	r0, [r4, #4]
  hcordic->pOutBuff = NULL;
 80021a6:	60a0      	str	r0, [r4, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80021a8:	60e0      	str	r0, [r4, #12]
  hcordic->NbCalcToGet = 0U;
 80021aa:	6120      	str	r0, [r4, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80021ac:	6160      	str	r0, [r4, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
}
 80021b4:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80021b6:	f884 3020 	strb.w	r3, [r4, #32]
    HAL_CORDIC_MspInit(hcordic);
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7fe f988 	bl	80004d0 <HAL_CORDIC_MspInit>
 80021c0:	e7ee      	b.n	80021a0 <HAL_CORDIC_Init+0x1c>
    return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	48024400 	.word	0x48024400
 80021cc:	08009ac4 	.word	0x08009ac4

080021d0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80021d0:	2800      	cmp	r0, #0
 80021d2:	db07      	blt.n	80021e4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d4:	f000 021f 	and.w	r2, r0, #31
 80021d8:	0940      	lsrs	r0, r0, #5
 80021da:	2301      	movs	r3, #1
 80021dc:	4093      	lsls	r3, r2
 80021de:	4a02      	ldr	r2, [pc, #8]	@ (80021e8 <__NVIC_EnableIRQ+0x18>)
 80021e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80021ec:	2800      	cmp	r0, #0
 80021ee:	db04      	blt.n	80021fa <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	0109      	lsls	r1, r1, #4
 80021f2:	b2c9      	uxtb	r1, r1
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <__NVIC_SetPriority+0x1c>)
 80021f6:	5419      	strb	r1, [r3, r0]
 80021f8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	f000 000f 	and.w	r0, r0, #15
 80021fe:	0109      	lsls	r1, r1, #4
 8002200:	b2c9      	uxtb	r1, r1
 8002202:	4b02      	ldr	r3, [pc, #8]	@ (800220c <__NVIC_SetPriority+0x20>)
 8002204:	5419      	strb	r1, [r3, r0]
  }
}
 8002206:	4770      	bx	lr
 8002208:	e000e400 	.word	0xe000e400
 800220c:	e000ed14 	.word	0xe000ed14

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002212:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002216:	f1c0 0c07 	rsb	ip, r0, #7
 800221a:	f1bc 0f04 	cmp.w	ip, #4
 800221e:	bf28      	it	cs
 8002220:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002224:	1d03      	adds	r3, r0, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d90f      	bls.n	800224a <NVIC_EncodePriority+0x3a>
 800222a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 3eff 	mov.w	lr, #4294967295
 8002230:	fa0e f00c 	lsl.w	r0, lr, ip
 8002234:	ea21 0100 	bic.w	r1, r1, r0
 8002238:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223a:	fa0e fe03 	lsl.w	lr, lr, r3
 800223e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8002242:	ea41 0002 	orr.w	r0, r1, r2
 8002246:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	2300      	movs	r3, #0
 800224c:	e7ee      	b.n	800222c <NVIC_EncodePriority+0x1c>
	...

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b510      	push	{r4, lr}
 8002252:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002254:	1ec3      	subs	r3, r0, #3
 8002256:	2b04      	cmp	r3, #4
 8002258:	d80d      	bhi.n	8002276 <HAL_NVIC_SetPriorityGrouping+0x26>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225a:	4909      	ldr	r1, [pc, #36]	@ (8002280 <HAL_NVIC_SetPriorityGrouping+0x30>)
 800225c:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002266:	0224      	lsls	r4, r4, #8
 8002268:	f404 64e0 	and.w	r4, r4, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002270:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8002272:	60ca      	str	r2, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002274:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002276:	2191      	movs	r1, #145	@ 0x91
 8002278:	4803      	ldr	r0, [pc, #12]	@ (8002288 <HAL_NVIC_SetPriorityGrouping+0x38>)
 800227a:	f7fe fb79 	bl	8000970 <assert_failed>
 800227e:	e7ec      	b.n	800225a <HAL_NVIC_SetPriorityGrouping+0xa>
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	05fa0000 	.word	0x05fa0000
 8002288:	08009afc 	.word	0x08009afc

0800228c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4606      	mov	r6, r0
 8002290:	460c      	mov	r4, r1
 8002292:	4615      	mov	r5, r2
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002294:	2a0f      	cmp	r2, #15
 8002296:	d80e      	bhi.n	80022b6 <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002298:	2c0f      	cmp	r4, #15
 800229a:	d811      	bhi.n	80022c0 <HAL_NVIC_SetPriority+0x34>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_NVIC_SetPriority+0x40>)
 800229e:	68d8      	ldr	r0, [r3, #12]

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a0:	462a      	mov	r2, r5
 80022a2:	4621      	mov	r1, r4
 80022a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80022a8:	f7ff ffb2 	bl	8002210 <NVIC_EncodePriority>
 80022ac:	4601      	mov	r1, r0
 80022ae:	4630      	mov	r0, r6
 80022b0:	f7ff ff9c 	bl	80021ec <__NVIC_SetPriority>
}
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80022b6:	21a9      	movs	r1, #169	@ 0xa9
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <HAL_NVIC_SetPriority+0x44>)
 80022ba:	f7fe fb59 	bl	8000970 <assert_failed>
 80022be:	e7eb      	b.n	8002298 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80022c0:	21aa      	movs	r1, #170	@ 0xaa
 80022c2:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <HAL_NVIC_SetPriority+0x44>)
 80022c4:	f7fe fb54 	bl	8000970 <assert_failed>
 80022c8:	e7e8      	b.n	800229c <HAL_NVIC_SetPriority+0x10>
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00
 80022d0:	08009afc 	.word	0x08009afc

080022d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022d6:	1e04      	subs	r4, r0, #0
 80022d8:	db03      	blt.n	80022e2 <HAL_NVIC_EnableIRQ+0xe>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff78 	bl	80021d0 <__NVIC_EnableIRQ>
}
 80022e0:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80022e2:	21bd      	movs	r1, #189	@ 0xbd
 80022e4:	4801      	ldr	r0, [pc, #4]	@ (80022ec <HAL_NVIC_EnableIRQ+0x18>)
 80022e6:	f7fe fb43 	bl	8000970 <assert_failed>
 80022ea:	e7f6      	b.n	80022da <HAL_NVIC_EnableIRQ+0x6>
 80022ec:	08009afc 	.word	0x08009afc

080022f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	3801      	subs	r0, #1
 80022f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80022f6:	d20b      	bcs.n	8002310 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80022fc:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <HAL_SYSTICK_Config+0x24>)
 8002300:	21f0      	movs	r1, #240	@ 0xf0
 8002302:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002306:	2000      	movs	r0, #0
 8002308:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	2207      	movs	r2, #7
 800230c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002310:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <FMAC_ResetInputStateAndDataPointers>:
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	60c3      	str	r3, [r0, #12]
  hfmac->pInputSize = NULL;
 800231c:	6143      	str	r3, [r0, #20]
  hfmac->InputCurrentSize = 0U;
 800231e:	8203      	strh	r3, [r0, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8002320:	2320      	movs	r3, #32
 8002322:	f880 3033 	strb.w	r3, [r0, #51]	@ 0x33
}
 8002326:	4770      	bx	lr

08002328 <FMAC_ResetOutputStateAndDataPointers>:
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	6183      	str	r3, [r0, #24]
  hfmac->pOutputSize = NULL;
 800232c:	6203      	str	r3, [r0, #32]
  hfmac->OutputCurrentSize = 0U;
 800232e:	8383      	strh	r3, [r0, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8002330:	2320      	movs	r3, #32
 8002332:	f880 3032 	strb.w	r3, [r0, #50]	@ 0x32
}
 8002336:	4770      	bx	lr

08002338 <FMAC_ResetDataPointers>:
{
 8002338:	b510      	push	{r4, lr}
 800233a:	4604      	mov	r4, r0
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800233c:	f7ff ffec 	bl	8002318 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff fff1 	bl	8002328 <FMAC_ResetOutputStateAndDataPointers>
}
 8002346:	bd10      	pop	{r4, pc}

08002348 <FMAC_Reset>:
{
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800234c:	f7fe fc30 	bl	8000bb0 <HAL_GetTick>
 8002350:	4605      	mov	r5, r0
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8002352:	6822      	ldr	r2, [r4, #0]
 8002354:	6913      	ldr	r3, [r2, #16]
 8002356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235a:	6113      	str	r3, [r2, #16]
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002364:	d00b      	beq.n	800237e <FMAC_Reset+0x36>
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8002366:	f7fe fc23 	bl	8000bb0 <HAL_GetTick>
 800236a:	1b40      	subs	r0, r0, r5
 800236c:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002370:	d9f4      	bls.n	800235c <FMAC_Reset+0x14>
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8002372:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002378:	6363      	str	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 800237a:	2001      	movs	r0, #1
 800237c:	e001      	b.n	8002382 <FMAC_Reset+0x3a>
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800237e:	2000      	movs	r0, #0
 8002380:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002382:	bd38      	pop	{r3, r4, r5, pc}

08002384 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 8002384:	b370      	cbz	r0, 80023e4 <HAL_FMAC_Init+0x60>
{
 8002386:	b510      	push	{r4, lr}
 8002388:	4604      	mov	r4, r0
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));
 800238a:	6802      	ldr	r2, [r0, #0]
 800238c:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HAL_FMAC_Init+0x64>)
 800238e:	429a      	cmp	r2, r3
 8002390:	d004      	beq.n	800239c <HAL_FMAC_Init+0x18>
 8002392:	f240 1185 	movw	r1, #389	@ 0x185
 8002396:	4815      	ldr	r0, [pc, #84]	@ (80023ec <HAL_FMAC_Init+0x68>)
 8002398:	f7fe faea 	bl	8000970 <assert_failed>
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800239c:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 80023a0:	b193      	cbz	r3, 80023c8 <HAL_FMAC_Init+0x44>
  hfmac->FilterParam = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	6063      	str	r3, [r4, #4]
  FMAC_ResetDataPointers(hfmac);
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff ffc6 	bl	8002338 <FMAC_ResetDataPointers>
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7ff ffcb 	bl	8002348 <FMAC_Reset>
 80023b2:	2801      	cmp	r0, #1
 80023b4:	d00e      	beq.n	80023d4 <HAL_FMAC_Init+0x50>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80023b6:	2000      	movs	r0, #0
 80023b8:	6360      	str	r0, [r4, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80023ba:	2320      	movs	r3, #32
 80023bc:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
  __HAL_UNLOCK(hfmac);
 80023c0:	2300      	movs	r3, #0
 80023c2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
}
 80023c6:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 80023c8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
    HAL_FMAC_MspInit(hfmac);
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7fe f8a7 	bl	8000520 <HAL_FMAC_MspInit>
 80023d2:	e7e6      	b.n	80023a2 <HAL_FMAC_Init+0x1e>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80023d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	6363      	str	r3, [r4, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80023dc:	23a0      	movs	r3, #160	@ 0xa0
 80023de:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
    status = HAL_ERROR;
 80023e2:	e7ed      	b.n	80023c0 <HAL_FMAC_Init+0x3c>
    return HAL_ERROR;
 80023e4:	2001      	movs	r0, #1
}
 80023e6:	4770      	bx	lr
 80023e8:	48024000 	.word	0x48024000
 80023ec:	08009b34 	.word	0x08009b34

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023f4:	b083      	sub	sp, #12
 80023f6:	4680      	mov	r8, r0
 80023f8:	460c      	mov	r4, r1
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023fa:	4a6b      	ldr	r2, [pc, #428]	@ (80025a8 <HAL_GPIO_Init+0x1b8>)
 80023fc:	4b6b      	ldr	r3, [pc, #428]	@ (80025ac <HAL_GPIO_Init+0x1bc>)
 80023fe:	4290      	cmp	r0, r2
 8002400:	bf18      	it	ne
 8002402:	4298      	cmpne	r0, r3
 8002404:	bf14      	ite	ne
 8002406:	f04f 0901 	movne.w	r9, #1
 800240a:	f04f 0900 	moveq.w	r9, #0
 800240e:	d024      	beq.n	800245a <HAL_GPIO_Init+0x6a>
 8002410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002414:	1ac3      	subs	r3, r0, r3
 8002416:	bf18      	it	ne
 8002418:	2301      	movne	r3, #1
 800241a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800241e:	4290      	cmp	r0, r2
 8002420:	d01b      	beq.n	800245a <HAL_GPIO_Init+0x6a>
 8002422:	b1d3      	cbz	r3, 800245a <HAL_GPIO_Init+0x6a>
 8002424:	4b62      	ldr	r3, [pc, #392]	@ (80025b0 <HAL_GPIO_Init+0x1c0>)
 8002426:	1ac3      	subs	r3, r0, r3
 8002428:	bf18      	it	ne
 800242a:	2301      	movne	r3, #1
 800242c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002430:	4290      	cmp	r0, r2
 8002432:	d012      	beq.n	800245a <HAL_GPIO_Init+0x6a>
 8002434:	b18b      	cbz	r3, 800245a <HAL_GPIO_Init+0x6a>
 8002436:	4b5f      	ldr	r3, [pc, #380]	@ (80025b4 <HAL_GPIO_Init+0x1c4>)
 8002438:	1ac3      	subs	r3, r0, r3
 800243a:	bf18      	it	ne
 800243c:	2301      	movne	r3, #1
 800243e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002442:	4290      	cmp	r0, r2
 8002444:	d009      	beq.n	800245a <HAL_GPIO_Init+0x6a>
 8002446:	b143      	cbz	r3, 800245a <HAL_GPIO_Init+0x6a>
 8002448:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <HAL_GPIO_Init+0x1c8>)
 800244a:	1ac3      	subs	r3, r0, r3
 800244c:	bf18      	it	ne
 800244e:	2301      	movne	r3, #1
 8002450:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002454:	4290      	cmp	r0, r2
 8002456:	d000      	beq.n	800245a <HAL_GPIO_Init+0x6a>
 8002458:	b9db      	cbnz	r3, 8002492 <HAL_GPIO_Init+0xa2>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	b112      	cbz	r2, 8002466 <HAL_GPIO_Init+0x76>
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002464:	d303      	bcc.n	800246e <HAL_GPIO_Init+0x7e>
 8002466:	21b4      	movs	r1, #180	@ 0xb4
 8002468:	4854      	ldr	r0, [pc, #336]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 800246a:	f7fe fa81 	bl	8000970 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	2b11      	cmp	r3, #17
 8002472:	bf18      	it	ne
 8002474:	2b01      	cmpne	r3, #1
 8002476:	d925      	bls.n	80024c4 <HAL_GPIO_Init+0xd4>
 8002478:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800247c:	d022      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 800247e:	d814      	bhi.n	80024aa <HAL_GPIO_Init+0xba>
 8002480:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002484:	d01e      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 8002486:	d80c      	bhi.n	80024a2 <HAL_GPIO_Init+0xb2>
 8002488:	2b03      	cmp	r3, #3
 800248a:	d807      	bhi.n	800249c <HAL_GPIO_Init+0xac>
 800248c:	2b02      	cmp	r3, #2
 800248e:	d219      	bcs.n	80024c4 <HAL_GPIO_Init+0xd4>
 8002490:	e014      	b.n	80024bc <HAL_GPIO_Init+0xcc>
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002492:	21b3      	movs	r1, #179	@ 0xb3
 8002494:	4849      	ldr	r0, [pc, #292]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 8002496:	f7fe fa6b 	bl	8000970 <assert_failed>
 800249a:	e7de      	b.n	800245a <HAL_GPIO_Init+0x6a>
 800249c:	2b12      	cmp	r3, #18
 800249e:	d011      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 80024a0:	e00c      	b.n	80024bc <HAL_GPIO_Init+0xcc>
 80024a2:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80024a6:	d00d      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0xcc>
 80024aa:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80024ae:	d009      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 80024b0:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80024b4:	d006      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
 80024b6:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0xd4>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80024bc:	21b5      	movs	r1, #181	@ 0xb5
 80024be:	483f      	ldr	r0, [pc, #252]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 80024c0:	f7fe fa56 	bl	8000970 <assert_failed>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024c4:	2500      	movs	r5, #0
 80024c6:	e0bd      	b.n	8002644 <HAL_GPIO_Init+0x254>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80024c8:	68e3      	ldr	r3, [r4, #12]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d817      	bhi.n	80024fe <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR;
 80024ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d2:	0069      	lsls	r1, r5, #1
 80024d4:	2303      	movs	r3, #3
 80024d6:	408b      	lsls	r3, r1
 80024d8:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024dc:	68e3      	ldr	r3, [r4, #12]
 80024de:	408b      	lsls	r3, r1
 80024e0:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 80024e2:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 80024e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ea:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	6863      	ldr	r3, [r4, #4]
 80024f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024f4:	40ab      	lsls	r3, r5
 80024f6:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80024f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80024fc:	e0b2      	b.n	8002664 <HAL_GPIO_Init+0x274>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80024fe:	21c4      	movs	r1, #196	@ 0xc4
 8002500:	482e      	ldr	r0, [pc, #184]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 8002502:	f7fe fa35 	bl	8000970 <assert_failed>
 8002506:	e7e2      	b.n	80024ce <HAL_GPIO_Init+0xde>
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002508:	21d6      	movs	r1, #214	@ 0xd6
 800250a:	482c      	ldr	r0, [pc, #176]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 800250c:	f7fe fa30 	bl	8000970 <assert_failed>
 8002510:	e0b1      	b.n	8002676 <HAL_GPIO_Init+0x286>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002512:	f1b9 0f00 	cmp.w	r9, #0
 8002516:	d026      	beq.n	8002566 <HAL_GPIO_Init+0x176>
 8002518:	4b29      	ldr	r3, [pc, #164]	@ (80025c0 <HAL_GPIO_Init+0x1d0>)
 800251a:	ebb8 0303 	subs.w	r3, r8, r3
 800251e:	bf18      	it	ne
 8002520:	2301      	movne	r3, #1
 8002522:	4a28      	ldr	r2, [pc, #160]	@ (80025c4 <HAL_GPIO_Init+0x1d4>)
 8002524:	4590      	cmp	r8, r2
 8002526:	d01e      	beq.n	8002566 <HAL_GPIO_Init+0x176>
 8002528:	b1eb      	cbz	r3, 8002566 <HAL_GPIO_Init+0x176>
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_GPIO_Init+0x1c0>)
 800252c:	ebb8 0303 	subs.w	r3, r8, r3
 8002530:	bf18      	it	ne
 8002532:	2301      	movne	r3, #1
 8002534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002538:	4590      	cmp	r8, r2
 800253a:	d014      	beq.n	8002566 <HAL_GPIO_Init+0x176>
 800253c:	b19b      	cbz	r3, 8002566 <HAL_GPIO_Init+0x176>
 800253e:	4b1d      	ldr	r3, [pc, #116]	@ (80025b4 <HAL_GPIO_Init+0x1c4>)
 8002540:	ebb8 0303 	subs.w	r3, r8, r3
 8002544:	bf18      	it	ne
 8002546:	2301      	movne	r3, #1
 8002548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800254c:	4590      	cmp	r8, r2
 800254e:	d00a      	beq.n	8002566 <HAL_GPIO_Init+0x176>
 8002550:	b14b      	cbz	r3, 8002566 <HAL_GPIO_Init+0x176>
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_GPIO_Init+0x1c8>)
 8002554:	ebb8 0303 	subs.w	r3, r8, r3
 8002558:	bf18      	it	ne
 800255a:	2301      	movne	r3, #1
 800255c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002560:	4590      	cmp	r8, r2
 8002562:	d000      	beq.n	8002566 <HAL_GPIO_Init+0x176>
 8002564:	b99b      	cbnz	r3, 800258e <HAL_GPIO_Init+0x19e>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002566:	6923      	ldr	r3, [r4, #16]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d815      	bhi.n	8002598 <HAL_GPIO_Init+0x1a8>
        temp = GPIOx->AFR[position >> 3U];
 800256c:	08ea      	lsrs	r2, r5, #3
 800256e:	3208      	adds	r2, #8
 8002570:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002574:	f005 0107 	and.w	r1, r5, #7
 8002578:	0089      	lsls	r1, r1, #2
 800257a:	230f      	movs	r3, #15
 800257c:	408b      	lsls	r3, r1
 800257e:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	408b      	lsls	r3, r1
 8002586:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3U] = temp;
 8002588:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
 800258c:	e085      	b.n	800269a <HAL_GPIO_Init+0x2aa>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800258e:	21e3      	movs	r1, #227	@ 0xe3
 8002590:	480a      	ldr	r0, [pc, #40]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 8002592:	f7fe f9ed 	bl	8000970 <assert_failed>
 8002596:	e7e6      	b.n	8002566 <HAL_GPIO_Init+0x176>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002598:	21e4      	movs	r1, #228	@ 0xe4
 800259a:	4808      	ldr	r0, [pc, #32]	@ (80025bc <HAL_GPIO_Init+0x1cc>)
 800259c:	f7fe f9e8 	bl	8000970 <assert_failed>
 80025a0:	e7e4      	b.n	800256c <HAL_GPIO_Init+0x17c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a2:	2309      	movs	r3, #9
 80025a4:	e011      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 80025a6:	bf00      	nop
 80025a8:	58020000 	.word	0x58020000
 80025ac:	58020400 	.word	0x58020400
 80025b0:	58021400 	.word	0x58021400
 80025b4:	58021c00 	.word	0x58021c00
 80025b8:	58022800 	.word	0x58022800
 80025bc:	08009b6c 	.word	0x08009b6c
 80025c0:	58020c00 	.word	0x58020c00
 80025c4:	58020800 	.word	0x58020800
 80025c8:	2300      	movs	r3, #0
 80025ca:	408b      	lsls	r3, r1
 80025cc:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ce:	3202      	adds	r2, #2
 80025d0:	4963      	ldr	r1, [pc, #396]	@ (8002760 <HAL_GPIO_Init+0x370>)
 80025d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025da:	681a      	ldr	r2, [r3, #0]
        temp &= ~(iocurrent);
 80025dc:	43f3      	mvns	r3, r6
 80025de:	ea22 0106 	bic.w	r1, r2, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e2:	6860      	ldr	r0, [r4, #4]
 80025e4:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 80025e8:	d001      	beq.n	80025ee <HAL_GPIO_Init+0x1fe>
        {
          temp |= iocurrent;
 80025ea:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->RTSR1 = temp;
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025f2:	6011      	str	r1, [r2, #0]

        temp = EXTI->FTSR1;
 80025f4:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80025f6:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025fa:	6860      	ldr	r0, [r4, #4]
 80025fc:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8002600:	d001      	beq.n	8002606 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8002602:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI->FTSR1 = temp;
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800260a:	6051      	str	r1, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800260c:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002610:	ea03 0102 	and.w	r1, r3, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002614:	6860      	ldr	r0, [r4, #4]
 8002616:	f410 3f00 	tst.w	r0, #131072	@ 0x20000
 800261a:	d001      	beq.n	8002620 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800261c:	ea46 0102 	orr.w	r1, r6, r2
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002624:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002628:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
        temp &= ~(iocurrent);
 800262c:	4013      	ands	r3, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800262e:	6861      	ldr	r1, [r4, #4]
 8002630:	f411 3f80 	tst.w	r1, #65536	@ 0x10000
 8002634:	d001      	beq.n	800263a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8002636:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800263a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800263e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002642:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002644:	6826      	ldr	r6, [r4, #0]
 8002646:	fa36 f205 	lsrs.w	r2, r6, r5
 800264a:	f000 8086 	beq.w	800275a <HAL_GPIO_Init+0x36a>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800264e:	2701      	movs	r7, #1
 8002650:	40af      	lsls	r7, r5
    if (iocurrent != 0x00U)
 8002652:	403e      	ands	r6, r7
 8002654:	d0f5      	beq.n	8002642 <HAL_GPIO_Init+0x252>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3b01      	subs	r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	f67f af32 	bls.w	80024c8 <HAL_GPIO_Init+0xd8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002664:	6863      	ldr	r3, [r4, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d00f      	beq.n	800268e <HAL_GPIO_Init+0x29e>
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800266e:	68a3      	ldr	r3, [r4, #8]
 8002670:	2b02      	cmp	r3, #2
 8002672:	f63f af49 	bhi.w	8002508 <HAL_GPIO_Init+0x118>
      temp = GPIOx->PUPDR;
 8002676:	f8d8 200c 	ldr.w	r2, [r8, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800267a:	0069      	lsls	r1, r5, #1
 800267c:	2303      	movs	r3, #3
 800267e:	408b      	lsls	r3, r1
 8002680:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002684:	68a3      	ldr	r3, [r4, #8]
 8002686:	408b      	lsls	r3, r1
 8002688:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 800268a:	f8c8 300c 	str.w	r3, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	f43f af3c 	beq.w	8002512 <HAL_GPIO_Init+0x122>
      temp = GPIOx->MODER;
 800269a:	f8d8 2000 	ldr.w	r2, [r8]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800269e:	0069      	lsls	r1, r5, #1
 80026a0:	2303      	movs	r3, #3
 80026a2:	408b      	lsls	r3, r1
 80026a4:	ea22 0203 	bic.w	r2, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a8:	6863      	ldr	r3, [r4, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	408b      	lsls	r3, r1
 80026b0:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 80026b2:	f8c8 3000 	str.w	r3, [r8]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b6:	6863      	ldr	r3, [r4, #4]
 80026b8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80026bc:	d0c1      	beq.n	8002642 <HAL_GPIO_Init+0x252>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	4b29      	ldr	r3, [pc, #164]	@ (8002764 <HAL_GPIO_Init+0x374>)
 80026c0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80026c4:	f042 0202 	orr.w	r2, r2, #2
 80026c8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80026cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80026d8:	08aa      	lsrs	r2, r5, #2
 80026da:	1c91      	adds	r1, r2, #2
 80026dc:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_GPIO_Init+0x370>)
 80026de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026e2:	f005 0103 	and.w	r1, r5, #3
 80026e6:	0089      	lsls	r1, r1, #2
 80026e8:	230f      	movs	r3, #15
 80026ea:	408b      	lsls	r3, r1
 80026ec:	ea20 0003 	bic.w	r0, r0, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <HAL_GPIO_Init+0x378>)
 80026f2:	4598      	cmp	r8, r3
 80026f4:	f43f af68 	beq.w	80025c8 <HAL_GPIO_Init+0x1d8>
 80026f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026fc:	4598      	cmp	r8, r3
 80026fe:	d01e      	beq.n	800273e <HAL_GPIO_Init+0x34e>
 8002700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002704:	4598      	cmp	r8, r3
 8002706:	d01c      	beq.n	8002742 <HAL_GPIO_Init+0x352>
 8002708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800270c:	4598      	cmp	r8, r3
 800270e:	d01a      	beq.n	8002746 <HAL_GPIO_Init+0x356>
 8002710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002714:	4598      	cmp	r8, r3
 8002716:	d018      	beq.n	800274a <HAL_GPIO_Init+0x35a>
 8002718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800271c:	4598      	cmp	r8, r3
 800271e:	d016      	beq.n	800274e <HAL_GPIO_Init+0x35e>
 8002720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002724:	4598      	cmp	r8, r3
 8002726:	d014      	beq.n	8002752 <HAL_GPIO_Init+0x362>
 8002728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800272c:	4598      	cmp	r8, r3
 800272e:	d012      	beq.n	8002756 <HAL_GPIO_Init+0x366>
 8002730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002734:	4598      	cmp	r8, r3
 8002736:	f43f af34 	beq.w	80025a2 <HAL_GPIO_Init+0x1b2>
 800273a:	230a      	movs	r3, #10
 800273c:	e745      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 800273e:	2301      	movs	r3, #1
 8002740:	e743      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 8002742:	2302      	movs	r3, #2
 8002744:	e741      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 8002746:	2303      	movs	r3, #3
 8002748:	e73f      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 800274a:	2304      	movs	r3, #4
 800274c:	e73d      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 800274e:	2305      	movs	r3, #5
 8002750:	e73b      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 8002752:	2306      	movs	r3, #6
 8002754:	e739      	b.n	80025ca <HAL_GPIO_Init+0x1da>
 8002756:	2307      	movs	r3, #7
 8002758:	e737      	b.n	80025ca <HAL_GPIO_Init+0x1da>
  }
}
 800275a:	b003      	add	sp, #12
 800275c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002760:	58000400 	.word	0x58000400
 8002764:	58024400 	.word	0x58024400
 8002768:	58020000 	.word	0x58020000

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4605      	mov	r5, r0
 8002770:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002772:	460e      	mov	r6, r1
 8002774:	b121      	cbz	r1, 8002780 <HAL_GPIO_WritePin+0x14>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002776:	2c01      	cmp	r4, #1
 8002778:	d808      	bhi.n	800278c <HAL_GPIO_WritePin+0x20>

  if (PinState != GPIO_PIN_RESET)
 800277a:	b16c      	cbz	r4, 8002798 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277c:	61ae      	str	r6, [r5, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800277e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002780:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002784:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <HAL_GPIO_WritePin+0x34>)
 8002786:	f7fe f8f3 	bl	8000970 <assert_failed>
 800278a:	e7f4      	b.n	8002776 <HAL_GPIO_WritePin+0xa>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800278c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002790:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <HAL_GPIO_WritePin+0x34>)
 8002792:	f7fe f8ed 	bl	8000970 <assert_failed>
 8002796:	e7f0      	b.n	800277a <HAL_GPIO_WritePin+0xe>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002798:	0436      	lsls	r6, r6, #16
 800279a:	61ae      	str	r6, [r5, #24]
}
 800279c:	e7ef      	b.n	800277e <HAL_GPIO_WritePin+0x12>
 800279e:	bf00      	nop
 80027a0:	08009b6c 	.word	0x08009b6c

080027a4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	2800      	cmp	r0, #0
 80027a6:	f000 80bf 	beq.w	8002928 <HAL_I2C_Init+0x184>
{
 80027aa:	b510      	push	{r4, lr}
 80027ac:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	495e      	ldr	r1, [pc, #376]	@ (800292c <HAL_I2C_Init+0x188>)
 80027b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002930 <HAL_I2C_Init+0x18c>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	bf18      	it	ne
 80027b8:	4293      	cmpne	r3, r2
 80027ba:	d00e      	beq.n	80027da <HAL_I2C_Init+0x36>
 80027bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00a      	beq.n	80027da <HAL_I2C_Init+0x36>
 80027c4:	4a5b      	ldr	r2, [pc, #364]	@ (8002934 <HAL_I2C_Init+0x190>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_I2C_Init+0x36>
 80027ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002938 <HAL_I2C_Init+0x194>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_I2C_Init+0x36>
 80027d0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80027d4:	4859      	ldr	r0, [pc, #356]	@ (800293c <HAL_I2C_Init+0x198>)
 80027d6:	f7fe f8cb 	bl	8000970 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e0:	d266      	bcs.n	80028b0 <HAL_I2C_Init+0x10c>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80027e2:	68e3      	ldr	r3, [r4, #12]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d868      	bhi.n	80028bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf18      	it	ne
 80027f0:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 80027f4:	d168      	bne.n	80028c8 <HAL_I2C_Init+0x124>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80027f6:	6963      	ldr	r3, [r4, #20]
 80027f8:	2bff      	cmp	r3, #255	@ 0xff
 80027fa:	d86b      	bhi.n	80028d4 <HAL_I2C_Init+0x130>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80027fc:	69a3      	ldr	r3, [r4, #24]
 80027fe:	2b07      	cmp	r3, #7
 8002800:	d86e      	bhi.n	80028e0 <HAL_I2C_Init+0x13c>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002802:	69e3      	ldr	r3, [r4, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf18      	it	ne
 8002808:	f5b3 2f00 	cmpne.w	r3, #524288	@ 0x80000
 800280c:	d16e      	bne.n	80028ec <HAL_I2C_Init+0x148>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800280e:	6a23      	ldr	r3, [r4, #32]
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf18      	it	ne
 8002814:	f5b3 3f00 	cmpne.w	r3, #131072	@ 0x20000
 8002818:	d16e      	bne.n	80028f8 <HAL_I2C_Init+0x154>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800281e:	2b00      	cmp	r3, #0
 8002820:	d070      	beq.n	8002904 <HAL_I2C_Init+0x160>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002822:	2324      	movs	r3, #36	@ 0x24
 8002824:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	6822      	ldr	r2, [r4, #0]
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002832:	6863      	ldr	r3, [r4, #4]
 8002834:	6822      	ldr	r2, [r4, #0]
 8002836:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800283a:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	6893      	ldr	r3, [r2, #8]
 8002840:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002844:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002846:	68e3      	ldr	r3, [r4, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d061      	beq.n	8002910 <HAL_I2C_Init+0x16c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800284c:	68a3      	ldr	r3, [r4, #8]
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8002854:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002856:	68e3      	ldr	r3, [r4, #12]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d05f      	beq.n	800291c <HAL_I2C_Init+0x178>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	6853      	ldr	r3, [r2, #4]
 8002860:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002864:	6053      	str	r3, [r2, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	6851      	ldr	r1, [r2, #4]
 800286a:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <HAL_I2C_Init+0x19c>)
 800286c:	430b      	orrs	r3, r1
 800286e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	68d3      	ldr	r3, [r2, #12]
 8002874:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002878:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800287a:	6923      	ldr	r3, [r4, #16]
 800287c:	6962      	ldr	r2, [r4, #20]
 800287e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002880:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002882:	6822      	ldr	r2, [r4, #0]
 8002884:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002888:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288a:	69e3      	ldr	r3, [r4, #28]
 800288c:	6a21      	ldr	r1, [r4, #32]
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289e:	2000      	movs	r0, #0
 80028a0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	2320      	movs	r3, #32
 80028a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028aa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 80028ae:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80028b0:	f240 2121 	movw	r1, #545	@ 0x221
 80028b4:	4821      	ldr	r0, [pc, #132]	@ (800293c <HAL_I2C_Init+0x198>)
 80028b6:	f7fe f85b 	bl	8000970 <assert_failed>
 80028ba:	e792      	b.n	80027e2 <HAL_I2C_Init+0x3e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80028bc:	f240 2122 	movw	r1, #546	@ 0x222
 80028c0:	481e      	ldr	r0, [pc, #120]	@ (800293c <HAL_I2C_Init+0x198>)
 80028c2:	f7fe f855 	bl	8000970 <assert_failed>
 80028c6:	e790      	b.n	80027ea <HAL_I2C_Init+0x46>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80028c8:	f240 2123 	movw	r1, #547	@ 0x223
 80028cc:	481b      	ldr	r0, [pc, #108]	@ (800293c <HAL_I2C_Init+0x198>)
 80028ce:	f7fe f84f 	bl	8000970 <assert_failed>
 80028d2:	e790      	b.n	80027f6 <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80028d4:	f44f 7109 	mov.w	r1, #548	@ 0x224
 80028d8:	4818      	ldr	r0, [pc, #96]	@ (800293c <HAL_I2C_Init+0x198>)
 80028da:	f7fe f849 	bl	8000970 <assert_failed>
 80028de:	e78d      	b.n	80027fc <HAL_I2C_Init+0x58>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80028e0:	f240 2125 	movw	r1, #549	@ 0x225
 80028e4:	4815      	ldr	r0, [pc, #84]	@ (800293c <HAL_I2C_Init+0x198>)
 80028e6:	f7fe f843 	bl	8000970 <assert_failed>
 80028ea:	e78a      	b.n	8002802 <HAL_I2C_Init+0x5e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80028ec:	f240 2126 	movw	r1, #550	@ 0x226
 80028f0:	4812      	ldr	r0, [pc, #72]	@ (800293c <HAL_I2C_Init+0x198>)
 80028f2:	f7fe f83d 	bl	8000970 <assert_failed>
 80028f6:	e78a      	b.n	800280e <HAL_I2C_Init+0x6a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80028f8:	f240 2127 	movw	r1, #551	@ 0x227
 80028fc:	480f      	ldr	r0, [pc, #60]	@ (800293c <HAL_I2C_Init+0x198>)
 80028fe:	f7fe f837 	bl	8000970 <assert_failed>
 8002902:	e78a      	b.n	800281a <HAL_I2C_Init+0x76>
    hi2c->Lock = HAL_UNLOCKED;
 8002904:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002908:	4620      	mov	r0, r4
 800290a:	f7fd ff29 	bl	8000760 <HAL_I2C_MspInit>
 800290e:	e788      	b.n	8002822 <HAL_I2C_Init+0x7e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002910:	68a3      	ldr	r3, [r4, #8]
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002918:	6093      	str	r3, [r2, #8]
 800291a:	e79c      	b.n	8002856 <HAL_I2C_Init+0xb2>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800291c:	6822      	ldr	r2, [r4, #0]
 800291e:	6853      	ldr	r3, [r2, #4]
 8002920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002924:	6053      	str	r3, [r2, #4]
 8002926:	e79e      	b.n	8002866 <HAL_I2C_Init+0xc2>
    return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
}
 800292a:	4770      	bx	lr
 800292c:	40005400 	.word	0x40005400
 8002930:	40005800 	.word	0x40005800
 8002934:	58001c00 	.word	0x58001c00
 8002938:	40006400 	.word	0x40006400
 800293c:	08009ba4 	.word	0x08009ba4
 8002940:	02008000 	.word	0x02008000

08002944 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	4604      	mov	r4, r0
 8002948:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	4924      	ldr	r1, [pc, #144]	@ (80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800294e:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8002950:	428b      	cmp	r3, r1
 8002952:	bf18      	it	ne
 8002954:	4293      	cmpne	r3, r2
 8002956:	d00d      	beq.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8002958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8002960:	4a21      	ldr	r2, [pc, #132]	@ (80029e8 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d006      	beq.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8002966:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800296c:	2163      	movs	r1, #99	@ 0x63
 800296e:	4820      	ldr	r0, [pc, #128]	@ (80029f0 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 8002970:	f7fd fffe 	bl	8000970 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002974:	2d00      	cmp	r5, #0
 8002976:	bf18      	it	ne
 8002978:	f5b5 5f80 	cmpne.w	r5, #4096	@ 0x1000
 800297c:	d127      	bne.n	80029ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002982:	2b20      	cmp	r3, #32
 8002984:	d128      	bne.n	80029d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800298a:	2b01      	cmp	r3, #1
 800298c:	d026      	beq.n	80029dc <HAL_I2CEx_ConfigAnalogFilter+0x98>
 800298e:	2301      	movs	r3, #1
 8002990:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	2324      	movs	r3, #36	@ 0x24
 8002996:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	6813      	ldr	r3, [r2, #0]
 80029a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ac:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ae:	6822      	ldr	r2, [r4, #0]
 80029b0:	6813      	ldr	r3, [r2, #0]
 80029b2:	432b      	orrs	r3, r5
 80029b4:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	6813      	ldr	r3, [r2, #0]
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	2320      	movs	r3, #32
 80029c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80029cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80029ce:	2164      	movs	r1, #100	@ 0x64
 80029d0:	4807      	ldr	r0, [pc, #28]	@ (80029f0 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
 80029d2:	f7fd ffcd 	bl	8000970 <assert_failed>
 80029d6:	e7d2      	b.n	800297e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
    return HAL_BUSY;
 80029d8:	2002      	movs	r0, #2
 80029da:	e7f7      	b.n	80029cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
    __HAL_LOCK(hi2c);
 80029dc:	2002      	movs	r0, #2
 80029de:	e7f5      	b.n	80029cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
 80029e0:	40005400 	.word	0x40005400
 80029e4:	40005800 	.word	0x40005800
 80029e8:	58001c00 	.word	0x58001c00
 80029ec:	40006400 	.word	0x40006400
 80029f0:	08009bdc 	.word	0x08009bdc

080029f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	4922      	ldr	r1, [pc, #136]	@ (8002a88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029fe:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8002a00:	428b      	cmp	r3, r1
 8002a02:	bf18      	it	ne
 8002a04:	4293      	cmpne	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8002a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8002a10:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d006      	beq.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8002a16:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8002a1c:	2191      	movs	r1, #145	@ 0x91
 8002a1e:	481e      	ldr	r0, [pc, #120]	@ (8002a98 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
 8002a20:	f7fd ffa6 	bl	8000970 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002a24:	2d0f      	cmp	r5, #15
 8002a26:	d825      	bhi.n	8002a74 <HAL_I2CEx_ConfigDigitalFilter+0x80>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a28:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d126      	bne.n	8002a7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d024      	beq.n	8002a82 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	2324      	movs	r3, #36	@ 0x24
 8002a40:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a5a:	6013      	str	r3, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a5c:	6822      	ldr	r2, [r4, #0]
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	2320      	movs	r3, #32
 8002a68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8002a74:	2192      	movs	r1, #146	@ 0x92
 8002a76:	4808      	ldr	r0, [pc, #32]	@ (8002a98 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
 8002a78:	f7fd ff7a 	bl	8000970 <assert_failed>
 8002a7c:	e7d4      	b.n	8002a28 <HAL_I2CEx_ConfigDigitalFilter+0x34>
    return HAL_BUSY;
 8002a7e:	2002      	movs	r0, #2
 8002a80:	e7f7      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x7e>
    __HAL_LOCK(hi2c);
 8002a82:	2002      	movs	r0, #2
 8002a84:	e7f5      	b.n	8002a72 <HAL_I2CEx_ConfigDigitalFilter+0x7e>
 8002a86:	bf00      	nop
 8002a88:	40005400 	.word	0x40005400
 8002a8c:	40005800 	.word	0x40005800
 8002a90:	58001c00 	.word	0x58001c00
 8002a94:	40006400 	.word	0x40006400
 8002a98:	08009bdc 	.word	0x08009bdc

08002a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <HAL_MspInit+0x20>)
 8002aa0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002aa4:	f042 0202 	orr.w	r2, r2, #2
 8002aa8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab8:	b002      	add	sp, #8
 8002aba:	4770      	bx	lr
 8002abc:	58024400 	.word	0x58024400

08002ac0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac4:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac6:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8002aca:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8002ace:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d854      	bhi.n	8002b84 <PCD_WriteEmptyTxFifo+0xc4>
 8002ada:	4607      	mov	r7, r0
 8002adc:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ade:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8002ae0:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8002ae4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ae8:	69d2      	ldr	r2, [r2, #28]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d300      	bcc.n	8002af0 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8002aee:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8002af0:	f102 0903 	add.w	r9, r2, #3
 8002af4:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af8:	e015      	b.n	8002b26 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8002afa:	f106 0903 	add.w	r9, r6, #3
 8002afe:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
                          (uint8_t)hpcd->Init.dma_enable);
 8002b02:	79bb      	ldrb	r3, [r7, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b04:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8002b08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8002b0c:	6a29      	ldr	r1, [r5, #32]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	b2b3      	uxth	r3, r6
 8002b12:	b2e2      	uxtb	r2, r4
 8002b14:	4640      	mov	r0, r8
 8002b16:	f005 f81a 	bl	8007b4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b1a:	6a2b      	ldr	r3, [r5, #32]
 8002b1c:	4433      	add	r3, r6
 8002b1e:	622b      	str	r3, [r5, #32]
    ep->xfer_count += len;
 8002b20:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002b22:	4433      	add	r3, r6
 8002b24:	62ab      	str	r3, [r5, #40]	@ 0x28
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b26:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8002b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b32:	454b      	cmp	r3, r9
 8002b34:	d312      	bcc.n	8002b5c <PCD_WriteEmptyTxFifo+0x9c>
 8002b36:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002b3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8002b3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20a      	bcs.n	8002b5c <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b46:	b14b      	cbz	r3, 8002b5c <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 8002b48:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 8002b4a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8002b4e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8002b52:	69d6      	ldr	r6, [r2, #28]
 8002b54:	429e      	cmp	r6, r3
 8002b56:	d3d0      	bcc.n	8002afa <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8002b58:	461e      	mov	r6, r3
 8002b5a:	e7ce      	b.n	8002afa <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b5c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002b60:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8002b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d80f      	bhi.n	8002b8c <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b6c:	f004 040f 	and.w	r4, r4, #15
 8002b70:	2201      	movs	r2, #1
 8002b72:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b74:	f8d8 3834 	ldr.w	r3, [r8, #2100]	@ 0x834
 8002b78:	ea23 0302 	bic.w	r3, r3, r2
 8002b7c:	f8c8 3834 	str.w	r3, [r8, #2100]	@ 0x834
  }

  return HAL_OK;
 8002b80:	2000      	movs	r0, #0
 8002b82:	e000      	b.n	8002b86 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
}
 8002b86:	b003      	add	sp, #12
 8002b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e7fa      	b.n	8002b86 <PCD_WriteEmptyTxFifo+0xc6>

08002b90 <HAL_PCD_Init>:
{
 8002b90:	b530      	push	{r4, r5, lr}
 8002b92:	b083      	sub	sp, #12
  if (hpcd == NULL)
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f000 8084 	beq.w	8002ca2 <HAL_PCD_Init+0x112>
 8002b9a:	4604      	mov	r4, r0
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002b9c:	6802      	ldr	r2, [r0, #0]
 8002b9e:	4b42      	ldr	r3, [pc, #264]	@ (8002ca8 <HAL_PCD_Init+0x118>)
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d003      	beq.n	8002bac <HAL_PCD_Init+0x1c>
 8002ba4:	2186      	movs	r1, #134	@ 0x86
 8002ba6:	4841      	ldr	r0, [pc, #260]	@ (8002cac <HAL_PCD_Init+0x11c>)
 8002ba8:	f7fd fee2 	bl	8000970 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bac:	f894 3495 	ldrb.w	r3, [r4, #1173]	@ 0x495
 8002bb0:	b1ab      	cbz	r3, 8002bde <HAL_PCD_Init+0x4e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  __HAL_PCD_DISABLE(hpcd);
 8002bb8:	6820      	ldr	r0, [r4, #0]
 8002bba:	f004 fd7d 	bl	80076b8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bbe:	7c23      	ldrb	r3, [r4, #16]
 8002bc0:	f88d 3000 	strb.w	r3, [sp]
 8002bc4:	1d23      	adds	r3, r4, #4
 8002bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc8:	6820      	ldr	r0, [r4, #0]
 8002bca:	f004 fcab 	bl	8007524 <USB_CoreInit>
 8002bce:	b160      	cbz	r0, 8002bea <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8002bd6:	2501      	movs	r5, #1
}
 8002bd8:	4628      	mov	r0, r5
 8002bda:	b003      	add	sp, #12
 8002bdc:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002bde:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
    HAL_PCD_MspInit(hpcd);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f005 fece 	bl	8008984 <HAL_PCD_MspInit>
 8002be8:	e7e3      	b.n	8002bb2 <HAL_PCD_Init+0x22>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bea:	2100      	movs	r1, #0
 8002bec:	6820      	ldr	r0, [r4, #0]
 8002bee:	f005 f9c4 	bl	8007f7a <USB_SetCurrentMode>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	b9b8      	cbnz	r0, 8002c26 <HAL_PCD_Init+0x96>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	7920      	ldrb	r0, [r4, #4]
 8002bfa:	4298      	cmp	r0, r3
 8002bfc:	d918      	bls.n	8002c30 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8002bfe:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002c02:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002c06:	2001      	movs	r0, #1
 8002c08:	7548      	strb	r0, [r1, #21]
    hpcd->IN_ep[i].num = i;
 8002c0a:	750b      	strb	r3, [r1, #20]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c0c:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c0e:	2000      	movs	r0, #0
 8002c10:	7608      	strb	r0, [r1, #24]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c12:	61c8      	str	r0, [r1, #28]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c14:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c16:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8002c1a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002c1e:	6248      	str	r0, [r1, #36]	@ 0x24
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e7e8      	b.n	8002bf8 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c26:	2302      	movs	r3, #2
 8002c28:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8002c2c:	2501      	movs	r5, #1
 8002c2e:	e7d3      	b.n	8002bd8 <HAL_PCD_Init+0x48>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	4290      	cmp	r0, r2
 8002c32:	d917      	bls.n	8002c64 <HAL_PCD_Init+0xd4>
    hpcd->OUT_ep[i].is_in = 0U;
 8002c34:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002c38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f883 1255 	strb.w	r1, [r3, #597]	@ 0x255
    hpcd->OUT_ep[i].num = i;
 8002c42:	f883 2254 	strb.w	r2, [r3, #596]	@ 0x254
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c46:	f883 1258 	strb.w	r1, [r3, #600]	@ 0x258
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4a:	f8c3 125c 	str.w	r1, [r3, #604]	@ 0x25c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c4e:	f8c3 1260 	str.w	r1, [r3, #608]	@ 0x260
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c52:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8002c56:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002c5a:	f8c3 1264 	str.w	r1, [r3, #612]	@ 0x264
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5e:	3201      	adds	r2, #1
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	e7e5      	b.n	8002c30 <HAL_PCD_Init+0xa0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c64:	7c23      	ldrb	r3, [r4, #16]
 8002c66:	f88d 3000 	strb.w	r3, [sp]
 8002c6a:	1d23      	adds	r3, r4, #4
 8002c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	f004 fd78 	bl	8007764 <USB_DevInit>
 8002c74:	4605      	mov	r5, r0
 8002c76:	b958      	cbnz	r0, 8002c90 <HAL_PCD_Init+0x100>
  hpcd->USB_Address = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	7463      	strb	r3, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8002c82:	7b23      	ldrb	r3, [r4, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d008      	beq.n	8002c9a <HAL_PCD_Init+0x10a>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	f005 f935 	bl	8007ef8 <USB_DevDisconnect>
  return HAL_OK;
 8002c8e:	e7a3      	b.n	8002bd8 <HAL_PCD_Init+0x48>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 8002c96:	2501      	movs	r5, #1
 8002c98:	e79e      	b.n	8002bd8 <HAL_PCD_Init+0x48>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f000 fd7a 	bl	8003794 <HAL_PCDEx_ActivateLPM>
 8002ca0:	e7f2      	b.n	8002c88 <HAL_PCD_Init+0xf8>
    return HAL_ERROR;
 8002ca2:	2501      	movs	r5, #1
 8002ca4:	e798      	b.n	8002bd8 <HAL_PCD_Init+0x48>
 8002ca6:	bf00      	nop
 8002ca8:	40040000 	.word	0x40040000
 8002cac:	08009c14 	.word	0x08009c14

08002cb0 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hpcd);
 8002cb2:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 8002cb6:	2a01      	cmp	r2, #1
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_PCD_Start+0x40>
{
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002cca:	d002      	beq.n	8002cd2 <HAL_PCD_Start+0x22>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ccc:	7b42      	ldrb	r2, [r0, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cce:	2a01      	cmp	r2, #1
 8002cd0:	d009      	beq.n	8002ce6 <HAL_PCD_Start+0x36>
  __HAL_PCD_ENABLE(hpcd);
 8002cd2:	6820      	ldr	r0, [r4, #0]
 8002cd4:	f004 fcea 	bl	80076ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f005 f8ff 	bl	8007edc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002ce4:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ce8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002cec:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cee:	e7f0      	b.n	8002cd2 <HAL_PCD_Start+0x22>
  __HAL_LOCK(hpcd);
 8002cf0:	2002      	movs	r0, #2
}
 8002cf2:	4770      	bx	lr

08002cf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfa:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cfc:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cfe:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d06:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d08:	79a1      	ldrb	r1, [r4, #6]
 8002d0a:	2901      	cmp	r1, #1
 8002d0c:	d011      	beq.n	8002d32 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d0e:	4938      	ldr	r1, [pc, #224]	@ (8002df0 <PCD_EP_OutXfrComplete_int+0xfc>)
 8002d10:	428e      	cmp	r6, r1
 8002d12:	d056      	beq.n	8002dc2 <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d14:	b93d      	cbnz	r5, 8002d26 <PCD_EP_OutXfrComplete_int+0x32>
 8002d16:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8002d1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002d1e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d05e      	beq.n	8002de4 <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d26:	b2e9      	uxtb	r1, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f005 fe7d 	bl	8008a28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 8002d2e:	2000      	movs	r0, #0
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d32:	f012 0f08 	tst.w	r2, #8
 8002d36:	d009      	beq.n	8002d4c <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	492e      	ldr	r1, [pc, #184]	@ (8002df4 <PCD_EP_OutXfrComplete_int+0x100>)
 8002d3a:	428e      	cmp	r6, r1
 8002d3c:	d9f7      	bls.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
 8002d3e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002d42:	d0f4      	beq.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	e7f0      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d4c:	f012 0f20 	tst.w	r2, #32
 8002d50:	d002      	beq.n	8002d58 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d52:	2220      	movs	r2, #32
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	e7ea      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d58:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8002d5c:	d1e7      	bne.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5e:	4925      	ldr	r1, [pc, #148]	@ (8002df4 <PCD_EP_OutXfrComplete_int+0x100>)
 8002d60:	428e      	cmp	r6, r1
 8002d62:	d906      	bls.n	8002d72 <PCD_EP_OutXfrComplete_int+0x7e>
 8002d64:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002d68:	d003      	beq.n	8002d72 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e7dd      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d72:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002d76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002d7a:	f8d2 1274 	ldr.w	r1, [r2, #628]	@ 0x274
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	1acb      	subs	r3, r1, r3
 8002d86:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        if (epnum == 0U)
 8002d8a:	b97d      	cbnz	r5, 8002dac <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8002d8c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002d90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002d94:	f8d2 2264 	ldr.w	r2, [r2, #612]	@ 0x264
 8002d98:	b16a      	cbz	r2, 8002db6 <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8002d9a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8002d9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002da2:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
 8002da6:	4419      	add	r1, r3
 8002da8:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dac:	b2e9      	uxtb	r1, r5
 8002dae:	4620      	mov	r0, r4
 8002db0:	f005 fe3a 	bl	8008a28 <HAL_PCD_DataOutStageCallback>
 8002db4:	e7bb      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002db6:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002dba:	2101      	movs	r1, #1
 8002dbc:	f005 f91c 	bl	8007ff8 <USB_EP0_OutStart>
 8002dc0:	e7f4      	b.n	8002dac <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dc2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002dc6:	d003      	beq.n	8002dd0 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e7ae      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd0:	f012 0f20 	tst.w	r2, #32
 8002dd4:	d001      	beq.n	8002dda <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dda:	b2e9      	uxtb	r1, r5
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f005 fe23 	bl	8008a28 <HAL_PCD_DataOutStageCallback>
 8002de2:	e7a4      	b.n	8002d2e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002de4:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002de8:	2100      	movs	r1, #0
 8002dea:	f005 f905 	bl	8007ff8 <USB_EP0_OutStart>
 8002dee:	e79a      	b.n	8002d26 <PCD_EP_OutXfrComplete_int+0x32>
 8002df0:	4f54310a 	.word	0x4f54310a
 8002df4:	4f54300a 	.word	0x4f54300a

08002df8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dfc:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002dfe:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002e04:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	@ 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e08:	4a0e      	ldr	r2, [pc, #56]	@ (8002e44 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002e0a:	4295      	cmp	r5, r2
 8002e0c:	d907      	bls.n	8002e1e <PCD_EP_OutSetupPacket_int+0x26>
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e12:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8002e16:	d002      	beq.n	8002e1e <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e1c:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f005 fdfa 	bl	8008a18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e24:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <PCD_EP_OutSetupPacket_int+0x4c>)
 8002e26:	429d      	cmp	r5, r3
 8002e28:	d902      	bls.n	8002e30 <PCD_EP_OutSetupPacket_int+0x38>
 8002e2a:	79a3      	ldrb	r3, [r4, #6]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d001      	beq.n	8002e34 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002e30:	2000      	movs	r0, #0
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e34:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8002e38:	2101      	movs	r1, #1
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	f005 f8dc 	bl	8007ff8 <USB_EP0_OutStart>
 8002e40:	e7f6      	b.n	8002e30 <PCD_EP_OutSetupPacket_int+0x38>
 8002e42:	bf00      	nop
 8002e44:	4f54300a 	.word	0x4f54300a

08002e48 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002e48:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d00c      	beq.n	8002e6a <HAL_PCD_SetAddress+0x22>
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002e54:	2301      	movs	r3, #1
 8002e56:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e5a:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e5c:	6800      	ldr	r0, [r0, #0]
 8002e5e:	f005 f82d 	bl	8007ebc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002e68:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002e6a:	2002      	movs	r0, #2
}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_PCD_EP_Open>:
{
 8002e6e:	b538      	push	{r3, r4, r5, lr}
 8002e70:	4605      	mov	r5, r0
 8002e72:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002e74:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002e78:	d12b      	bne.n	8002ed2 <HAL_PCD_EP_Open+0x64>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7a:	f001 0e0f 	and.w	lr, r1, #15
 8002e7e:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 8002e82:	00a4      	lsls	r4, r4, #2
 8002e84:	f504 7414 	add.w	r4, r4, #592	@ 0x250
 8002e88:	4404      	add	r4, r0
 8002e8a:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8002e8c:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8002e90:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002e94:	2000      	movs	r0, #0
 8002e96:	f88e 0255 	strb.w	r0, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9a:	f00c 0c0f 	and.w	ip, ip, #15
 8002e9e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002ea2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002ea6:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8002ea8:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8002eaa:	784a      	ldrb	r2, [r1, #1]
 8002eac:	b10a      	cbz	r2, 8002eb2 <HAL_PCD_EP_Open+0x44>
    ep->tx_fifo_num = ep->num;
 8002eae:	f8a1 c01a 	strh.w	ip, [r1, #26]
  if (ep_type == EP_TYPE_BULK)
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_PCD_EP_Open+0x82>
  __HAL_LOCK(hpcd);
 8002eb6:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d01b      	beq.n	8002ef6 <HAL_PCD_EP_Open+0x88>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ec4:	6828      	ldr	r0, [r5, #0]
 8002ec6:	f004 fd27 	bl	8007918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494
}
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	f001 000f 	and.w	r0, r1, #15
 8002ed6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8002eda:	0089      	lsls	r1, r1, #2
 8002edc:	3110      	adds	r1, #16
 8002ede:	4429      	add	r1, r5
 8002ee0:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002ee2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002ee6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002eea:	2401      	movs	r4, #1
 8002eec:	7544      	strb	r4, [r0, #21]
 8002eee:	e7d4      	b.n	8002e9a <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	714b      	strb	r3, [r1, #5]
 8002ef4:	e7df      	b.n	8002eb6 <HAL_PCD_EP_Open+0x48>
  __HAL_LOCK(hpcd);
 8002ef6:	2002      	movs	r0, #2
 8002ef8:	e7ea      	b.n	8002ed0 <HAL_PCD_EP_Open+0x62>

08002efa <HAL_PCD_EP_Close>:
{
 8002efa:	b510      	push	{r4, lr}
 8002efc:	4604      	mov	r4, r0
 8002efe:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002f00:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002f04:	d120      	bne.n	8002f48 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f06:	f001 000f 	and.w	r0, r1, #15
 8002f0a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f14:	4423      	add	r3, r4
 8002f16:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002f18:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002f1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002f20:	2300      	movs	r3, #0
 8002f22:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f26:	f002 020f 	and.w	r2, r2, #15
 8002f2a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002f2c:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d018      	beq.n	8002f66 <HAL_PCD_EP_Close+0x6c>
 8002f34:	2301      	movs	r3, #1
 8002f36:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f3a:	6820      	ldr	r0, [r4, #0]
 8002f3c:	f004 fd38 	bl	80079b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8002f46:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	f001 000f 	and.w	r0, r1, #15
 8002f4c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3310      	adds	r3, #16
 8002f54:	4423      	add	r3, r4
 8002f56:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8002f58:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8002f5c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002f60:	2301      	movs	r3, #1
 8002f62:	7543      	strb	r3, [r0, #21]
 8002f64:	e7df      	b.n	8002f26 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8002f66:	2002      	movs	r0, #2
 8002f68:	e7ed      	b.n	8002f46 <HAL_PCD_EP_Close+0x4c>

08002f6a <HAL_PCD_EP_Receive>:
{
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	4614      	mov	r4, r2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6e:	f001 0c0f 	and.w	ip, r1, #15
 8002f72:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8002f76:	0089      	lsls	r1, r1, #2
 8002f78:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8002f7c:	4401      	add	r1, r0
 8002f7e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002f80:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8002f84:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002f88:	f8ce 2260 	str.w	r2, [lr, #608]	@ 0x260
  ep->xfer_len = len;
 8002f8c:	f8ce 3264 	str.w	r3, [lr, #612]	@ 0x264
  ep->xfer_count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8ce 3268 	str.w	r3, [lr, #616]	@ 0x268
  ep->is_in = 0U;
 8002f96:	f88e 3255 	strb.w	r3, [lr, #597]	@ 0x255
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9a:	f88e c254 	strb.w	ip, [lr, #596]	@ 0x254
  if (hpcd->Init.dma_enable == 1U)
 8002f9e:	7982      	ldrb	r2, [r0, #6]
 8002fa0:	2a01      	cmp	r2, #1
 8002fa2:	d004      	beq.n	8002fae <HAL_PCD_EP_Receive+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fa4:	6800      	ldr	r0, [r0, #0]
 8002fa6:	f004 fde9 	bl	8007b7c <USB_EPStartXfer>
}
 8002faa:	2000      	movs	r0, #0
 8002fac:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002fae:	f8ce 4270 	str.w	r4, [lr, #624]	@ 0x270
 8002fb2:	e7f7      	b.n	8002fa4 <HAL_PCD_EP_Receive+0x3a>

08002fb4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fb4:	f001 010f 	and.w	r1, r1, #15
 8002fb8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002fbc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8002fc0:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_PCD_EP_Transmit>:
{
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	4614      	mov	r4, r2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	f001 0c0f 	and.w	ip, r1, #15
 8002fce:	eb0c 01cc 	add.w	r1, ip, ip, lsl #3
 8002fd2:	0089      	lsls	r1, r1, #2
 8002fd4:	3110      	adds	r1, #16
 8002fd6:	4401      	add	r1, r0
 8002fd8:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8002fda:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8002fde:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8002fe2:	f8ce 2020 	str.w	r2, [lr, #32]
  ep->xfer_len = len;
 8002fe6:	f8ce 3024 	str.w	r3, [lr, #36]	@ 0x24
  ep->xfer_count = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8ce 3028 	str.w	r3, [lr, #40]	@ 0x28
  ep->is_in = 1U;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f88e 3015 	strb.w	r3, [lr, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff6:	f88e c014 	strb.w	ip, [lr, #20]
  if (hpcd->Init.dma_enable == 1U)
 8002ffa:	7982      	ldrb	r2, [r0, #6]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d004      	beq.n	800300a <HAL_PCD_EP_Transmit+0x44>
  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003000:	6800      	ldr	r0, [r0, #0]
 8003002:	f004 fdbb 	bl	8007b7c <USB_EPStartXfer>
}
 8003006:	2000      	movs	r0, #0
 8003008:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800300a:	f8ce 4030 	str.w	r4, [lr, #48]	@ 0x30
 800300e:	e7f7      	b.n	8003000 <HAL_PCD_EP_Transmit+0x3a>

08003010 <HAL_PCD_EP_SetStall>:
{
 8003010:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003012:	f001 050f 	and.w	r5, r1, #15
 8003016:	7902      	ldrb	r2, [r0, #4]
 8003018:	42aa      	cmp	r2, r5
 800301a:	d338      	bcc.n	800308e <HAL_PCD_EP_SetStall+0x7e>
 800301c:	4604      	mov	r4, r0
 800301e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8003020:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003024:	d11f      	bne.n	8003066 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8003026:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800302a:	0089      	lsls	r1, r1, #2
 800302c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003030:	4401      	add	r1, r0
 8003032:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8003034:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003038:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2255 	strb.w	r2, [r3, #597]	@ 0x255
  ep->is_stall = 1U;
 8003042:	2301      	movs	r3, #1
 8003044:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8003048:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 800304c:	2b01      	cmp	r3, #1
 800304e:	d020      	beq.n	8003092 <HAL_PCD_EP_SetStall+0x82>
 8003050:	2301      	movs	r3, #1
 8003052:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	f004 fed5 	bl	8007e06 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800305c:	b185      	cbz	r5, 8003080 <HAL_PCD_EP_SetStall+0x70>
  __HAL_UNLOCK(hpcd);
 800305e:	2000      	movs	r0, #0
 8003060:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 8003064:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800306a:	0089      	lsls	r1, r1, #2
 800306c:	3110      	adds	r1, #16
 800306e:	4401      	add	r1, r0
 8003070:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8003072:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003076:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800307a:	2201      	movs	r2, #1
 800307c:	755a      	strb	r2, [r3, #21]
 800307e:	e7e0      	b.n	8003042 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003080:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003084:	79a1      	ldrb	r1, [r4, #6]
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	f004 ffb6 	bl	8007ff8 <USB_EP0_OutStart>
 800308c:	e7e7      	b.n	800305e <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800308e:	2001      	movs	r0, #1
 8003090:	e7e8      	b.n	8003064 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8003092:	2002      	movs	r0, #2
 8003094:	e7e6      	b.n	8003064 <HAL_PCD_EP_SetStall+0x54>

08003096 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003096:	f001 030f 	and.w	r3, r1, #15
 800309a:	7902      	ldrb	r2, [r0, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d330      	bcc.n	8003102 <HAL_PCD_EP_ClrStall+0x6c>
{
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80030a4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80030a8:	d11e      	bne.n	80030e8 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030aa:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80030ae:	0089      	lsls	r1, r1, #2
 80030b0:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 80030b4:	4401      	add	r1, r0
 80030b6:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80030b8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80030bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030c0:	2000      	movs	r0, #0
 80030c2:	f882 0255 	strb.w	r0, [r2, #597]	@ 0x255
  ep->is_stall = 0U;
 80030c6:	2200      	movs	r2, #0
 80030c8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ca:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80030cc:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d018      	beq.n	8003106 <HAL_PCD_EP_ClrStall+0x70>
 80030d4:	2301      	movs	r3, #1
 80030d6:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030da:	6820      	ldr	r0, [r4, #0]
 80030dc:	f004 fec0 	bl	8007e60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 80030e6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e8:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80030ec:	0089      	lsls	r1, r1, #2
 80030ee:	3110      	adds	r1, #16
 80030f0:	4401      	add	r1, r0
 80030f2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80030f4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80030f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030fc:	2001      	movs	r0, #1
 80030fe:	7550      	strb	r0, [r2, #21]
 8003100:	e7e1      	b.n	80030c6 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003102:	2001      	movs	r0, #1
}
 8003104:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003106:	2002      	movs	r0, #2
 8003108:	e7ed      	b.n	80030e6 <HAL_PCD_EP_ClrStall+0x50>

0800310a <HAL_PCD_EP_Abort>:
{
 800310a:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800310c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003110:	d10c      	bne.n	800312c <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003112:	f001 010f 	and.w	r1, r1, #15
 8003116:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800311a:	0089      	lsls	r1, r1, #2
 800311c:	f501 7114 	add.w	r1, r1, #592	@ 0x250
 8003120:	4401      	add	r1, r0
 8003122:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003124:	6800      	ldr	r0, [r0, #0]
 8003126:	f004 fcb3 	bl	8007a90 <USB_EPStopXfer>
}
 800312a:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312c:	f001 010f 	and.w	r1, r1, #15
 8003130:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8003134:	0089      	lsls	r1, r1, #2
 8003136:	3110      	adds	r1, #16
 8003138:	4401      	add	r1, r0
 800313a:	3104      	adds	r1, #4
 800313c:	e7f2      	b.n	8003124 <HAL_PCD_EP_Abort+0x1a>

0800313e <HAL_PCD_IRQHandler>:
{
 800313e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003142:	b083      	sub	sp, #12
 8003144:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003148:	4628      	mov	r0, r5
 800314a:	f004 ff12 	bl	8007f72 <USB_GetMode>
 800314e:	b110      	cbz	r0, 8003156 <HAL_PCD_IRQHandler+0x18>
}
 8003150:	b003      	add	sp, #12
 8003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003156:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	f004 fedb 	bl	8007f14 <USB_ReadInterrupts>
 800315e:	2800      	cmp	r0, #0
 8003160:	d0f6      	beq.n	8003150 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003162:	f505 6700 	add.w	r7, r5, #2048	@ 0x800
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800316c:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	f004 fecf 	bl	8007f14 <USB_ReadInterrupts>
 8003176:	f010 0f02 	tst.w	r0, #2
 800317a:	d004      	beq.n	8003186 <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800317c:	6822      	ldr	r2, [r4, #0]
 800317e:	6953      	ldr	r3, [r2, #20]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	f004 fec4 	bl	8007f14 <USB_ReadInterrupts>
 800318c:	f010 0f10 	tst.w	r0, #16
 8003190:	d016      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x82>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	6993      	ldr	r3, [r2, #24]
 8003196:	f023 0310 	bic.w	r3, r3, #16
 800319a:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 800319c:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031a0:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031a4:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 80031a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031ac:	d06a      	beq.n	8003284 <HAL_PCD_IRQHandler+0x146>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031b2:	f000 808d 	beq.w	80032d0 <HAL_PCD_IRQHandler+0x192>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	6993      	ldr	r3, [r2, #24]
 80031ba:	f043 0310 	orr.w	r3, r3, #16
 80031be:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	f004 fea7 	bl	8007f14 <USB_ReadInterrupts>
 80031c6:	f410 2f00 	tst.w	r0, #524288	@ 0x80000
 80031ca:	f040 8093 	bne.w	80032f4 <HAL_PCD_IRQHandler+0x1b6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	f004 fea0 	bl	8007f14 <USB_ReadInterrupts>
 80031d4:	f410 2f80 	tst.w	r0, #262144	@ 0x40000
 80031d8:	f040 80fc 	bne.w	80033d4 <HAL_PCD_IRQHandler+0x296>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031dc:	6820      	ldr	r0, [r4, #0]
 80031de:	f004 fe99 	bl	8007f14 <USB_ReadInterrupts>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	f2c0 817d 	blt.w	80034e2 <HAL_PCD_IRQHandler+0x3a4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	f004 fe93 	bl	8007f14 <USB_ReadInterrupts>
 80031ee:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 80031f2:	d009      	beq.n	8003208 <HAL_PCD_IRQHandler+0xca>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f013 0f01 	tst.w	r3, #1
 80031fa:	f040 818a 	bne.w	8003512 <HAL_PCD_IRQHandler+0x3d4>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	6953      	ldr	r3, [r2, #20]
 8003202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003206:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	f004 fe83 	bl	8007f14 <USB_ReadInterrupts>
 800320e:	f010 6f00 	tst.w	r0, #134217728	@ 0x8000000
 8003212:	d015      	beq.n	8003240 <HAL_PCD_IRQHandler+0x102>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	6953      	ldr	r3, [r2, #20]
 8003218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800321c:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800321e:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8179 	bne.w	800351a <HAL_PCD_IRQHandler+0x3dc>
        hpcd->LPM_State = LPM_L1;
 8003228:	2101      	movs	r1, #1
 800322a:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8003236:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800323a:	4620      	mov	r0, r4
 800323c:	f000 fabe 	bl	80037bc <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	f004 fe67 	bl	8007f14 <USB_ReadInterrupts>
 8003246:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800324a:	f040 816a 	bne.w	8003522 <HAL_PCD_IRQHandler+0x3e4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f004 fe60 	bl	8007f14 <USB_ReadInterrupts>
 8003254:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8003258:	f040 81b6 	bne.w	80035c8 <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800325c:	6820      	ldr	r0, [r4, #0]
 800325e:	f004 fe59 	bl	8007f14 <USB_ReadInterrupts>
 8003262:	f010 0f08 	tst.w	r0, #8
 8003266:	f040 81c7 	bne.w	80035f8 <HAL_PCD_IRQHandler+0x4ba>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f004 fe52 	bl	8007f14 <USB_ReadInterrupts>
 8003270:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003274:	f000 81da 	beq.w	800362c <HAL_PCD_IRQHandler+0x4ee>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003278:	69ab      	ldr	r3, [r5, #24]
 800327a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800327e:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003280:	2601      	movs	r6, #1
 8003282:	e1c3      	b.n	800360c <HAL_PCD_IRQHandler+0x4ce>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003284:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003288:	ea18 0f03 	tst.w	r8, r3
 800328c:	d093      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x78>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800328e:	ea4f 1a18 	mov.w	sl, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	eb09 0bc9 	add.w	fp, r9, r9, lsl #3
 800329c:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
 80032a0:	f3c8 120a 	ubfx	r2, r8, #4, #11
 80032a4:	f8db 1260 	ldr.w	r1, [fp, #608]	@ 0x260
 80032a8:	4628      	mov	r0, r5
 80032aa:	f004 fd89 	bl	8007dc0 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ae:	f8db 3260 	ldr.w	r3, [fp, #608]	@ 0x260
 80032b2:	f3ca 0a0a 	ubfx	sl, sl, #0, #11
 80032b6:	4453      	add	r3, sl
 80032b8:	f8cb 3260 	str.w	r3, [fp, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032bc:	f8db 3268 	ldr.w	r3, [fp, #616]	@ 0x268
 80032c0:	9a01      	ldr	r2, [sp, #4]
 80032c2:	444a      	add	r2, r9
 80032c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80032c8:	4453      	add	r3, sl
 80032ca:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
 80032ce:	e772      	b.n	80031b6 <HAL_PCD_IRQHandler+0x78>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032d0:	2208      	movs	r2, #8
 80032d2:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 80032d6:	4628      	mov	r0, r5
 80032d8:	f004 fd72 	bl	8007dc0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032dc:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80032e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032e4:	f8d3 2268 	ldr.w	r2, [r3, #616]	@ 0x268
 80032e8:	f3c8 180a 	ubfx	r8, r8, #4, #11
 80032ec:	4442      	add	r2, r8
 80032ee:	f8c3 2268 	str.w	r2, [r3, #616]	@ 0x268
 80032f2:	e760      	b.n	80031b6 <HAL_PCD_IRQHandler+0x78>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	f004 fe11 	bl	8007f1c <USB_ReadDevAllOutEpInterrupt>
 80032fa:	4680      	mov	r8, r0
      epnum = 0U;
 80032fc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80032fe:	e035      	b.n	800336c <HAL_PCD_IRQHandler+0x22e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003300:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003304:	2201      	movs	r2, #1
 8003306:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800330a:	4649      	mov	r1, r9
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff fcf1 	bl	8002cf4 <PCD_EP_OutXfrComplete_int>
 8003312:	e03c      	b.n	800338e <HAL_PCD_IRQHandler+0x250>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003314:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003318:	2208      	movs	r2, #8
 800331a:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800331e:	4649      	mov	r1, r9
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff fd69 	bl	8002df8 <PCD_EP_OutSetupPacket_int>
 8003326:	e035      	b.n	8003394 <HAL_PCD_IRQHandler+0x256>
            if (ep->is_iso_incomplete == 1U)
 8003328:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800332c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003330:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 8003334:	2b01      	cmp	r3, #1
 8003336:	d041      	beq.n	80033bc <HAL_PCD_IRQHandler+0x27e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003338:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800333c:	2202      	movs	r2, #2
 800333e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003342:	f01a 0f20 	tst.w	sl, #32
 8003346:	d004      	beq.n	8003352 <HAL_PCD_IRQHandler+0x214>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003348:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800334c:	2220      	movs	r2, #32
 800334e:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003352:	f41a 5f00 	tst.w	sl, #8192	@ 0x2000
 8003356:	d005      	beq.n	8003364 <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003358:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800335c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003360:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
        epnum++;
 8003364:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003368:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800336c:	f1b8 0f00 	cmp.w	r8, #0
 8003370:	f43f af2d 	beq.w	80031ce <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U)
 8003374:	f018 0f01 	tst.w	r8, #1
 8003378:	d0f4      	beq.n	8003364 <HAL_PCD_IRQHandler+0x226>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800337a:	fa5f fb89 	uxtb.w	fp, r9
 800337e:	4659      	mov	r1, fp
 8003380:	6820      	ldr	r0, [r4, #0]
 8003382:	f004 fddb 	bl	8007f3c <USB_ReadDevOutEPInterrupt>
 8003386:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003388:	f010 0f01 	tst.w	r0, #1
 800338c:	d1b8      	bne.n	8003300 <HAL_PCD_IRQHandler+0x1c2>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800338e:	f01a 0f08 	tst.w	sl, #8
 8003392:	d1bf      	bne.n	8003314 <HAL_PCD_IRQHandler+0x1d6>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003394:	f01a 0f10 	tst.w	sl, #16
 8003398:	d004      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x266>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800339a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 800339e:	2210      	movs	r2, #16
 80033a0:	f8c3 2b08 	str.w	r2, [r3, #2824]	@ 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033a4:	f01a 0f02 	tst.w	sl, #2
 80033a8:	d0cb      	beq.n	8003342 <HAL_PCD_IRQHandler+0x204>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033aa:	696b      	ldr	r3, [r5, #20]
 80033ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033b0:	d0ba      	beq.n	8003328 <HAL_PCD_IRQHandler+0x1ea>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	e7b5      	b.n	8003328 <HAL_PCD_IRQHandler+0x1ea>
              ep->is_iso_incomplete = 0U;
 80033bc:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80033c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2257 	strb.w	r2, [r3, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033ca:	4659      	mov	r1, fp
 80033cc:	4620      	mov	r0, r4
 80033ce:	f005 fb7b 	bl	8008ac8 <HAL_PCD_ISOOUTIncompleteCallback>
 80033d2:	e7b1      	b.n	8003338 <HAL_PCD_IRQHandler+0x1fa>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033d4:	6820      	ldr	r0, [r4, #0]
 80033d6:	f004 fda9 	bl	8007f2c <USB_ReadDevAllInEpInterrupt>
 80033da:	4680      	mov	r8, r0
      epnum = 0U;
 80033dc:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80033de:	e025      	b.n	800342c <HAL_PCD_IRQHandler+0x2ee>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033e0:	4659      	mov	r1, fp
 80033e2:	4620      	mov	r0, r4
 80033e4:	f005 fb2c 	bl	8008a40 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033e8:	f01a 0f08 	tst.w	sl, #8
 80033ec:	d004      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x2ba>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ee:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80033f2:	2208      	movs	r2, #8
 80033f4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033f8:	f01a 0f10 	tst.w	sl, #16
 80033fc:	d004      	beq.n	8003408 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033fe:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003402:	2210      	movs	r2, #16
 8003404:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003408:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800340c:	d004      	beq.n	8003418 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800340e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003412:	2240      	movs	r2, #64	@ 0x40
 8003414:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003418:	f01a 0f02 	tst.w	sl, #2
 800341c:	d140      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x362>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800341e:	f01a 0f80 	tst.w	sl, #128	@ 0x80
 8003422:	d159      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x39a>
        epnum++;
 8003424:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8003428:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800342c:	f1b8 0f00 	cmp.w	r8, #0
 8003430:	f43f aed4 	beq.w	80031dc <HAL_PCD_IRQHandler+0x9e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003434:	f018 0f01 	tst.w	r8, #1
 8003438:	d0f4      	beq.n	8003424 <HAL_PCD_IRQHandler+0x2e6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800343a:	fa5f fb89 	uxtb.w	fp, r9
 800343e:	4659      	mov	r1, fp
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f004 fd84 	bl	8007f4e <USB_ReadDevInEPInterrupt>
 8003446:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003448:	f010 0f01 	tst.w	r0, #1
 800344c:	d0cc      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x2aa>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800344e:	f009 020f 	and.w	r2, r9, #15
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	ea23 0302 	bic.w	r3, r3, r2
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003460:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8003464:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
            if (hpcd->Init.dma_enable == 1U)
 8003468:	79a3      	ldrb	r3, [r4, #6]
 800346a:	428b      	cmp	r3, r1
 800346c:	d1b8      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x2a2>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800346e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003472:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003476:	6a1a      	ldr	r2, [r3, #32]
 8003478:	69d9      	ldr	r1, [r3, #28]
 800347a:	440a      	add	r2, r1
 800347c:	621a      	str	r2, [r3, #32]
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800347e:	f1b9 0f00 	cmp.w	r9, #0
 8003482:	d1ad      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x2a2>
 8003484:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8003488:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1a6      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x2a2>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003492:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 8003496:	2101      	movs	r1, #1
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	f004 fdad 	bl	8007ff8 <USB_EP0_OutStart>
 800349e:	e79f      	b.n	80033e0 <HAL_PCD_IRQHandler+0x2a2>
            (void)USB_FlushTxFifo(USBx, epnum);
 80034a0:	4649      	mov	r1, r9
 80034a2:	4628      	mov	r0, r5
 80034a4:	f004 f90e 	bl	80076c4 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 80034a8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80034ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034b0:	7ddb      	ldrb	r3, [r3, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d005      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x384>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034b6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 80034ba:	2202      	movs	r2, #2
 80034bc:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 80034c0:	e7ad      	b.n	800341e <HAL_PCD_IRQHandler+0x2e0>
              ep->is_iso_incomplete = 0U;
 80034c2:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 80034c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034ca:	2200      	movs	r2, #0
 80034cc:	75da      	strb	r2, [r3, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ce:	4659      	mov	r1, fp
 80034d0:	4620      	mov	r0, r4
 80034d2:	f005 faff 	bl	8008ad4 <HAL_PCD_ISOINIncompleteCallback>
 80034d6:	e7ee      	b.n	80034b6 <HAL_PCD_IRQHandler+0x378>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034d8:	4649      	mov	r1, r9
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff faf0 	bl	8002ac0 <PCD_WriteEmptyTxFifo>
 80034e0:	e7a0      	b.n	8003424 <HAL_PCD_IRQHandler+0x2e6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 80034ea:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_IRQHandler+0x3c6>
        HAL_PCD_ResumeCallback(hpcd);
 80034f2:	4620      	mov	r0, r4
 80034f4:	f005 fae2 	bl	8008abc <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	6953      	ldr	r3, [r2, #20]
 80034fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003500:	6153      	str	r3, [r2, #20]
 8003502:	e671      	b.n	80031e8 <HAL_PCD_IRQHandler+0xaa>
        hpcd->LPM_State = LPM_L0;
 8003504:	2100      	movs	r1, #0
 8003506:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800350a:	4620      	mov	r0, r4
 800350c:	f000 f956 	bl	80037bc <HAL_PCDEx_LPM_Callback>
 8003510:	e7f2      	b.n	80034f8 <HAL_PCD_IRQHandler+0x3ba>
        HAL_PCD_SuspendCallback(hpcd);
 8003512:	4620      	mov	r0, r4
 8003514:	f005 faba 	bl	8008a8c <HAL_PCD_SuspendCallback>
 8003518:	e671      	b.n	80031fe <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_SuspendCallback(hpcd);
 800351a:	4620      	mov	r0, r4
 800351c:	f005 fab6 	bl	8008a8c <HAL_PCD_SuspendCallback>
 8003520:	e68e      	b.n	8003240 <HAL_PCD_IRQHandler+0x102>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800352a:	2110      	movs	r1, #16
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	f004 f8c9 	bl	80076c4 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003532:	e01a      	b.n	800356a <HAL_PCD_IRQHandler+0x42c>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003534:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003538:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
 800353c:	f8c3 1908 	str.w	r1, [r3, #2312]	@ 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003540:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8003544:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003548:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800354c:	f8c3 1b08 	str.w	r1, [r3, #2824]	@ 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003550:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003554:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8003558:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800355c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8003560:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8003564:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003568:	3601      	adds	r6, #1
 800356a:	7923      	ldrb	r3, [r4, #4]
 800356c:	42b3      	cmp	r3, r6
 800356e:	d8e1      	bhi.n	8003534 <HAL_PCD_IRQHandler+0x3f6>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003576:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003578:	7be3      	ldrb	r3, [r4, #15]
 800357a:	b1db      	cbz	r3, 80035b4 <HAL_PCD_IRQHandler+0x476>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800357c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003580:	f043 030b 	orr.w	r3, r3, #11
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358a:	f043 030b 	orr.w	r3, r3, #11
 800358e:	647b      	str	r3, [r7, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003590:	f8d5 3800 	ldr.w	r3, [r5, #2048]	@ 0x800
 8003594:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003598:	f8c5 3800 	str.w	r3, [r5, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800359c:	f204 429c 	addw	r2, r4, #1180	@ 0x49c
 80035a0:	79a1      	ldrb	r1, [r4, #6]
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	f004 fd28 	bl	8007ff8 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	6953      	ldr	r3, [r2, #20]
 80035ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b0:	6153      	str	r3, [r2, #20]
 80035b2:	e64c      	b.n	800324e <HAL_PCD_IRQHandler+0x110>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	f242 032b 	movw	r3, #8235	@ 0x202b
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f043 030b 	orr.w	r3, r3, #11
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	e7e3      	b.n	8003590 <HAL_PCD_IRQHandler+0x452>
      (void)USB_ActivateSetup(hpcd->Instance);
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	f004 fd07 	bl	8007fdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	f004 f990 	bl	80078f4 <USB_GetDevSpeed>
 80035d4:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035d6:	6826      	ldr	r6, [r4, #0]
 80035d8:	f001 f87a 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80035dc:	4601      	mov	r1, r0
 80035de:	79e2      	ldrb	r2, [r4, #7]
 80035e0:	4630      	mov	r0, r6
 80035e2:	f003 fff1 	bl	80075c8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 80035e6:	4620      	mov	r0, r4
 80035e8:	f005 fa3b 	bl	8008a62 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	6953      	ldr	r3, [r2, #20]
 80035f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f4:	6153      	str	r3, [r2, #20]
 80035f6:	e631      	b.n	800325c <HAL_PCD_IRQHandler+0x11e>
      HAL_PCD_SOFCallback(hpcd);
 80035f8:	4620      	mov	r0, r4
 80035fa:	f005 fa2c 	bl	8008a56 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035fe:	6822      	ldr	r2, [r4, #0]
 8003600:	6953      	ldr	r3, [r2, #20]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	6153      	str	r3, [r2, #20]
 8003608:	e62f      	b.n	800326a <HAL_PCD_IRQHandler+0x12c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360a:	3601      	adds	r6, #1
 800360c:	7923      	ldrb	r3, [r4, #4]
 800360e:	42b3      	cmp	r3, r6
 8003610:	d90c      	bls.n	800362c <HAL_PCD_IRQHandler+0x4ee>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003612:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8003616:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800361a:	f893 3257 	ldrb.w	r3, [r3, #599]	@ 0x257
 800361e:	2b01      	cmp	r3, #1
 8003620:	d1f3      	bne.n	800360a <HAL_PCD_IRQHandler+0x4cc>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003622:	b2f1      	uxtb	r1, r6
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff fd70 	bl	800310a <HAL_PCD_EP_Abort>
 800362a:	e7ee      	b.n	800360a <HAL_PCD_IRQHandler+0x4cc>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	f004 fc71 	bl	8007f14 <USB_ReadInterrupts>
 8003632:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8003636:	d125      	bne.n	8003684 <HAL_PCD_IRQHandler+0x546>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	f004 fc6b 	bl	8007f14 <USB_ReadInterrupts>
 800363e:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8003642:	d058      	beq.n	80036f6 <HAL_PCD_IRQHandler+0x5b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003644:	2301      	movs	r3, #1
 8003646:	e026      	b.n	8003696 <HAL_PCD_IRQHandler+0x558>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003648:	3601      	adds	r6, #1
 800364a:	7923      	ldrb	r3, [r4, #4]
 800364c:	42b3      	cmp	r3, r6
 800364e:	d91b      	bls.n	8003688 <HAL_PCD_IRQHandler+0x54a>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003650:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8003654:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003658:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800365c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003660:	7e1b      	ldrb	r3, [r3, #24]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d1f0      	bne.n	8003648 <HAL_PCD_IRQHandler+0x50a>
 8003666:	2a00      	cmp	r2, #0
 8003668:	daee      	bge.n	8003648 <HAL_PCD_IRQHandler+0x50a>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800366a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800366e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003672:	2201      	movs	r2, #1
 8003674:	75da      	strb	r2, [r3, #23]
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003676:	f066 017f 	orn	r1, r6, #127	@ 0x7f
 800367a:	b2c9      	uxtb	r1, r1
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff fd44 	bl	800310a <HAL_PCD_EP_Abort>
 8003682:	e7e1      	b.n	8003648 <HAL_PCD_IRQHandler+0x50a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003684:	2601      	movs	r6, #1
 8003686:	e7e0      	b.n	800364a <HAL_PCD_IRQHandler+0x50c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003688:	6822      	ldr	r2, [r4, #0]
 800368a:	6953      	ldr	r3, [r2, #20]
 800368c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003690:	6153      	str	r3, [r2, #20]
 8003692:	e7d1      	b.n	8003638 <HAL_PCD_IRQHandler+0x4fa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003694:	3301      	adds	r3, #1
 8003696:	7922      	ldrb	r2, [r4, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d927      	bls.n	80036ec <HAL_PCD_IRQHandler+0x5ae>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800369c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80036a0:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	@ 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036a4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80036a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80036ac:	f892 2258 	ldrb.w	r2, [r2, #600]	@ 0x258
 80036b0:	2a01      	cmp	r2, #1
 80036b2:	d1ef      	bne.n	8003694 <HAL_PCD_IRQHandler+0x556>
 80036b4:	2900      	cmp	r1, #0
 80036b6:	daed      	bge.n	8003694 <HAL_PCD_IRQHandler+0x556>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80036b8:	f8d4 24d4 	ldr.w	r2, [r4, #1236]	@ 0x4d4
 80036bc:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036c0:	f012 0f01 	tst.w	r2, #1
 80036c4:	d1e6      	bne.n	8003694 <HAL_PCD_IRQHandler+0x556>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036c6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80036ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80036ce:	2101      	movs	r1, #1
 80036d0:	f882 1257 	strb.w	r1, [r2, #599]	@ 0x257
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036d4:	69aa      	ldr	r2, [r5, #24]
 80036d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036da:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036dc:	696a      	ldr	r2, [r5, #20]
 80036de:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80036e2:	d1d7      	bne.n	8003694 <HAL_PCD_IRQHandler+0x556>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ea:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	6953      	ldr	r3, [r2, #20]
 80036f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f004 fc0c 	bl	8007f14 <USB_ReadInterrupts>
 80036fc:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8003700:	d110      	bne.n	8003724 <HAL_PCD_IRQHandler+0x5e6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003702:	6820      	ldr	r0, [r4, #0]
 8003704:	f004 fc06 	bl	8007f14 <USB_ReadInterrupts>
 8003708:	f010 0f04 	tst.w	r0, #4
 800370c:	f43f ad20 	beq.w	8003150 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003714:	f015 0f04 	tst.w	r5, #4
 8003718:	d10d      	bne.n	8003736 <HAL_PCD_IRQHandler+0x5f8>
      hpcd->Instance->GOTGINT |= RegVal;
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	6853      	ldr	r3, [r2, #4]
 800371e:	432b      	orrs	r3, r5
 8003720:	6053      	str	r3, [r2, #4]
 8003722:	e515      	b.n	8003150 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8003724:	4620      	mov	r0, r4
 8003726:	f005 f9db 	bl	8008ae0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	6953      	ldr	r3, [r2, #20]
 800372e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003732:	6153      	str	r3, [r2, #20]
 8003734:	e7e5      	b.n	8003702 <HAL_PCD_IRQHandler+0x5c4>
        HAL_PCD_DisconnectCallback(hpcd);
 8003736:	4620      	mov	r0, r4
 8003738:	f005 f9d8 	bl	8008aec <HAL_PCD_DisconnectCallback>
 800373c:	e7ed      	b.n	800371a <HAL_PCD_IRQHandler+0x5dc>

0800373e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800373e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003740:	6804      	ldr	r4, [r0, #0]
 8003742:	6a60      	ldr	r0, [r4, #36]	@ 0x24

  if (fifo == 0U)
 8003744:	b931      	cbnz	r1, 8003754 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003746:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800374a:	62a0      	str	r0, [r4, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800374c:	2000      	movs	r0, #0
 800374e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003756:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003758:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800375c:	2300      	movs	r3, #0
 800375e:	e008      	b.n	8003772 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003760:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003764:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003768:	6849      	ldr	r1, [r1, #4]
 800376a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800376e:	3301      	adds	r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003776:	428b      	cmp	r3, r1
 8003778:	d3f2      	bcc.n	8003760 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800377a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800377e:	f10c 013f 	add.w	r1, ip, #63	@ 0x3f
 8003782:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003786:	6060      	str	r0, [r4, #4]
 8003788:	e7e0      	b.n	800374c <HAL_PCDEx_SetTxFiFo+0xe>

0800378a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800378a:	6803      	ldr	r3, [r0, #0]
 800378c:	6259      	str	r1, [r3, #36]	@ 0x24

  return HAL_OK;
}
 800378e:	2000      	movs	r0, #0
 8003790:	4770      	bx	lr
	...

08003794 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003794:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003796:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8003798:	2101      	movs	r1, #1
 800379a:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800379e:	2000      	movs	r0, #0
 80037a0:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037a4:	6993      	ldr	r3, [r2, #24]
 80037a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037aa:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037ac:	6d51      	ldr	r1, [r2, #84]	@ 0x54
 80037ae:	4b02      	ldr	r3, [pc, #8]	@ (80037b8 <HAL_PCDEx_ActivateLPM+0x24>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	10000003 	.word	0x10000003

080037bc <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 80037c4:	2802      	cmp	r0, #2
 80037c6:	bf18      	it	ne
 80037c8:	2804      	cmpne	r0, #4
 80037ca:	d016      	beq.n	80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037cc:	f1b0 0326 	subs.w	r3, r0, #38	@ 0x26
 80037d0:	bf18      	it	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2816      	cmp	r0, #22
 80037d6:	d010      	beq.n	80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037d8:	b17b      	cbz	r3, 80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037da:	f1b0 032e 	subs.w	r3, r0, #46	@ 0x2e
 80037de:	bf18      	it	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	281e      	cmp	r0, #30
 80037e4:	d009      	beq.n	80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037e6:	b143      	cbz	r3, 80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037e8:	f1b0 032d 	subs.w	r3, r0, #45	@ 0x2d
 80037ec:	bf18      	it	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	281d      	cmp	r0, #29
 80037f2:	d002      	beq.n	80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037f4:	b10b      	cbz	r3, 80037fa <HAL_PWREx_ConfigSupply+0x3a>
 80037f6:	2801      	cmp	r0, #1
 80037f8:	d10d      	bne.n	8003816 <HAL_PWREx_ConfigSupply+0x56>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80037fa:	4b26      	ldr	r3, [pc, #152]	@ (8003894 <HAL_PWREx_ConfigSupply+0xd4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	2b06      	cmp	r3, #6
 8003804:	d00d      	beq.n	8003822 <HAL_PWREx_ConfigSupply+0x62>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003806:	4b23      	ldr	r3, [pc, #140]	@ (8003894 <HAL_PWREx_ConfigSupply+0xd4>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800380e:	42a3      	cmp	r3, r4
 8003810:	d03d      	beq.n	800388e <HAL_PWREx_ConfigSupply+0xce>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003812:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003814:	bd38      	pop	{r3, r4, r5, pc}
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003816:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 800381a:	481f      	ldr	r0, [pc, #124]	@ (8003898 <HAL_PWREx_ConfigSupply+0xd8>)
 800381c:	f7fd f8a8 	bl	8000970 <assert_failed>
 8003820:	e7eb      	b.n	80037fa <HAL_PWREx_ConfigSupply+0x3a>
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <HAL_PWREx_ConfigSupply+0xd4>)
 8003824:	68d3      	ldr	r3, [r2, #12]
 8003826:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800382a:	4323      	orrs	r3, r4
 800382c:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800382e:	f7fd f9bf 	bl	8000bb0 <HAL_GetTick>
 8003832:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003834:	4b17      	ldr	r3, [pc, #92]	@ (8003894 <HAL_PWREx_ConfigSupply+0xd4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800383c:	d107      	bne.n	800384e <HAL_PWREx_ConfigSupply+0x8e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800383e:	f7fd f9b7 	bl	8000bb0 <HAL_GetTick>
 8003842:	1b40      	subs	r0, r0, r5
 8003844:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003848:	d9f4      	bls.n	8003834 <HAL_PWREx_ConfigSupply+0x74>
      return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
 800384c:	e7e2      	b.n	8003814 <HAL_PWREx_ConfigSupply+0x54>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800384e:	2c2e      	cmp	r4, #46	@ 0x2e
 8003850:	bf18      	it	ne
 8003852:	2c1e      	cmpne	r4, #30
 8003854:	d008      	beq.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8003856:	2c2d      	cmp	r4, #45	@ 0x2d
 8003858:	bf14      	ite	ne
 800385a:	2300      	movne	r3, #0
 800385c:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800385e:	2c1d      	cmp	r4, #29
 8003860:	d002      	beq.n	8003868 <HAL_PWREx_ConfigSupply+0xa8>
 8003862:	b90b      	cbnz	r3, 8003868 <HAL_PWREx_ConfigSupply+0xa8>
  return HAL_OK;
 8003864:	2000      	movs	r0, #0
 8003866:	e7d5      	b.n	8003814 <HAL_PWREx_ConfigSupply+0x54>
    tickstart = HAL_GetTick ();
 8003868:	f7fd f9a2 	bl	8000bb0 <HAL_GetTick>
 800386c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <HAL_PWREx_ConfigSupply+0xd4>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0311 	and.w	r3, r3, #17
 8003876:	2b11      	cmp	r3, #17
 8003878:	d007      	beq.n	800388a <HAL_PWREx_ConfigSupply+0xca>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800387a:	f7fd f999 	bl	8000bb0 <HAL_GetTick>
 800387e:	1b00      	subs	r0, r0, r4
 8003880:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003884:	d9f3      	bls.n	800386e <HAL_PWREx_ConfigSupply+0xae>
        return HAL_ERROR;
 8003886:	2001      	movs	r0, #1
 8003888:	e7c4      	b.n	8003814 <HAL_PWREx_ConfigSupply+0x54>
  return HAL_OK;
 800388a:	2000      	movs	r0, #0
 800388c:	e7c2      	b.n	8003814 <HAL_PWREx_ConfigSupply+0x54>
      return HAL_OK;
 800388e:	2000      	movs	r0, #0
 8003890:	e7c0      	b.n	8003814 <HAL_PWREx_ConfigSupply+0x54>
 8003892:	bf00      	nop
 8003894:	58024800 	.word	0x58024800
 8003898:	08009c4c 	.word	0x08009c4c

0800389c <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800389c:	4a02      	ldr	r2, [pc, #8]	@ (80038a8 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 800389e:	68d3      	ldr	r3, [r2, #12]
 80038a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a4:	60d3      	str	r3, [r2, #12]
}
 80038a6:	4770      	bx	lr
 80038a8:	58024800 	.word	0x58024800

080038ac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ac:	2800      	cmp	r0, #0
 80038ae:	f000 83af 	beq.w	8004010 <HAL_RCC_OscConfig+0x764>
{
 80038b2:	b538      	push	{r3, r4, r5, lr}
 80038b4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	b113      	cbz	r3, 80038c0 <HAL_RCC_OscConfig+0x14>
 80038ba:	f013 0f3f 	tst.w	r3, #63	@ 0x3f
 80038be:	d025      	beq.n	800390c <HAL_RCC_OscConfig+0x60>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	f013 0f01 	tst.w	r3, #1
 80038c6:	d03a      	beq.n	800393e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80038c8:	6863      	ldr	r3, [r4, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf18      	it	ne
 80038ce:	f5b3 3f80 	cmpne.w	r3, #65536	@ 0x10000
 80038d2:	d002      	beq.n	80038da <HAL_RCC_OscConfig+0x2e>
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d8:	d11e      	bne.n	8003918 <HAL_RCC_OscConfig+0x6c>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038da:	4a96      	ldr	r2, [pc, #600]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80038dc:	6913      	ldr	r3, [r2, #16]
 80038de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d021      	beq.n	800392c <HAL_RCC_OscConfig+0x80>
 80038e8:	2b18      	cmp	r3, #24
 80038ea:	d01b      	beq.n	8003924 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f2:	d057      	beq.n	80039a4 <HAL_RCC_OscConfig+0xf8>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d16b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x124>
 80038f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e050      	b.n	80039ae <HAL_RCC_OscConfig+0x102>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800390c:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8003910:	4889      	ldr	r0, [pc, #548]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003912:	f7fd f82d 	bl	8000970 <assert_failed>
 8003916:	e7d3      	b.n	80038c0 <HAL_RCC_OscConfig+0x14>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003918:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 800391c:	4886      	ldr	r0, [pc, #536]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 800391e:	f7fd f827 	bl	8000970 <assert_failed>
 8003922:	e7da      	b.n	80038da <HAL_RCC_OscConfig+0x2e>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003924:	f002 0203 	and.w	r2, r2, #3
 8003928:	2a02      	cmp	r2, #2
 800392a:	d1df      	bne.n	80038ec <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	4b81      	ldr	r3, [pc, #516]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003934:	d003      	beq.n	800393e <HAL_RCC_OscConfig+0x92>
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 836b 	beq.w	8004014 <HAL_RCC_OscConfig+0x768>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f013 0f02 	tst.w	r3, #2
 8003944:	f000 80a0 	beq.w	8003a88 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003948:	68e3      	ldr	r3, [r4, #12]
 800394a:	2b09      	cmp	r3, #9
 800394c:	bf18      	it	ne
 800394e:	2b01      	cmpne	r3, #1
 8003950:	d903      	bls.n	800395a <HAL_RCC_OscConfig+0xae>
 8003952:	2b11      	cmp	r3, #17
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0xae>
 8003956:	2b19      	cmp	r3, #25
 8003958:	d160      	bne.n	8003a1c <HAL_RCC_OscConfig+0x170>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800395a:	6923      	ldr	r3, [r4, #16]
 800395c:	2b7f      	cmp	r3, #127	@ 0x7f
 800395e:	d863      	bhi.n	8003a28 <HAL_RCC_OscConfig+0x17c>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003960:	4a74      	ldr	r2, [pc, #464]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003962:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003964:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003966:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800396a:	d066      	beq.n	8003a3a <HAL_RCC_OscConfig+0x18e>
 800396c:	2b18      	cmp	r3, #24
 800396e:	d061      	beq.n	8003a34 <HAL_RCC_OscConfig+0x188>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003970:	68e3      	ldr	r3, [r4, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80bd 	beq.w	8003af2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003978:	496e      	ldr	r1, [pc, #440]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 800397a:	680a      	ldr	r2, [r1, #0]
 800397c:	f022 0219 	bic.w	r2, r2, #25
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd f914 	bl	8000bb0 <HAL_GetTick>
 8003988:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800398a:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f013 0f04 	tst.w	r3, #4
 8003992:	f040 80a5 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003996:	f7fd f90b 	bl	8000bb0 <HAL_GetTick>
 800399a:	1b40      	subs	r0, r0, r5
 800399c:	2802      	cmp	r0, #2
 800399e:	d9f4      	bls.n	800398a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80039a0:	2003      	movs	r0, #3
 80039a2:	e068      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	4a63      	ldr	r2, [pc, #396]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ae:	6863      	ldr	r3, [r4, #4]
 80039b0:	b32b      	cbz	r3, 80039fe <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 80039b2:	f7fd f8fd 	bl	8000bb0 <HAL_GetTick>
 80039b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80039c0:	d1bd      	bne.n	800393e <HAL_RCC_OscConfig+0x92>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c2:	f7fd f8f5 	bl	8000bb0 <HAL_GetTick>
 80039c6:	1b40      	subs	r0, r0, r5
 80039c8:	2864      	cmp	r0, #100	@ 0x64
 80039ca:	d9f5      	bls.n	80039b8 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 80039cc:	2003      	movs	r0, #3
 80039ce:	e052      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_OscConfig+0x13e>
 80039d6:	4b57      	ldr	r3, [pc, #348]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e7e1      	b.n	80039ae <HAL_RCC_OscConfig+0x102>
 80039ea:	4b52      	ldr	r3, [pc, #328]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e7d7      	b.n	80039ae <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 80039fe:	f7fd f8d7 	bl	8000bb0 <HAL_GetTick>
 8003a02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a04:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003a0c:	d097      	beq.n	800393e <HAL_RCC_OscConfig+0x92>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0e:	f7fd f8cf 	bl	8000bb0 <HAL_GetTick>
 8003a12:	1b40      	subs	r0, r0, r5
 8003a14:	2864      	cmp	r0, #100	@ 0x64
 8003a16:	d9f5      	bls.n	8003a04 <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8003a18:	2003      	movs	r0, #3
 8003a1a:	e02c      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003a1c:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003a20:	4845      	ldr	r0, [pc, #276]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a22:	f7fc ffa5 	bl	8000970 <assert_failed>
 8003a26:	e798      	b.n	800395a <HAL_RCC_OscConfig+0xae>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003a28:	f240 11db 	movw	r1, #475	@ 0x1db
 8003a2c:	4842      	ldr	r0, [pc, #264]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003a2e:	f7fc ff9f 	bl	8000970 <assert_failed>
 8003a32:	e795      	b.n	8003960 <HAL_RCC_OscConfig+0xb4>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a34:	f012 0f03 	tst.w	r2, #3
 8003a38:	d19a      	bne.n	8003970 <HAL_RCC_OscConfig+0xc4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f013 0f04 	tst.w	r3, #4
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_OscConfig+0x1a0>
 8003a44:	68e3      	ldr	r3, [r4, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 82e6 	beq.w	8004018 <HAL_RCC_OscConfig+0x76c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a4c:	4a39      	ldr	r2, [pc, #228]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	f023 0319 	bic.w	r3, r3, #25
 8003a54:	68e1      	ldr	r1, [r4, #12]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a5a:	f7fd f8a9 	bl	8000bb0 <HAL_GetTick>
 8003a5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f013 0f04 	tst.w	r3, #4
 8003a68:	d106      	bne.n	8003a78 <HAL_RCC_OscConfig+0x1cc>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd f8a1 	bl	8000bb0 <HAL_GetTick>
 8003a6e:	1b40      	subs	r0, r0, r5
 8003a70:	2802      	cmp	r0, #2
 8003a72:	d9f5      	bls.n	8003a60 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003a74:	2003      	movs	r0, #3
        }
      }
    }
  }
  return HAL_OK;
}
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4a2e      	ldr	r2, [pc, #184]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003a7a:	6853      	ldr	r3, [r2, #4]
 8003a7c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a80:	6921      	ldr	r1, [r4, #16]
 8003a82:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003a86:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f013 0f10 	tst.w	r3, #16
 8003a8e:	d06a      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003a90:	69e3      	ldr	r3, [r4, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bf18      	it	ne
 8003a96:	2b80      	cmpne	r3, #128	@ 0x80
 8003a98:	d13f      	bne.n	8003b1a <HAL_RCC_OscConfig+0x26e>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003a9a:	6a23      	ldr	r3, [r4, #32]
 8003a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a9e:	d842      	bhi.n	8003b26 <HAL_RCC_OscConfig+0x27a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa0:	4a24      	ldr	r2, [pc, #144]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003aa2:	6913      	ldr	r3, [r2, #16]
 8003aa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003aa8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d04a      	beq.n	8003b44 <HAL_RCC_OscConfig+0x298>
 8003aae:	2b18      	cmp	r3, #24
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_OscConfig+0x290>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ab2:	69e3      	ldr	r3, [r4, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07d      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_CSI_ENABLE();
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ac2:	f7fd f875 	bl	8000bb0 <HAL_GetTick>
 8003ac6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ad0:	d167      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x2f6>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ad2:	f7fd f86d 	bl	8000bb0 <HAL_GetTick>
 8003ad6:	1b40      	subs	r0, r0, r5
 8003ad8:	2802      	cmp	r0, #2
 8003ada:	d9f5      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8003adc:	2003      	movs	r0, #3
 8003ade:	e7ca      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4a14      	ldr	r2, [pc, #80]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003ae2:	6853      	ldr	r3, [r2, #4]
 8003ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ae8:	6921      	ldr	r1, [r4, #16]
 8003aea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003aee:	6053      	str	r3, [r2, #4]
 8003af0:	e7ca      	b.n	8003a88 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_DISABLE();
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003afc:	f7fd f858 	bl	8000bb0 <HAL_GetTick>
 8003b00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <HAL_RCC_OscConfig+0x288>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f013 0f04 	tst.w	r3, #4
 8003b0a:	d0bd      	beq.n	8003a88 <HAL_RCC_OscConfig+0x1dc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7fd f850 	bl	8000bb0 <HAL_GetTick>
 8003b10:	1b40      	subs	r0, r0, r5
 8003b12:	2802      	cmp	r0, #2
 8003b14:	d9f5      	bls.n	8003b02 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8003b16:	2003      	movs	r0, #3
 8003b18:	e7ad      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003b1a:	f240 212b 	movw	r1, #555	@ 0x22b
 8003b1e:	4806      	ldr	r0, [pc, #24]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b20:	f7fc ff26 	bl	8000970 <assert_failed>
 8003b24:	e7b9      	b.n	8003a9a <HAL_RCC_OscConfig+0x1ee>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003b26:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8003b2a:	4803      	ldr	r0, [pc, #12]	@ (8003b38 <HAL_RCC_OscConfig+0x28c>)
 8003b2c:	f7fc ff20 	bl	8000970 <assert_failed>
 8003b30:	e7b6      	b.n	8003aa0 <HAL_RCC_OscConfig+0x1f4>
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
 8003b38:	08009c84 	.word	0x08009c84
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b3c:	f002 0203 	and.w	r2, r2, #3
 8003b40:	2a01      	cmp	r2, #1
 8003b42:	d1b6      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x206>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b44:	4b86      	ldr	r3, [pc, #536]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_OscConfig+0x2aa>
 8003b4e:	69e3      	ldr	r3, [r4, #28]
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	f040 8263 	bne.w	800401c <HAL_RCC_OscConfig+0x770>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b56:	4a82      	ldr	r2, [pc, #520]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003b58:	68d3      	ldr	r3, [r2, #12]
 8003b5a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003b5e:	6a21      	ldr	r1, [r4, #32]
 8003b60:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003b64:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f013 0f08 	tst.w	r3, #8
 8003b6c:	d050      	beq.n	8003c10 <HAL_RCC_OscConfig+0x364>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003b6e:	6963      	ldr	r3, [r4, #20]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d833      	bhi.n	8003bdc <HAL_RCC_OscConfig+0x330>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b74:	6963      	ldr	r3, [r4, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_LSI_ENABLE();
 8003b7a:	4a79      	ldr	r2, [pc, #484]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003b7c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6753      	str	r3, [r2, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003b84:	f7fd f814 	bl	8000bb0 <HAL_GetTick>
 8003b88:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b8a:	4b75      	ldr	r3, [pc, #468]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8e:	f013 0f02 	tst.w	r3, #2
 8003b92:	d13d      	bne.n	8003c10 <HAL_RCC_OscConfig+0x364>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd f80c 	bl	8000bb0 <HAL_GetTick>
 8003b98:	1b40      	subs	r0, r0, r5
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9f5      	bls.n	8003b8a <HAL_RCC_OscConfig+0x2de>
          return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e769      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003ba4:	68d3      	ldr	r3, [r2, #12]
 8003ba6:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003baa:	6a21      	ldr	r1, [r4, #32]
 8003bac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003bb0:	60d3      	str	r3, [r2, #12]
 8003bb2:	e7d8      	b.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_CSI_DISABLE();
 8003bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bbc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003bbe:	f7fc fff7 	bl	8000bb0 <HAL_GetTick>
 8003bc2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bc4:	4b66      	ldr	r3, [pc, #408]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003bcc:	d0cb      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bce:	f7fc ffef 	bl	8000bb0 <HAL_GetTick>
 8003bd2:	1b40      	subs	r0, r0, r5
 8003bd4:	2802      	cmp	r0, #2
 8003bd6:	d9f5      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003bd8:	2003      	movs	r0, #3
 8003bda:	e74c      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003bdc:	f240 216d 	movw	r1, #621	@ 0x26d
 8003be0:	4860      	ldr	r0, [pc, #384]	@ (8003d64 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f7fc fec5 	bl	8000970 <assert_failed>
 8003be6:	e7c5      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_DISABLE();
 8003be8:	4a5d      	ldr	r2, [pc, #372]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003bea:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6753      	str	r3, [r2, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003bf2:	f7fc ffdd 	bl	8000bb0 <HAL_GetTick>
 8003bf6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bf8:	4b59      	ldr	r3, [pc, #356]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfc:	f013 0f02 	tst.w	r3, #2
 8003c00:	d006      	beq.n	8003c10 <HAL_RCC_OscConfig+0x364>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fc ffd5 	bl	8000bb0 <HAL_GetTick>
 8003c06:	1b40      	subs	r0, r0, r5
 8003c08:	2802      	cmp	r0, #2
 8003c0a:	d9f5      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x34c>
          return HAL_TIMEOUT;
 8003c0c:	2003      	movs	r0, #3
 8003c0e:	e732      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f013 0f20 	tst.w	r3, #32
 8003c16:	d032      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003c18:	69a3      	ldr	r3, [r4, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d815      	bhi.n	8003c4a <HAL_RCC_OscConfig+0x39e>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c1e:	69a3      	ldr	r3, [r4, #24]
 8003c20:	b1cb      	cbz	r3, 8003c56 <HAL_RCC_OscConfig+0x3aa>
      __HAL_RCC_HSI48_ENABLE();
 8003c22:	4a4f      	ldr	r2, [pc, #316]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c2a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c2c:	f7fc ffc0 	bl	8000bb0 <HAL_GetTick>
 8003c30:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c32:	4b4b      	ldr	r3, [pc, #300]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003c3a:	d120      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3c:	f7fc ffb8 	bl	8000bb0 <HAL_GetTick>
 8003c40:	1b40      	subs	r0, r0, r5
 8003c42:	2802      	cmp	r0, #2
 8003c44:	d9f5      	bls.n	8003c32 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8003c46:	2003      	movs	r0, #3
 8003c48:	e715      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003c4a:	f44f 7126 	mov.w	r1, #664	@ 0x298
 8003c4e:	4845      	ldr	r0, [pc, #276]	@ (8003d64 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f7fc fe8e 	bl	8000970 <assert_failed>
 8003c54:	e7e3      	b.n	8003c1e <HAL_RCC_OscConfig+0x372>
      __HAL_RCC_HSI48_DISABLE();
 8003c56:	4a42      	ldr	r2, [pc, #264]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c58:	6813      	ldr	r3, [r2, #0]
 8003c5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c60:	f7fc ffa6 	bl	8000bb0 <HAL_GetTick>
 8003c64:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c66:	4b3e      	ldr	r3, [pc, #248]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003c6e:	d006      	beq.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c70:	f7fc ff9e 	bl	8000bb0 <HAL_GetTick>
 8003c74:	1b40      	subs	r0, r0, r5
 8003c76:	2802      	cmp	r0, #2
 8003c78:	d9f5      	bls.n	8003c66 <HAL_RCC_OscConfig+0x3ba>
          return HAL_TIMEOUT;
 8003c7a:	2003      	movs	r0, #3
 8003c7c:	e6fb      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	f013 0f04 	tst.w	r3, #4
 8003c84:	d072      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003c86:	68a3      	ldr	r3, [r4, #8]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	bf18      	it	ne
 8003c8c:	2b01      	cmpne	r3, #1
 8003c8e:	d813      	bhi.n	8003cb8 <HAL_RCC_OscConfig+0x40c>
    PWR->CR1 |= PWR_CR1_DBP;
 8003c90:	4a35      	ldr	r2, [pc, #212]	@ (8003d68 <HAL_RCC_OscConfig+0x4bc>)
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c98:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c9a:	f7fc ff89 	bl	8000bb0 <HAL_GetTick>
 8003c9e:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <HAL_RCC_OscConfig+0x4bc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x418>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fc ff81 	bl	8000bb0 <HAL_GetTick>
 8003cae:	1b40      	subs	r0, r0, r5
 8003cb0:	2864      	cmp	r0, #100	@ 0x64
 8003cb2:	d9f5      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x3f4>
        return HAL_TIMEOUT;
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	e6de      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003cb8:	f240 21c2 	movw	r1, #706	@ 0x2c2
 8003cbc:	4829      	ldr	r0, [pc, #164]	@ (8003d64 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f7fc fe57 	bl	8000970 <assert_failed>
 8003cc2:	e7e5      	b.n	8003c90 <HAL_RCC_OscConfig+0x3e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x434>
 8003cca:	bb0b      	cbnz	r3, 8003d10 <HAL_RCC_OscConfig+0x464>
 8003ccc:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003cce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cd8:	f022 0204 	bic.w	r2, r2, #4
 8003cdc:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cde:	e004      	b.n	8003cea <HAL_RCC_OscConfig+0x43e>
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003ce2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cea:	68a3      	ldr	r3, [r4, #8]
 8003cec:	b333      	cbz	r3, 8003d3c <HAL_RCC_OscConfig+0x490>
      tickstart = HAL_GetTick();
 8003cee:	f7fc ff5f 	bl	8000bb0 <HAL_GetTick>
 8003cf2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf8:	f013 0f02 	tst.w	r3, #2
 8003cfc:	d136      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4c0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfe:	f7fc ff57 	bl	8000bb0 <HAL_GetTick>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d08:	4298      	cmp	r0, r3
 8003d0a:	d9f3      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x448>
          return HAL_TIMEOUT;
 8003d0c:	2003      	movs	r0, #3
 8003d0e:	e6b2      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d009      	beq.n	8003d28 <HAL_RCC_OscConfig+0x47c>
 8003d14:	4b12      	ldr	r3, [pc, #72]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003d16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d26:	e7e0      	b.n	8003cea <HAL_RCC_OscConfig+0x43e>
 8003d28:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003d2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d2c:	f042 0204 	orr.w	r2, r2, #4
 8003d30:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	671a      	str	r2, [r3, #112]	@ 0x70
 8003d3a:	e7d6      	b.n	8003cea <HAL_RCC_OscConfig+0x43e>
      tickstart = HAL_GetTick();
 8003d3c:	f7fc ff38 	bl	8000bb0 <HAL_GetTick>
 8003d40:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d42:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	f013 0f02 	tst.w	r3, #2
 8003d4a:	d00f      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fc ff30 	bl	8000bb0 <HAL_GetTick>
 8003d50:	1b40      	subs	r0, r0, r5
 8003d52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d56:	4298      	cmp	r0, r3
 8003d58:	d9f3      	bls.n	8003d42 <HAL_RCC_OscConfig+0x496>
          return HAL_TIMEOUT;
 8003d5a:	2003      	movs	r0, #3
 8003d5c:	e68b      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
 8003d64:	08009c84 	.word	0x08009c84
 8003d68:	58024800 	.word	0x58024800
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003d6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d84f      	bhi.n	8003e12 <HAL_RCC_OscConfig+0x566>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8159 	beq.w	800402c <HAL_RCC_OscConfig+0x780>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d7a:	4aa9      	ldr	r2, [pc, #676]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003d7c:	6912      	ldr	r2, [r2, #16]
 8003d7e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003d82:	2a18      	cmp	r2, #24
 8003d84:	f000 80f3 	beq.w	8003f6e <HAL_RCC_OscConfig+0x6c2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	f040 80da 	bne.w	8003f42 <HAL_RCC_OscConfig+0x696>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003d8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	bf18      	it	ne
 8003d94:	2b01      	cmpne	r3, #1
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x4f0>
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d140      	bne.n	8003e1e <HAL_RCC_OscConfig+0x572>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8003d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf18      	it	ne
 8003da2:	2b04      	cmpne	r3, #4
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_OscConfig+0x502>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x502>
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d13d      	bne.n	8003e2a <HAL_RCC_OscConfig+0x57e>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8003dae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf18      	it	ne
 8003db4:	2b02      	cmpne	r3, #2
 8003db6:	d13e      	bne.n	8003e36 <HAL_RCC_OscConfig+0x58a>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003db8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dbe:	d840      	bhi.n	8003e42 <HAL_RCC_OscConfig+0x596>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003dc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	f5b3 7ffe 	cmp.w	r3, #508	@ 0x1fc
 8003dc8:	d841      	bhi.n	8003e4e <HAL_RCC_OscConfig+0x5a2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003dca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dd0:	d843      	bhi.n	8003e5a <HAL_RCC_OscConfig+0x5ae>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003dd2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dd8:	d845      	bhi.n	8003e66 <HAL_RCC_OscConfig+0x5ba>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003dda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	2b7f      	cmp	r3, #127	@ 0x7f
 8003de0:	d847      	bhi.n	8003e72 <HAL_RCC_OscConfig+0x5c6>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003de2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de8:	d249      	bcs.n	8003e7e <HAL_RCC_OscConfig+0x5d2>
        __HAL_RCC_PLL_DISABLE();
 8003dea:	4a8d      	ldr	r2, [pc, #564]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003df4:	f7fc fedc 	bl	8000bb0 <HAL_GetTick>
 8003df8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfa:	4b89      	ldr	r3, [pc, #548]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003e02:	d042      	beq.n	8003e8a <HAL_RCC_OscConfig+0x5de>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fc fed4 	bl	8000bb0 <HAL_GetTick>
 8003e08:	1b40      	subs	r0, r0, r5
 8003e0a:	2802      	cmp	r0, #2
 8003e0c:	d9f5      	bls.n	8003dfa <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8003e0e:	2003      	movs	r0, #3
 8003e10:	e631      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003e12:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8003e16:	4883      	ldr	r0, [pc, #524]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e18:	f7fc fdaa 	bl	8000970 <assert_failed>
 8003e1c:	e7a9      	b.n	8003d72 <HAL_RCC_OscConfig+0x4c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003e1e:	f240 21fd 	movw	r1, #765	@ 0x2fd
 8003e22:	4880      	ldr	r0, [pc, #512]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e24:	f7fc fda4 	bl	8000970 <assert_failed>
 8003e28:	e7b8      	b.n	8003d9c <HAL_RCC_OscConfig+0x4f0>
        assert_param(IS_RCC_PLLRGE_VALUE(RCC_OscInitStruct->PLL.PLLRGE));
 8003e2a:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8003e2e:	487d      	ldr	r0, [pc, #500]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e30:	f7fc fd9e 	bl	8000970 <assert_failed>
 8003e34:	e7bb      	b.n	8003dae <HAL_RCC_OscConfig+0x502>
        assert_param(IS_RCC_PLLVCO_VALUE(RCC_OscInitStruct->PLL.PLLVCOSEL));
 8003e36:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8003e3a:	487a      	ldr	r0, [pc, #488]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	f7fc fd98 	bl	8000970 <assert_failed>
 8003e40:	e7ba      	b.n	8003db8 <HAL_RCC_OscConfig+0x50c>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003e42:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003e46:	4877      	ldr	r0, [pc, #476]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e48:	f7fc fd92 	bl	8000970 <assert_failed>
 8003e4c:	e7b8      	b.n	8003dc0 <HAL_RCC_OscConfig+0x514>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003e4e:	f240 3101 	movw	r1, #769	@ 0x301
 8003e52:	4874      	ldr	r0, [pc, #464]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e54:	f7fc fd8c 	bl	8000970 <assert_failed>
 8003e58:	e7b7      	b.n	8003dca <HAL_RCC_OscConfig+0x51e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003e5a:	f240 3102 	movw	r1, #770	@ 0x302
 8003e5e:	4871      	ldr	r0, [pc, #452]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e60:	f7fc fd86 	bl	8000970 <assert_failed>
 8003e64:	e7b5      	b.n	8003dd2 <HAL_RCC_OscConfig+0x526>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003e66:	f240 3103 	movw	r1, #771	@ 0x303
 8003e6a:	486e      	ldr	r0, [pc, #440]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	f7fc fd80 	bl	8000970 <assert_failed>
 8003e70:	e7b3      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003e72:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8003e76:	486b      	ldr	r0, [pc, #428]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e78:	f7fc fd7a 	bl	8000970 <assert_failed>
 8003e7c:	e7b1      	b.n	8003de2 <HAL_RCC_OscConfig+0x536>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003e7e:	f240 3105 	movw	r1, #773	@ 0x305
 8003e82:	4868      	ldr	r0, [pc, #416]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 8003e84:	f7fc fd74 	bl	8000970 <assert_failed>
 8003e88:	e7af      	b.n	8003dea <HAL_RCC_OscConfig+0x53e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8a:	4b65      	ldr	r3, [pc, #404]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003e8c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003e8e:	4a66      	ldr	r2, [pc, #408]	@ (8004028 <HAL_RCC_OscConfig+0x77c>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003e94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003e96:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e9e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ea8:	3901      	subs	r1, #1
 8003eaa:	0249      	lsls	r1, r1, #9
 8003eac:	b289      	uxth	r1, r1
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003eb2:	3901      	subs	r1, #1
 8003eb4:	0409      	lsls	r1, r1, #16
 8003eb6:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003ebe:	3901      	subs	r1, #1
 8003ec0:	0609      	lsls	r1, r1, #24
 8003ec2:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed4:	f36f 02cf 	bfc	r2, #3, #13
 8003ed8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003eda:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003ede:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee2:	f022 020c 	bic.w	r2, r2, #12
 8003ee6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eee:	f022 0202 	bic.w	r2, r2, #2
 8003ef2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003efe:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003f1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f20:	f7fc fe46 	bl	8000bb0 <HAL_GetTick>
 8003f24:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f26:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x692>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fc fe3e 	bl	8000bb0 <HAL_GetTick>
 8003f34:	1b00      	subs	r0, r0, r4
 8003f36:	2802      	cmp	r0, #2
 8003f38:	d9f5      	bls.n	8003f26 <HAL_RCC_OscConfig+0x67a>
            return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	e59b      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  return HAL_OK;
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e599      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4a37      	ldr	r2, [pc, #220]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003f44:	6813      	ldr	r3, [r2, #0]
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f4c:	f7fc fe30 	bl	8000bb0 <HAL_GetTick>
 8003f50:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f52:	4b33      	ldr	r3, [pc, #204]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003f5a:	d006      	beq.n	8003f6a <HAL_RCC_OscConfig+0x6be>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fc fe28 	bl	8000bb0 <HAL_GetTick>
 8003f60:	1b00      	subs	r0, r0, r4
 8003f62:	2802      	cmp	r0, #2
 8003f64:	d9f5      	bls.n	8003f52 <HAL_RCC_OscConfig+0x6a6>
            return HAL_TIMEOUT;
 8003f66:	2003      	movs	r0, #3
 8003f68:	e585      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  return HAL_OK;
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e583      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003f70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f72:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d05b      	beq.n	8004030 <HAL_RCC_OscConfig+0x784>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	f001 0303 	and.w	r3, r1, #3
 8003f7c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d158      	bne.n	8004034 <HAL_RCC_OscConfig+0x788>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f82:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8003f86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d155      	bne.n	8004038 <HAL_RCC_OscConfig+0x78c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f8c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003f90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f92:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d151      	bne.n	800403c <HAL_RCC_OscConfig+0x790>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f98:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003f9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d14d      	bne.n	8004040 <HAL_RCC_OscConfig+0x794>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fa4:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003fa8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003faa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d149      	bne.n	8004044 <HAL_RCC_OscConfig+0x798>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fb0:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003fb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003fb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fb8:	4298      	cmp	r0, r3
 8003fba:	d145      	bne.n	8004048 <HAL_RCC_OscConfig+0x79c>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fbc:	4b18      	ldr	r3, [pc, #96]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fc4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d040      	beq.n	800404c <HAL_RCC_OscConfig+0x7a0>
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8003fca:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003fce:	d219      	bcs.n	8004004 <HAL_RCC_OscConfig+0x758>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fd0:	4a13      	ldr	r2, [pc, #76]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003fd2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003fda:	f7fc fde9 	bl	8000bb0 <HAL_GetTick>
 8003fde:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003fe0:	f7fc fde6 	bl	8000bb0 <HAL_GetTick>
 8003fe4:	42a8      	cmp	r0, r5
 8003fe6:	d0fb      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x734>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8004020 <HAL_RCC_OscConfig+0x774>)
 8003fea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003fec:	f36f 03cf 	bfc	r3, #3, #13
 8003ff0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003ff2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ff6:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ff8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 8004000:	2000      	movs	r0, #0
 8004002:	e538      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8004004:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8004008:	4806      	ldr	r0, [pc, #24]	@ (8004024 <HAL_RCC_OscConfig+0x778>)
 800400a:	f7fc fcb1 	bl	8000970 <assert_failed>
 800400e:	e7df      	b.n	8003fd0 <HAL_RCC_OscConfig+0x724>
    return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
}
 8004012:	4770      	bx	lr
        return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
 8004016:	e52e      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e52c      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        return HAL_ERROR;
 800401c:	2001      	movs	r0, #1
 800401e:	e52a      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004020:	58024400 	.word	0x58024400
 8004024:	08009c84 	.word	0x08009c84
 8004028:	fffffc0c 	.word	0xfffffc0c
  return HAL_OK;
 800402c:	2000      	movs	r0, #0
 800402e:	e522      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
        return HAL_ERROR;
 8004030:	2001      	movs	r0, #1
 8004032:	e520      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004034:	2001      	movs	r0, #1
 8004036:	e51e      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004038:	2001      	movs	r0, #1
 800403a:	e51c      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 800403c:	2001      	movs	r0, #1
 800403e:	e51a      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004040:	2001      	movs	r0, #1
 8004042:	e518      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004044:	2001      	movs	r0, #1
 8004046:	e516      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
 8004048:	2001      	movs	r0, #1
 800404a:	e514      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>
  return HAL_OK;
 800404c:	2000      	movs	r0, #0
 800404e:	e512      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ca>

08004050 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004050:	4b75      	ldr	r3, [pc, #468]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004058:	2b10      	cmp	r3, #16
 800405a:	f000 80de 	beq.w	800421a <HAL_RCC_GetSysClockFreq+0x1ca>
 800405e:	2b18      	cmp	r3, #24
 8004060:	d00f      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x32>
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 80db 	bne.w	800421e <HAL_RCC_GetSysClockFreq+0x1ce>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004068:	4b6f      	ldr	r3, [pc, #444]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f013 0f20 	tst.w	r3, #32
 8004070:	f000 80d7 	beq.w	8004222 <HAL_RCC_GetSysClockFreq+0x1d2>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004074:	4b6c      	ldr	r3, [pc, #432]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800407c:	486b      	ldr	r0, [pc, #428]	@ (800422c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800407e:	40d8      	lsrs	r0, r3
 8004080:	4770      	bx	lr
{
 8004082:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004084:	4b68      	ldr	r3, [pc, #416]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004088:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800408c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800408e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004092:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004094:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 80040aa:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 80040ae:	d077      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x150>
      {
        switch (pllsource)
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	d04a      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0xfa>
 80040b4:	2a02      	cmp	r2, #2
 80040b6:	d076      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x156>
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	f040 8091 	bne.w	80041e0 <HAL_RCC_GetSysClockFreq+0x190>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040be:	4b5a      	ldr	r3, [pc, #360]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f013 0f20 	tst.w	r3, #32
 80040c6:	d023      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0xc0>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c8:	4957      	ldr	r1, [pc, #348]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80040ca:	680a      	ldr	r2, [r1, #0]
 80040cc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80040d0:	4b56      	ldr	r3, [pc, #344]	@ (800422c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80040d2:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	ee07 3a10 	vmov	s14, r3
 80040d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80040dc:	ee07 0a10 	vmov	s14, r0
 80040e0:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80040e4:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80040e8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee06 3a90 	vmov	s13, r3
 80040f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80040f6:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x1e0>
 80040fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800410e:	e038      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x132>
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004110:	ee07 0a10 	vmov	s14, r0
 8004114:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004118:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 8004234 <HAL_RCC_GetSysClockFreq+0x1e4>
 800411c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004120:	4b41      	ldr	r3, [pc, #260]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	ee06 3a90 	vmov	s13, r3
 800412c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004130:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004134:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004148:	e01b      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x132>
            }
            break;

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800414a:	ee07 0a10 	vmov	s14, r0
 800414e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004152:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8004238 <HAL_RCC_GetSysClockFreq+0x1e8>
 8004156:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800415a:	4b33      	ldr	r3, [pc, #204]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee06 3a90 	vmov	s13, r3
 8004166:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800416a:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x1e0>
 800416e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee27 7a27 	vmul.f32	s14, s14, s15

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004182:	4b29      	ldr	r3, [pc, #164]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004186:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800418a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800418c:	ee07 3a90 	vmov	s15, r3
 8004190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004194:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004198:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800419c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80041a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a6:	ee07 0a10 	vmov	s14, r0
 80041aa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80041ae:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 800423c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041b2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80041b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	ee06 3a90 	vmov	s13, r3
 80041c2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80041c6:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x1e0>
 80041ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80041ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041da:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80041de:	e7d0      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x132>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041e0:	ee07 0a10 	vmov	s14, r0
 80041e4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80041e8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004238 <HAL_RCC_GetSysClockFreq+0x1e8>
 80041ec:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80041f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	ee06 3a90 	vmov	s13, r3
 80041fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004200:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8004230 <HAL_RCC_GetSysClockFreq+0x1e0>
 8004204:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004214:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8004218:	e7b3      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x132>
      sysclockfreq = HSE_VALUE;
 800421a:	4809      	ldr	r0, [pc, #36]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800421c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421e:	4809      	ldr	r0, [pc, #36]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004220:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004222:	4802      	ldr	r0, [pc, #8]	@ (800422c <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	03d09000 	.word	0x03d09000
 8004230:	39000000 	.word	0x39000000
 8004234:	4c742400 	.word	0x4c742400
 8004238:	4a742400 	.word	0x4a742400
 800423c:	4bb71b00 	.word	0x4bb71b00
 8004240:	016e3600 	.word	0x016e3600
 8004244:	003d0900 	.word	0x003d0900

08004248 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004248:	2800      	cmp	r0, #0
 800424a:	f000 822a 	beq.w	80046a2 <HAL_RCC_ClockConfig+0x45a>
{
 800424e:	b570      	push	{r4, r5, r6, lr}
 8004250:	460d      	mov	r5, r1
 8004252:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004254:	6803      	ldr	r3, [r0, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	2b3e      	cmp	r3, #62	@ 0x3e
 800425a:	f200 80dd 	bhi.w	8004418 <HAL_RCC_ClockConfig+0x1d0>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800425e:	2d0f      	cmp	r5, #15
 8004260:	f200 80e0 	bhi.w	8004424 <HAL_RCC_ClockConfig+0x1dc>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b9e      	ldr	r3, [pc, #632]	@ (80044e0 <HAL_RCC_ClockConfig+0x298>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	42ab      	cmp	r3, r5
 800426e:	d20b      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x40>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004270:	4a9b      	ldr	r2, [pc, #620]	@ (80044e0 <HAL_RCC_ClockConfig+0x298>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f023 030f 	bic.w	r3, r3, #15
 8004278:	432b      	orrs	r3, r5
 800427a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	42ab      	cmp	r3, r5
 8004284:	f040 820f 	bne.w	80046a6 <HAL_RCC_ClockConfig+0x45e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	f013 0f04 	tst.w	r3, #4
 800428e:	d018      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	4b94      	ldr	r3, [pc, #592]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800429a:	429a      	cmp	r2, r3
 800429c:	d911      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x7a>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800429e:	2a00      	cmp	r2, #0
 80042a0:	bf18      	it	ne
 80042a2:	2a40      	cmpne	r2, #64	@ 0x40
 80042a4:	d006      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
 80042a6:	2a50      	cmp	r2, #80	@ 0x50
 80042a8:	d004      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
 80042aa:	2a60      	cmp	r2, #96	@ 0x60
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
 80042ae:	2a70      	cmp	r2, #112	@ 0x70
 80042b0:	f040 80be 	bne.w	8004430 <HAL_RCC_ClockConfig+0x1e8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042b4:	4a8b      	ldr	r2, [pc, #556]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80042b6:	6993      	ldr	r3, [r2, #24]
 80042b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042bc:	6921      	ldr	r1, [r4, #16]
 80042be:	430b      	orrs	r3, r1
 80042c0:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	f013 0f08 	tst.w	r3, #8
 80042c8:	d018      	beq.n	80042fc <HAL_RCC_ClockConfig+0xb4>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042ca:	6962      	ldr	r2, [r4, #20]
 80042cc:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d911      	bls.n	80042fc <HAL_RCC_ClockConfig+0xb4>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80042d8:	2a00      	cmp	r2, #0
 80042da:	bf18      	it	ne
 80042dc:	2a40      	cmpne	r2, #64	@ 0x40
 80042de:	d006      	beq.n	80042ee <HAL_RCC_ClockConfig+0xa6>
 80042e0:	2a50      	cmp	r2, #80	@ 0x50
 80042e2:	d004      	beq.n	80042ee <HAL_RCC_ClockConfig+0xa6>
 80042e4:	2a60      	cmp	r2, #96	@ 0x60
 80042e6:	d002      	beq.n	80042ee <HAL_RCC_ClockConfig+0xa6>
 80042e8:	2a70      	cmp	r2, #112	@ 0x70
 80042ea:	f040 80a7 	bne.w	800443c <HAL_RCC_ClockConfig+0x1f4>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ee:	4a7d      	ldr	r2, [pc, #500]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80042f0:	69d3      	ldr	r3, [r2, #28]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	6961      	ldr	r1, [r4, #20]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	f013 0f10 	tst.w	r3, #16
 8004302:	d01c      	beq.n	800433e <HAL_RCC_ClockConfig+0xf6>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004304:	69a2      	ldr	r2, [r4, #24]
 8004306:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800430e:	429a      	cmp	r2, r3
 8004310:	d915      	bls.n	800433e <HAL_RCC_ClockConfig+0xf6>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004312:	2a00      	cmp	r2, #0
 8004314:	bf18      	it	ne
 8004316:	f5b2 6f80 	cmpne.w	r2, #1024	@ 0x400
 800431a:	d009      	beq.n	8004330 <HAL_RCC_ClockConfig+0xe8>
 800431c:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8004320:	d006      	beq.n	8004330 <HAL_RCC_ClockConfig+0xe8>
 8004322:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 8004326:	d003      	beq.n	8004330 <HAL_RCC_ClockConfig+0xe8>
 8004328:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800432c:	f040 808c 	bne.w	8004448 <HAL_RCC_ClockConfig+0x200>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004330:	4a6c      	ldr	r2, [pc, #432]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 8004332:	69d3      	ldr	r3, [r2, #28]
 8004334:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004338:	69a1      	ldr	r1, [r4, #24]
 800433a:	430b      	orrs	r3, r1
 800433c:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f013 0f20 	tst.w	r3, #32
 8004344:	d017      	beq.n	8004376 <HAL_RCC_ClockConfig+0x12e>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004346:	69e2      	ldr	r2, [r4, #28]
 8004348:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004350:	429a      	cmp	r2, r3
 8004352:	d910      	bls.n	8004376 <HAL_RCC_ClockConfig+0x12e>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004354:	2a00      	cmp	r2, #0
 8004356:	bf18      	it	ne
 8004358:	2a40      	cmpne	r2, #64	@ 0x40
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
 800435c:	2a50      	cmp	r2, #80	@ 0x50
 800435e:	d003      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
 8004360:	2a60      	cmp	r2, #96	@ 0x60
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
 8004364:	2a70      	cmp	r2, #112	@ 0x70
 8004366:	d175      	bne.n	8004454 <HAL_RCC_ClockConfig+0x20c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004368:	4a5e      	ldr	r2, [pc, #376]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 800436a:	6a13      	ldr	r3, [r2, #32]
 800436c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004370:	69e1      	ldr	r1, [r4, #28]
 8004372:	430b      	orrs	r3, r1
 8004374:	6213      	str	r3, [r2, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	f013 0f02 	tst.w	r3, #2
 800437c:	d014      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x160>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800437e:	68e2      	ldr	r2, [r4, #12]
 8004380:	4b58      	ldr	r3, [pc, #352]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	429a      	cmp	r2, r3
 800438a:	d90d      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x160>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800438c:	2a00      	cmp	r2, #0
 800438e:	bf18      	it	ne
 8004390:	2a08      	cmpne	r2, #8
 8004392:	d002      	beq.n	800439a <HAL_RCC_ClockConfig+0x152>
 8004394:	3a09      	subs	r2, #9
 8004396:	2a06      	cmp	r2, #6
 8004398:	d862      	bhi.n	8004460 <HAL_RCC_ClockConfig+0x218>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439a:	4a52      	ldr	r2, [pc, #328]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 800439c:	6993      	ldr	r3, [r2, #24]
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	68e1      	ldr	r1, [r4, #12]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f013 0f01 	tst.w	r3, #1
 80043ae:	f000 809d 	beq.w	80044ec <HAL_RCC_ClockConfig+0x2a4>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 80043b2:	68a3      	ldr	r3, [r4, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf18      	it	ne
 80043b8:	f5b3 6f00 	cmpne.w	r3, #2048	@ 0x800
 80043bc:	d014      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043be:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 80043c2:	d011      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043c4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80043c8:	d00e      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043ca:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80043ce:	d00b      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d4:	d008      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043d6:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043dc:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80043e0:	d002      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043e6:	d141      	bne.n	800446c <HAL_RCC_ClockConfig+0x224>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80043e8:	6863      	ldr	r3, [r4, #4]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d844      	bhi.n	8004478 <HAL_RCC_ClockConfig+0x230>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ee:	4a3d      	ldr	r2, [pc, #244]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80043f0:	6993      	ldr	r3, [r2, #24]
 80043f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043f6:	68a1      	ldr	r1, [r4, #8]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	6863      	ldr	r3, [r4, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x23c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004402:	2b03      	cmp	r3, #3
 8004404:	d05d      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x27a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004406:	2b01      	cmp	r3, #1
 8004408:	d062      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x288>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440a:	4a36      	ldr	r2, [pc, #216]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	f012 0f04 	tst.w	r2, #4
 8004412:	d13c      	bne.n	800448e <HAL_RCC_ClockConfig+0x246>
        return HAL_ERROR;
 8004414:	2001      	movs	r0, #1
 8004416:	e125      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004418:	f240 31a7 	movw	r1, #935	@ 0x3a7
 800441c:	4832      	ldr	r0, [pc, #200]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 800441e:	f7fc faa7 	bl	8000970 <assert_failed>
 8004422:	e71c      	b.n	800425e <HAL_RCC_ClockConfig+0x16>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004424:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
 8004428:	482f      	ldr	r0, [pc, #188]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 800442a:	f7fc faa1 	bl	8000970 <assert_failed>
 800442e:	e719      	b.n	8004264 <HAL_RCC_ClockConfig+0x1c>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004430:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
 8004434:	482c      	ldr	r0, [pc, #176]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 8004436:	f7fc fa9b 	bl	8000970 <assert_failed>
 800443a:	e73b      	b.n	80042b4 <HAL_RCC_ClockConfig+0x6c>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800443c:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8004440:	4829      	ldr	r0, [pc, #164]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 8004442:	f7fc fa95 	bl	8000970 <assert_failed>
 8004446:	e752      	b.n	80042ee <HAL_RCC_ClockConfig+0xa6>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004448:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800444c:	4826      	ldr	r0, [pc, #152]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 800444e:	f7fc fa8f 	bl	8000970 <assert_failed>
 8004452:	e76d      	b.n	8004330 <HAL_RCC_ClockConfig+0xe8>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004454:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8004458:	4823      	ldr	r0, [pc, #140]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 800445a:	f7fc fa89 	bl	8000970 <assert_failed>
 800445e:	e783      	b.n	8004368 <HAL_RCC_ClockConfig+0x120>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004460:	f240 410c 	movw	r1, #1036	@ 0x40c
 8004464:	4820      	ldr	r0, [pc, #128]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 8004466:	f7fc fa83 	bl	8000970 <assert_failed>
 800446a:	e796      	b.n	800439a <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800446c:	f240 411c 	movw	r1, #1052	@ 0x41c
 8004470:	481d      	ldr	r0, [pc, #116]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 8004472:	f7fc fa7d 	bl	8000970 <assert_failed>
 8004476:	e7b7      	b.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004478:	f240 411d 	movw	r1, #1053	@ 0x41d
 800447c:	481a      	ldr	r0, [pc, #104]	@ (80044e8 <HAL_RCC_ClockConfig+0x2a0>)
 800447e:	f7fc fa77 	bl	8000970 <assert_failed>
 8004482:	e7b4      	b.n	80043ee <HAL_RCC_ClockConfig+0x1a6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800448a:	f000 810e 	beq.w	80046aa <HAL_RCC_ClockConfig+0x462>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4915      	ldr	r1, [pc, #84]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 8004490:	690a      	ldr	r2, [r1, #16]
 8004492:	f022 0207 	bic.w	r2, r2, #7
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 800449a:	f7fc fb89 	bl	8000bb0 <HAL_GetTick>
 800449e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044a8:	6862      	ldr	r2, [r4, #4]
 80044aa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80044ae:	d01d      	beq.n	80044ec <HAL_RCC_ClockConfig+0x2a4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fc fb7e 	bl	8000bb0 <HAL_GetTick>
 80044b4:	1b80      	subs	r0, r0, r6
 80044b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044ba:	4298      	cmp	r0, r3
 80044bc:	d9f0      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x258>
        return HAL_TIMEOUT;
 80044be:	2003      	movs	r0, #3
 80044c0:	e0d0      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80044ca:	d1e0      	bne.n	800448e <HAL_RCC_ClockConfig+0x246>
        return HAL_ERROR;
 80044cc:	2001      	movs	r0, #1
 80044ce:	e0c9      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044d0:	4a04      	ldr	r2, [pc, #16]	@ (80044e4 <HAL_RCC_ClockConfig+0x29c>)
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80044d8:	d1d9      	bne.n	800448e <HAL_RCC_ClockConfig+0x246>
        return HAL_ERROR;
 80044da:	2001      	movs	r0, #1
 80044dc:	e0c2      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
 80044de:	bf00      	nop
 80044e0:	52002000 	.word	0x52002000
 80044e4:	58024400 	.word	0x58024400
 80044e8:	08009c84 	.word	0x08009c84
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f013 0f02 	tst.w	r3, #2
 80044f2:	d015      	beq.n	8004520 <HAL_RCC_ClockConfig+0x2d8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044f4:	68e2      	ldr	r2, [r4, #12]
 80044f6:	4b6f      	ldr	r3, [pc, #444]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	429a      	cmp	r2, r3
 8004500:	d20e      	bcs.n	8004520 <HAL_RCC_ClockConfig+0x2d8>
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004502:	2a00      	cmp	r2, #0
 8004504:	bf18      	it	ne
 8004506:	2a08      	cmpne	r2, #8
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0x2ca>
 800450a:	3a09      	subs	r2, #9
 800450c:	2a06      	cmp	r2, #6
 800450e:	f200 80aa 	bhi.w	8004666 <HAL_RCC_ClockConfig+0x41e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004512:	4a68      	ldr	r2, [pc, #416]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004514:	6993      	ldr	r3, [r2, #24]
 8004516:	f023 030f 	bic.w	r3, r3, #15
 800451a:	68e1      	ldr	r1, [r4, #12]
 800451c:	430b      	orrs	r3, r1
 800451e:	6193      	str	r3, [r2, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b65      	ldr	r3, [pc, #404]	@ (80046b8 <HAL_RCC_ClockConfig+0x470>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	42ab      	cmp	r3, r5
 800452a:	d90b      	bls.n	8004544 <HAL_RCC_ClockConfig+0x2fc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452c:	4a62      	ldr	r2, [pc, #392]	@ (80046b8 <HAL_RCC_ClockConfig+0x470>)
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	432b      	orrs	r3, r5
 8004536:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	42ab      	cmp	r3, r5
 8004540:	f040 80b5 	bne.w	80046ae <HAL_RCC_ClockConfig+0x466>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f013 0f04 	tst.w	r3, #4
 800454a:	d018      	beq.n	800457e <HAL_RCC_ClockConfig+0x336>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	4b59      	ldr	r3, [pc, #356]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004556:	429a      	cmp	r2, r3
 8004558:	d211      	bcs.n	800457e <HAL_RCC_ClockConfig+0x336>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 800455a:	2a00      	cmp	r2, #0
 800455c:	bf18      	it	ne
 800455e:	2a40      	cmpne	r2, #64	@ 0x40
 8004560:	d006      	beq.n	8004570 <HAL_RCC_ClockConfig+0x328>
 8004562:	2a50      	cmp	r2, #80	@ 0x50
 8004564:	d004      	beq.n	8004570 <HAL_RCC_ClockConfig+0x328>
 8004566:	2a60      	cmp	r2, #96	@ 0x60
 8004568:	d002      	beq.n	8004570 <HAL_RCC_ClockConfig+0x328>
 800456a:	2a70      	cmp	r2, #112	@ 0x70
 800456c:	f040 8081 	bne.w	8004672 <HAL_RCC_ClockConfig+0x42a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004570:	4a50      	ldr	r2, [pc, #320]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004572:	6993      	ldr	r3, [r2, #24]
 8004574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	430b      	orrs	r3, r1
 800457c:	6193      	str	r3, [r2, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f013 0f08 	tst.w	r3, #8
 8004584:	d017      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x36e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004586:	6962      	ldr	r2, [r4, #20]
 8004588:	4b4a      	ldr	r3, [pc, #296]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004590:	429a      	cmp	r2, r3
 8004592:	d210      	bcs.n	80045b6 <HAL_RCC_ClockConfig+0x36e>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004594:	2a00      	cmp	r2, #0
 8004596:	bf18      	it	ne
 8004598:	2a40      	cmpne	r2, #64	@ 0x40
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x360>
 800459c:	2a50      	cmp	r2, #80	@ 0x50
 800459e:	d003      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x360>
 80045a0:	2a60      	cmp	r2, #96	@ 0x60
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x360>
 80045a4:	2a70      	cmp	r2, #112	@ 0x70
 80045a6:	d16a      	bne.n	800467e <HAL_RCC_ClockConfig+0x436>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045a8:	4a42      	ldr	r2, [pc, #264]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 80045aa:	69d3      	ldr	r3, [r2, #28]
 80045ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b0:	6961      	ldr	r1, [r4, #20]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	f013 0f10 	tst.w	r3, #16
 80045bc:	d01b      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x3ae>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045be:	69a2      	ldr	r2, [r4, #24]
 80045c0:	4b3c      	ldr	r3, [pc, #240]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d214      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x3ae>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	bf18      	it	ne
 80045d0:	f5b2 6f80 	cmpne.w	r2, #1024	@ 0x400
 80045d4:	d008      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x3a0>
 80045d6:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x3a0>
 80045dc:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
 80045e0:	d002      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x3a0>
 80045e2:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80045e6:	d150      	bne.n	800468a <HAL_RCC_ClockConfig+0x442>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e8:	4a32      	ldr	r2, [pc, #200]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 80045ea:	69d3      	ldr	r3, [r2, #28]
 80045ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045f0:	69a1      	ldr	r1, [r4, #24]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	61d3      	str	r3, [r2, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f013 0f20 	tst.w	r3, #32
 80045fc:	d017      	beq.n	800462e <HAL_RCC_ClockConfig+0x3e6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045fe:	69e2      	ldr	r2, [r4, #28]
 8004600:	4b2c      	ldr	r3, [pc, #176]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004608:	429a      	cmp	r2, r3
 800460a:	d210      	bcs.n	800462e <HAL_RCC_ClockConfig+0x3e6>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 800460c:	2a00      	cmp	r2, #0
 800460e:	bf18      	it	ne
 8004610:	2a40      	cmpne	r2, #64	@ 0x40
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3d8>
 8004614:	2a50      	cmp	r2, #80	@ 0x50
 8004616:	d003      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3d8>
 8004618:	2a60      	cmp	r2, #96	@ 0x60
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3d8>
 800461c:	2a70      	cmp	r2, #112	@ 0x70
 800461e:	d13a      	bne.n	8004696 <HAL_RCC_ClockConfig+0x44e>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004620:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004622:	6a13      	ldr	r3, [r2, #32]
 8004624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004628:	69e1      	ldr	r1, [r4, #28]
 800462a:	430b      	orrs	r3, r1
 800462c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800462e:	f7ff fd0f 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8004632:	4920      	ldr	r1, [pc, #128]	@ (80046b4 <HAL_RCC_ClockConfig+0x46c>)
 8004634:	698b      	ldr	r3, [r1, #24]
 8004636:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800463a:	4a20      	ldr	r2, [pc, #128]	@ (80046bc <HAL_RCC_ClockConfig+0x474>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004644:	698b      	ldr	r3, [r1, #24]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	5cd3      	ldrb	r3, [r2, r3]
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	fa20 f303 	lsr.w	r3, r0, r3
 8004654:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_RCC_ClockConfig+0x478>)
 8004656:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <HAL_RCC_ClockConfig+0x47c>)
 800465a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HAL_RCC_ClockConfig+0x480>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	f7fc fa44 	bl	8000aec <HAL_InitTick>
}
 8004664:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004666:	f240 415e 	movw	r1, #1118	@ 0x45e
 800466a:	4818      	ldr	r0, [pc, #96]	@ (80046cc <HAL_RCC_ClockConfig+0x484>)
 800466c:	f7fc f980 	bl	8000970 <assert_failed>
 8004670:	e74f      	b.n	8004512 <HAL_RCC_ClockConfig+0x2ca>
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004672:	f240 417f 	movw	r1, #1151	@ 0x47f
 8004676:	4815      	ldr	r0, [pc, #84]	@ (80046cc <HAL_RCC_ClockConfig+0x484>)
 8004678:	f7fc f97a 	bl	8000970 <assert_failed>
 800467c:	e778      	b.n	8004570 <HAL_RCC_ClockConfig+0x328>
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 800467e:	f240 4191 	movw	r1, #1169	@ 0x491
 8004682:	4812      	ldr	r0, [pc, #72]	@ (80046cc <HAL_RCC_ClockConfig+0x484>)
 8004684:	f7fc f974 	bl	8000970 <assert_failed>
 8004688:	e78e      	b.n	80045a8 <HAL_RCC_ClockConfig+0x360>
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 800468a:	f240 41a3 	movw	r1, #1187	@ 0x4a3
 800468e:	480f      	ldr	r0, [pc, #60]	@ (80046cc <HAL_RCC_ClockConfig+0x484>)
 8004690:	f7fc f96e 	bl	8000970 <assert_failed>
 8004694:	e7a8      	b.n	80045e8 <HAL_RCC_ClockConfig+0x3a0>
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004696:	f240 41b5 	movw	r1, #1205	@ 0x4b5
 800469a:	480c      	ldr	r0, [pc, #48]	@ (80046cc <HAL_RCC_ClockConfig+0x484>)
 800469c:	f7fc f968 	bl	8000970 <assert_failed>
 80046a0:	e7be      	b.n	8004620 <HAL_RCC_ClockConfig+0x3d8>
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
}
 80046a4:	4770      	bx	lr
      return HAL_ERROR;
 80046a6:	2001      	movs	r0, #1
 80046a8:	e7dc      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
        return HAL_ERROR;
 80046aa:	2001      	movs	r0, #1
 80046ac:	e7da      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
      return HAL_ERROR;
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7d8      	b.n	8004664 <HAL_RCC_ClockConfig+0x41c>
 80046b2:	bf00      	nop
 80046b4:	58024400 	.word	0x58024400
 80046b8:	52002000 	.word	0x52002000
 80046bc:	08009de4 	.word	0x08009de4
 80046c0:	20000008 	.word	0x20000008
 80046c4:	2000000c 	.word	0x2000000c
 80046c8:	20000004 	.word	0x20000004
 80046cc:	08009c84 	.word	0x08009c84

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046d2:	f7ff fcbd 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 80046d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <HAL_RCC_GetHCLKFreq+0x34>)
 80046d8:	6993      	ldr	r3, [r2, #24]
 80046da:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80046de:	490a      	ldr	r1, [pc, #40]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x38>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ea:	6992      	ldr	r2, [r2, #24]
 80046ec:	f002 020f 	and.w	r2, r2, #15
 80046f0:	5c88      	ldrb	r0, [r1, r2]
 80046f2:	f000 001f 	and.w	r0, r0, #31
 80046f6:	fa23 f000 	lsr.w	r0, r3, r0
 80046fa:	4a04      	ldr	r2, [pc, #16]	@ (800470c <HAL_RCC_GetHCLKFreq+0x3c>)
 80046fc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046fe:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x40>)
 8004700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004702:	bd08      	pop	{r3, pc}
 8004704:	58024400 	.word	0x58024400
 8004708:	08009de4 	.word	0x08009de4
 800470c:	20000008 	.word	0x20000008
 8004710:	2000000c 	.word	0x2000000c

08004714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004714:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004716:	f7ff ffdb 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004722:	4a04      	ldr	r2, [pc, #16]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004724:	5cd3      	ldrb	r3, [r2, r3]
 8004726:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800472a:	40d8      	lsrs	r0, r3
 800472c:	bd08      	pop	{r3, pc}
 800472e:	bf00      	nop
 8004730:	58024400 	.word	0x58024400
 8004734:	08009de4 	.word	0x08009de4

08004738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	4604      	mov	r4, r0
 800473c:	460e      	mov	r6, r1

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 800473e:	6803      	ldr	r3, [r0, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	2b3e      	cmp	r3, #62	@ 0x3e
 8004744:	d83d      	bhi.n	80047c2 <RCCEx_PLL2_Config+0x8a>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8004746:	6863      	ldr	r3, [r4, #4]
 8004748:	3b04      	subs	r3, #4
 800474a:	f5b3 7ffe 	cmp.w	r3, #508	@ 0x1fc
 800474e:	d83e      	bhi.n	80047ce <RCCEx_PLL2_Config+0x96>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	2b7f      	cmp	r3, #127	@ 0x7f
 8004756:	d840      	bhi.n	80047da <RCCEx_PLL2_Config+0xa2>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	3b01      	subs	r3, #1
 800475c:	2b7f      	cmp	r3, #127	@ 0x7f
 800475e:	d842      	bhi.n	80047e6 <RCCEx_PLL2_Config+0xae>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8004760:	68e3      	ldr	r3, [r4, #12]
 8004762:	3b01      	subs	r3, #1
 8004764:	2b7f      	cmp	r3, #127	@ 0x7f
 8004766:	d844      	bhi.n	80047f2 <RCCEx_PLL2_Config+0xba>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf18      	it	ne
 800476e:	2b40      	cmpne	r3, #64	@ 0x40
 8004770:	d003      	beq.n	800477a <RCCEx_PLL2_Config+0x42>
 8004772:	2b80      	cmp	r3, #128	@ 0x80
 8004774:	d001      	beq.n	800477a <RCCEx_PLL2_Config+0x42>
 8004776:	2bc0      	cmp	r3, #192	@ 0xc0
 8004778:	d141      	bne.n	80047fe <RCCEx_PLL2_Config+0xc6>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800477a:	69a3      	ldr	r3, [r4, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf18      	it	ne
 8004780:	2b20      	cmpne	r3, #32
 8004782:	d142      	bne.n	800480a <RCCEx_PLL2_Config+0xd2>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8004784:	69e3      	ldr	r3, [r4, #28]
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800478a:	d244      	bcs.n	8004816 <RCCEx_PLL2_Config+0xde>

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800478c:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	f000 80a7 	beq.w	80048e8 <RCCEx_PLL2_Config+0x1b0>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800479a:	4a54      	ldr	r2, [pc, #336]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 800479c:	6813      	ldr	r3, [r2, #0]
 800479e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fc fa04 	bl	8000bb0 <HAL_GetTick>
 80047a8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047aa:	4b50      	ldr	r3, [pc, #320]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80047b2:	d036      	beq.n	8004822 <RCCEx_PLL2_Config+0xea>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b4:	f7fc f9fc 	bl	8000bb0 <HAL_GetTick>
 80047b8:	1b43      	subs	r3, r0, r5
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d9f5      	bls.n	80047aa <RCCEx_PLL2_Config+0x72>
      {
        return HAL_TIMEOUT;
 80047be:	2003      	movs	r0, #3
 80047c0:	e093      	b.n	80048ea <RCCEx_PLL2_Config+0x1b2>
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80047c2:	f640 6172 	movw	r1, #3698	@ 0xe72
 80047c6:	484a      	ldr	r0, [pc, #296]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 80047c8:	f7fc f8d2 	bl	8000970 <assert_failed>
 80047cc:	e7bb      	b.n	8004746 <RCCEx_PLL2_Config+0xe>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 80047ce:	f640 6173 	movw	r1, #3699	@ 0xe73
 80047d2:	4847      	ldr	r0, [pc, #284]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 80047d4:	f7fc f8cc 	bl	8000970 <assert_failed>
 80047d8:	e7ba      	b.n	8004750 <RCCEx_PLL2_Config+0x18>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 80047da:	f640 6174 	movw	r1, #3700	@ 0xe74
 80047de:	4844      	ldr	r0, [pc, #272]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 80047e0:	f7fc f8c6 	bl	8000970 <assert_failed>
 80047e4:	e7b8      	b.n	8004758 <RCCEx_PLL2_Config+0x20>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80047e6:	f640 6175 	movw	r1, #3701	@ 0xe75
 80047ea:	4841      	ldr	r0, [pc, #260]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 80047ec:	f7fc f8c0 	bl	8000970 <assert_failed>
 80047f0:	e7b6      	b.n	8004760 <RCCEx_PLL2_Config+0x28>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 80047f2:	f640 6176 	movw	r1, #3702	@ 0xe76
 80047f6:	483e      	ldr	r0, [pc, #248]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 80047f8:	f7fc f8ba 	bl	8000970 <assert_failed>
 80047fc:	e7b4      	b.n	8004768 <RCCEx_PLL2_Config+0x30>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 80047fe:	f640 6177 	movw	r1, #3703	@ 0xe77
 8004802:	483b      	ldr	r0, [pc, #236]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 8004804:	f7fc f8b4 	bl	8000970 <assert_failed>
 8004808:	e7b7      	b.n	800477a <RCCEx_PLL2_Config+0x42>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800480a:	f640 6178 	movw	r1, #3704	@ 0xe78
 800480e:	4838      	ldr	r0, [pc, #224]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 8004810:	f7fc f8ae 	bl	8000970 <assert_failed>
 8004814:	e7b6      	b.n	8004784 <RCCEx_PLL2_Config+0x4c>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8004816:	f640 6179 	movw	r1, #3705	@ 0xe79
 800481a:	4835      	ldr	r0, [pc, #212]	@ (80048f0 <RCCEx_PLL2_Config+0x1b8>)
 800481c:	f7fc f8a8 	bl	8000970 <assert_failed>
 8004820:	e7b4      	b.n	800478c <RCCEx_PLL2_Config+0x54>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004822:	4b32      	ldr	r3, [pc, #200]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 8004824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004826:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 800482a:	6821      	ldr	r1, [r4, #0]
 800482c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	3a01      	subs	r2, #1
 8004836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483a:	68a1      	ldr	r1, [r4, #8]
 800483c:	3901      	subs	r1, #1
 800483e:	0249      	lsls	r1, r1, #9
 8004840:	b289      	uxth	r1, r1
 8004842:	430a      	orrs	r2, r1
 8004844:	68e1      	ldr	r1, [r4, #12]
 8004846:	3901      	subs	r1, #1
 8004848:	0409      	lsls	r1, r1, #16
 800484a:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800484e:	430a      	orrs	r2, r1
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	3901      	subs	r1, #1
 8004854:	0609      	lsls	r1, r1, #24
 8004856:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800485a:	430a      	orrs	r2, r1
 800485c:	639a      	str	r2, [r3, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800485e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004860:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004864:	6961      	ldr	r1, [r4, #20]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800486a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486c:	f022 0220 	bic.w	r2, r2, #32
 8004870:	69a1      	ldr	r1, [r4, #24]
 8004872:	430a      	orrs	r2, r1
 8004874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	f022 0210 	bic.w	r2, r2, #16
 800487c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800487e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004880:	f36f 02cf 	bfc	r2, #3, #13
 8004884:	69e1      	ldr	r1, [r4, #28]
 8004886:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800488a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	f042 0210 	orr.w	r2, r2, #16
 8004892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004894:	b9c6      	cbnz	r6, 80048c8 <RCCEx_PLL2_Config+0x190>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004896:	461a      	mov	r2, r3
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800489e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048a0:	4a12      	ldr	r2, [pc, #72]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048aa:	f7fc f981 	bl	8000bb0 <HAL_GetTick>
 80048ae:	4604      	mov	r4, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b0:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80048b8:	d114      	bne.n	80048e4 <RCCEx_PLL2_Config+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048ba:	f7fc f979 	bl	8000bb0 <HAL_GetTick>
 80048be:	1b00      	subs	r0, r0, r4
 80048c0:	2802      	cmp	r0, #2
 80048c2:	d9f5      	bls.n	80048b0 <RCCEx_PLL2_Config+0x178>
      {
        return HAL_TIMEOUT;
 80048c4:	2003      	movs	r0, #3
 80048c6:	e010      	b.n	80048ea <RCCEx_PLL2_Config+0x1b2>
    else if (Divider == DIVIDER_Q_UPDATE)
 80048c8:	2e01      	cmp	r6, #1
 80048ca:	d005      	beq.n	80048d8 <RCCEx_PLL2_Config+0x1a0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048cc:	4a07      	ldr	r2, [pc, #28]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 80048ce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80048d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048d6:	e7e3      	b.n	80048a0 <RCCEx_PLL2_Config+0x168>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <RCCEx_PLL2_Config+0x1b4>)
 80048da:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80048dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048e2:	e7dd      	b.n	80048a0 <RCCEx_PLL2_Config+0x168>
    }

  }


  return status;
 80048e4:	2000      	movs	r0, #0
 80048e6:	e000      	b.n	80048ea <RCCEx_PLL2_Config+0x1b2>
    return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
}
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	58024400 	.word	0x58024400
 80048f0:	08009cbc 	.word	0x08009cbc

080048f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	4604      	mov	r4, r0
 80048f8:	460e      	mov	r6, r1
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 80048fa:	6803      	ldr	r3, [r0, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004900:	d841      	bhi.n	8004986 <RCCEx_PLL3_Config+0x92>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	3b04      	subs	r3, #4
 8004906:	f5b3 7ffe 	cmp.w	r3, #508	@ 0x1fc
 800490a:	d842      	bhi.n	8004992 <RCCEx_PLL3_Config+0x9e>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	2b7f      	cmp	r3, #127	@ 0x7f
 8004912:	d844      	bhi.n	800499e <RCCEx_PLL3_Config+0xaa>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	3b01      	subs	r3, #1
 8004918:	2b7f      	cmp	r3, #127	@ 0x7f
 800491a:	d846      	bhi.n	80049aa <RCCEx_PLL3_Config+0xb6>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 800491c:	68e3      	ldr	r3, [r4, #12]
 800491e:	3b01      	subs	r3, #1
 8004920:	2b7f      	cmp	r3, #127	@ 0x7f
 8004922:	d848      	bhi.n	80049b6 <RCCEx_PLL3_Config+0xc2>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8004924:	6963      	ldr	r3, [r4, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf18      	it	ne
 800492a:	f5b3 6f80 	cmpne.w	r3, #1024	@ 0x400
 800492e:	d005      	beq.n	800493c <RCCEx_PLL3_Config+0x48>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004934:	d002      	beq.n	800493c <RCCEx_PLL3_Config+0x48>
 8004936:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800493a:	d142      	bne.n	80049c2 <RCCEx_PLL3_Config+0xce>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 800493c:	69a3      	ldr	r3, [r4, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf18      	it	ne
 8004942:	f5b3 7f00 	cmpne.w	r3, #512	@ 0x200
 8004946:	d142      	bne.n	80049ce <RCCEx_PLL3_Config+0xda>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8004948:	69e3      	ldr	r3, [r4, #28]
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494e:	d244      	bcs.n	80049da <RCCEx_PLL3_Config+0xe6>

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004950:	4b57      	ldr	r3, [pc, #348]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b03      	cmp	r3, #3
 800495a:	f000 80a7 	beq.w	8004aac <RCCEx_PLL3_Config+0x1b8>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800495e:	4a54      	ldr	r2, [pc, #336]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fc f922 	bl	8000bb0 <HAL_GetTick>
 800496c:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800496e:	4b50      	ldr	r3, [pc, #320]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8004976:	d036      	beq.n	80049e6 <RCCEx_PLL3_Config+0xf2>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004978:	f7fc f91a 	bl	8000bb0 <HAL_GetTick>
 800497c:	1b43      	subs	r3, r0, r5
 800497e:	2b02      	cmp	r3, #2
 8004980:	d9f5      	bls.n	800496e <RCCEx_PLL3_Config+0x7a>
      {
        return HAL_TIMEOUT;
 8004982:	2003      	movs	r0, #3
 8004984:	e093      	b.n	8004aae <RCCEx_PLL3_Config+0x1ba>
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8004986:	f640 61da 	movw	r1, #3802	@ 0xeda
 800498a:	484a      	ldr	r0, [pc, #296]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 800498c:	f7fb fff0 	bl	8000970 <assert_failed>
 8004990:	e7b7      	b.n	8004902 <RCCEx_PLL3_Config+0xe>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004992:	f640 61db 	movw	r1, #3803	@ 0xedb
 8004996:	4847      	ldr	r0, [pc, #284]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 8004998:	f7fb ffea 	bl	8000970 <assert_failed>
 800499c:	e7b6      	b.n	800490c <RCCEx_PLL3_Config+0x18>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 800499e:	f640 61dc 	movw	r1, #3804	@ 0xedc
 80049a2:	4844      	ldr	r0, [pc, #272]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049a4:	f7fb ffe4 	bl	8000970 <assert_failed>
 80049a8:	e7b4      	b.n	8004914 <RCCEx_PLL3_Config+0x20>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 80049aa:	f640 61dd 	movw	r1, #3805	@ 0xedd
 80049ae:	4841      	ldr	r0, [pc, #260]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049b0:	f7fb ffde 	bl	8000970 <assert_failed>
 80049b4:	e7b2      	b.n	800491c <RCCEx_PLL3_Config+0x28>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 80049b6:	f640 61de 	movw	r1, #3806	@ 0xede
 80049ba:	483e      	ldr	r0, [pc, #248]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049bc:	f7fb ffd8 	bl	8000970 <assert_failed>
 80049c0:	e7b0      	b.n	8004924 <RCCEx_PLL3_Config+0x30>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 80049c2:	f640 61df 	movw	r1, #3807	@ 0xedf
 80049c6:	483b      	ldr	r0, [pc, #236]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049c8:	f7fb ffd2 	bl	8000970 <assert_failed>
 80049cc:	e7b6      	b.n	800493c <RCCEx_PLL3_Config+0x48>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 80049ce:	f44f 616e 	mov.w	r1, #3808	@ 0xee0
 80049d2:	4838      	ldr	r0, [pc, #224]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049d4:	f7fb ffcc 	bl	8000970 <assert_failed>
 80049d8:	e7b6      	b.n	8004948 <RCCEx_PLL3_Config+0x54>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 80049da:	f640 61e1 	movw	r1, #3809	@ 0xee1
 80049de:	4835      	ldr	r0, [pc, #212]	@ (8004ab4 <RCCEx_PLL3_Config+0x1c0>)
 80049e0:	f7fb ffc6 	bl	8000970 <assert_failed>
 80049e4:	e7b4      	b.n	8004950 <RCCEx_PLL3_Config+0x5c>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049e6:	4b32      	ldr	r3, [pc, #200]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 80049e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ea:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 80049ee:	6821      	ldr	r1, [r4, #0]
 80049f0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80049f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80049f6:	6862      	ldr	r2, [r4, #4]
 80049f8:	3a01      	subs	r2, #1
 80049fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fe:	68a1      	ldr	r1, [r4, #8]
 8004a00:	3901      	subs	r1, #1
 8004a02:	0249      	lsls	r1, r1, #9
 8004a04:	b289      	uxth	r1, r1
 8004a06:	430a      	orrs	r2, r1
 8004a08:	68e1      	ldr	r1, [r4, #12]
 8004a0a:	3901      	subs	r1, #1
 8004a0c:	0409      	lsls	r1, r1, #16
 8004a0e:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8004a12:	430a      	orrs	r2, r1
 8004a14:	6921      	ldr	r1, [r4, #16]
 8004a16:	3901      	subs	r1, #1
 8004a18:	0609      	lsls	r1, r1, #24
 8004a1a:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	641a      	str	r2, [r3, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a24:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004a28:	6961      	ldr	r1, [r4, #20]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a34:	69a1      	ldr	r1, [r4, #24]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a44:	f36f 02cf 	bfc	r2, #3, #13
 8004a48:	69e1      	ldr	r1, [r4, #28]
 8004a4a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a58:	b9c6      	cbnz	r6, 8004a8c <RCCEx_PLL3_Config+0x198>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a64:	4a12      	ldr	r2, [pc, #72]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6e:	f7fc f89f 	bl	8000bb0 <HAL_GetTick>
 8004a72:	4604      	mov	r4, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a74:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8004a7c:	d114      	bne.n	8004aa8 <RCCEx_PLL3_Config+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a7e:	f7fc f897 	bl	8000bb0 <HAL_GetTick>
 8004a82:	1b00      	subs	r0, r0, r4
 8004a84:	2802      	cmp	r0, #2
 8004a86:	d9f5      	bls.n	8004a74 <RCCEx_PLL3_Config+0x180>
      {
        return HAL_TIMEOUT;
 8004a88:	2003      	movs	r0, #3
 8004a8a:	e010      	b.n	8004aae <RCCEx_PLL3_Config+0x1ba>
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a8c:	2e01      	cmp	r6, #1
 8004a8e:	d005      	beq.n	8004a9c <RCCEx_PLL3_Config+0x1a8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a90:	4a07      	ldr	r2, [pc, #28]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004a92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a9a:	e7e3      	b.n	8004a64 <RCCEx_PLL3_Config+0x170>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <RCCEx_PLL3_Config+0x1bc>)
 8004a9e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aa6:	e7dd      	b.n	8004a64 <RCCEx_PLL3_Config+0x170>
    }

  }


  return status;
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e000      	b.n	8004aae <RCCEx_PLL3_Config+0x1ba>
    return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
}
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	08009cbc 	.word	0x08009cbc

08004ab8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004ac2:	d02f      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ac4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004ac6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aca:	d025      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004acc:	d815      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ace:	b1e3      	cbz	r3, 8004b0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad4:	d10e      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ad6:	2102      	movs	r1, #2
 8004ad8:	3008      	adds	r0, #8
 8004ada:	f7ff fe2d 	bl	8004738 <RCCEx_PLL2_Config>
 8004ade:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004ae0:	bb7d      	cbnz	r5, 8004b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ae2:	4a90      	ldr	r2, [pc, #576]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ae4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004ae6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004aea:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004af0:	2600      	movs	r6, #0
 8004af2:	e019      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004af4:	2601      	movs	r6, #1
 8004af6:	4635      	mov	r5, r6
 8004af8:	e016      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004afa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004afe:	d101      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8004b00:	2500      	movs	r5, #0
 8004b02:	e7ee      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004b04:	2601      	movs	r6, #1
 8004b06:	4635      	mov	r5, r6
 8004b08:	e00e      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b0a:	4a86      	ldr	r2, [pc, #536]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b0c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b14:	2500      	movs	r5, #0
 8004b16:	e7e4      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b18:	2102      	movs	r1, #2
 8004b1a:	3028      	adds	r0, #40	@ 0x28
 8004b1c:	f7ff feea 	bl	80048f4 <RCCEx_PLL3_Config>
 8004b20:	4605      	mov	r5, r0
        break;
 8004b22:	e7dd      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b24:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b26:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004b2e:	d019      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	f200 8098 	bhi.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8004b38:	e8df f003 	tbb	[pc, r3]
 8004b3c:	0a8f8805 	.word	0x0a8f8805
 8004b40:	0a          	.byte	0x0a
 8004b41:	00          	.byte	0x00
      status = ret;
 8004b42:	462e      	mov	r6, r5
 8004b44:	e7f0      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b46:	4a77      	ldr	r2, [pc, #476]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b48:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	f040 808c 	bne.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b56:	4a73      	ldr	r2, [pc, #460]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b58:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b6c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8004b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b74:	f000 8092 	beq.w	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004b78:	d87e      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8088 	beq.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b84:	d175      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b86:	2100      	movs	r1, #0
 8004b88:	f104 0008 	add.w	r0, r4, #8
 8004b8c:	f7ff fdd4 	bl	8004738 <RCCEx_PLL2_Config>
 8004b90:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	f040 8089 	bne.w	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b98:	4a62      	ldr	r2, [pc, #392]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b9a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004b9c:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8004ba0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004bae:	d01d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004bb0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb8:	f000 808e 	beq.w	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004bbc:	d87a      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8084 	beq.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc8:	d171      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f104 0008 	add.w	r0, r4, #8
 8004bd0:	f7ff fdb2 	bl	8004738 <RCCEx_PLL2_Config>
 8004bd4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	f040 8085 	bne.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bdc:	4a51      	ldr	r2, [pc, #324]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bde:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004be0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004be4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004bf2:	d014      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->OspiClockSelection)
 8004bf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d07f      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004bfa:	d879      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004bfc:	b133      	cbz	r3, 8004c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d173      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x232>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c02:	4a48      	ldr	r2, [pc, #288]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c04:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d17b      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c10:	4a44      	ldr	r2, [pc, #272]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c12:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004c14:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004c18:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8004c24:	f000 808e 	beq.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c28:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c2e:	f000 80d3 	beq.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8004c32:	d86e      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d077      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3c:	d166      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x254>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c3e:	2100      	movs	r1, #0
 8004c40:	f104 0008 	add.w	r0, r4, #8
 8004c44:	f7ff fd78 	bl	8004738 <RCCEx_PLL2_Config>
 8004c48:	4605      	mov	r5, r0
        break;
 8004c4a:	e072      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f104 0008 	add.w	r0, r4, #8
 8004c52:	f7ff fd71 	bl	8004738 <RCCEx_PLL2_Config>
 8004c56:	4605      	mov	r5, r0
        break;
 8004c58:	e77a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004c60:	f7ff fe48 	bl	80048f4 <RCCEx_PLL3_Config>
 8004c64:	4605      	mov	r5, r0
        break;
 8004c66:	e773      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c68:	2601      	movs	r6, #1
 8004c6a:	4635      	mov	r5, r6
 8004c6c:	e77a      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xac>
      status = ret;
 8004c6e:	462e      	mov	r6, r5
 8004c70:	e778      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c72:	2601      	movs	r6, #1
 8004c74:	4635      	mov	r5, r6
 8004c76:	e797      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8004c78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c7c:	d089      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004c7e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004c82:	d086      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004c84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c88:	d083      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004c8a:	2601      	movs	r6, #1
 8004c8c:	4635      	mov	r5, r6
 8004c8e:	e78b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4a24      	ldr	r2, [pc, #144]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c92:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004c9a:	e77a      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004ca2:	f7ff fe27 	bl	80048f4 <RCCEx_PLL3_Config>
 8004ca6:	4605      	mov	r5, r0
        break;
 8004ca8:	e773      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xda>
      status = ret;
 8004caa:	462e      	mov	r6, r5
 8004cac:	e77c      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004cae:	2601      	movs	r6, #1
 8004cb0:	4635      	mov	r5, r6
 8004cb2:	e79b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004cb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cb8:	d08d      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004cba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004cbe:	d08a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004cc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cc4:	d087      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8004cc6:	2601      	movs	r6, #1
 8004cc8:	4635      	mov	r5, r6
 8004cca:	e78f      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ccc:	4a15      	ldr	r2, [pc, #84]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004cce:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004cd6:	e77e      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004cde:	f7ff fe09 	bl	80048f4 <RCCEx_PLL3_Config>
 8004ce2:	4605      	mov	r5, r0
        break;
 8004ce4:	e777      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      status = ret;
 8004ce6:	462e      	mov	r6, r5
 8004ce8:	e780      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch (PeriphClkInit->OspiClockSelection)
 8004cea:	2601      	movs	r6, #1
 8004cec:	4635      	mov	r5, r6
 8004cee:	e796      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004cf0:	2b30      	cmp	r3, #48	@ 0x30
 8004cf2:	d08b      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004cf4:	2601      	movs	r6, #1
 8004cf6:	4635      	mov	r5, r6
 8004cf8:	e791      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	f104 0008 	add.w	r0, r4, #8
 8004d00:	f7ff fd1a 	bl	8004738 <RCCEx_PLL2_Config>
 8004d04:	4605      	mov	r5, r0
        break;
 8004d06:	e781      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
      status = ret;
 8004d08:	462e      	mov	r6, r5
 8004d0a:	e788      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d0c:	2601      	movs	r6, #1
 8004d0e:	4635      	mov	r5, r6
 8004d10:	e018      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004d12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d16:	d00c      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004d1e:	2601      	movs	r6, #1
 8004d20:	4635      	mov	r5, r6
 8004d22:	e00f      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004d24:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4a5a      	ldr	r2, [pc, #360]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004d32:	2d00      	cmp	r5, #0
 8004d34:	d157      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d36:	4a57      	ldr	r2, [pc, #348]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d38:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004d4a:	d017      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d4c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004d4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d52:	d059      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004d54:	d84c      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004d56:	b143      	cbz	r3, 8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5c:	d145      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d5e:	2101      	movs	r1, #1
 8004d60:	f104 0008 	add.w	r0, r4, #8
 8004d64:	f7ff fce8 	bl	8004738 <RCCEx_PLL2_Config>
 8004d68:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	d153      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d6e:	4a49      	ldr	r2, [pc, #292]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004d72:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d76:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004d82:	d019      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d84:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8004d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d8c:	d054      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8004d8e:	d847      	bhi.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004d90:	b143      	cbz	r3, 8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8004d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d96:	d140      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d98:	2101      	movs	r1, #1
 8004d9a:	f104 0008 	add.w	r0, r4, #8
 8004d9e:	f7ff fccb 	bl	8004738 <RCCEx_PLL2_Config>
 8004da2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004da4:	2d00      	cmp	r5, #0
 8004da6:	d14e      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004da8:	4a3a      	ldr	r2, [pc, #232]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004dac:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8004db0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004dbe:	d058      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8004dc0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc6:	d040      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dcc:	d043      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d047      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8004dd2:	2601      	movs	r6, #1
 8004dd4:	4635      	mov	r5, r6
 8004dd6:	e04c      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd8:	2100      	movs	r1, #0
 8004dda:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004dde:	f7ff fd89 	bl	80048f4 <RCCEx_PLL3_Config>
 8004de2:	4605      	mov	r5, r0
        break;
 8004de4:	e7a5      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      status = ret;
 8004de6:	462e      	mov	r6, r5
 8004de8:	e7ac      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dea:	2601      	movs	r6, #1
 8004dec:	4635      	mov	r5, r6
 8004dee:	e7c5      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004df0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004df4:	d0b9      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004df6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dfa:	d0b6      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004dfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e00:	d0b3      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8004e02:	2601      	movs	r6, #1
 8004e04:	4635      	mov	r5, r6
 8004e06:	e7b9      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e08:	2101      	movs	r1, #1
 8004e0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004e0e:	f7ff fd71 	bl	80048f4 <RCCEx_PLL3_Config>
 8004e12:	4605      	mov	r5, r0
        break;
 8004e14:	e7a9      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      status = ret;
 8004e16:	462e      	mov	r6, r5
 8004e18:	e7b0      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e1a:	2601      	movs	r6, #1
 8004e1c:	4635      	mov	r5, r6
 8004e1e:	e7cb      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e24:	d0be      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8004e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e2a:	d0bb      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8004e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e30:	d0b8      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8004e32:	2601      	movs	r6, #1
 8004e34:	4635      	mov	r5, r6
 8004e36:	e7bf      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e38:	2101      	movs	r1, #1
 8004e3a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004e3e:	f7ff fd59 	bl	80048f4 <RCCEx_PLL3_Config>
 8004e42:	4605      	mov	r5, r0
        break;
 8004e44:	e7ae      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      status = ret;
 8004e46:	462e      	mov	r6, r5
 8004e48:	e7b6      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	4a12      	ldr	r2, [pc, #72]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8004e54:	e005      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e56:	2101      	movs	r1, #1
 8004e58:	f104 0008 	add.w	r0, r4, #8
 8004e5c:	f7ff fc6c 	bl	8004738 <RCCEx_PLL2_Config>
 8004e60:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8004e62:	b9a5      	cbnz	r5, 8004e8e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e64:	4a0b      	ldr	r2, [pc, #44]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e66:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004e68:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004e6c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004e78:	d01d      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    switch (PeriphClkInit->FmcClockSelection)
 8004e7a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	f200 818b 	bhi.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8004e82:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e86:	000e      	.short	0x000e
 8004e88:	01820009 	.word	0x01820009
 8004e8c:	000e      	.short	0x000e
      status = ret;
 8004e8e:	462e      	mov	r6, r5
 8004e90:	e7ef      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4ab7      	ldr	r2, [pc, #732]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004e9a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	f040 817b 	bne.w	800519e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ea8:	4ab3      	ldr	r2, [pc, #716]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8004eaa:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8004ebc:	f000 818d 	beq.w	80051da <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004ec0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ec8:	bf18      	it	ne
 8004eca:	f5b3 7f00 	cmpne.w	r3, #512	@ 0x200
 8004ece:	f000 810d 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ed2:	f5b3 5f0c 	cmp.w	r3, #8960	@ 0x2300
 8004ed6:	f000 8109 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004eda:	f5b3 5f4c 	cmp.w	r3, #13056	@ 0x3300
 8004ede:	f000 8105 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ee2:	f5b3 4f86 	cmp.w	r3, #17152	@ 0x4300
 8004ee6:	f000 8101 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004eea:	f5b3 4fa6 	cmp.w	r3, #21248	@ 0x5300
 8004eee:	f000 80fd 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ef2:	f5b3 4fc6 	cmp.w	r3, #25344	@ 0x6300
 8004ef6:	f000 80f9 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004efa:	f5b3 4fe6 	cmp.w	r3, #29440	@ 0x7300
 8004efe:	f000 80f5 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f02:	f5b3 4f03 	cmp.w	r3, #33536	@ 0x8300
 8004f06:	f000 80f1 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f0a:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 8004f0e:	f000 80ed 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f12:	f5b3 4f23 	cmp.w	r3, #41728	@ 0xa300
 8004f16:	f000 80e9 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f1a:	f5b3 4f33 	cmp.w	r3, #45824	@ 0xb300
 8004f1e:	f000 80e5 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f22:	f5b3 4f43 	cmp.w	r3, #49920	@ 0xc300
 8004f26:	f000 80e1 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f2a:	f5b3 4f53 	cmp.w	r3, #54016	@ 0xd300
 8004f2e:	f000 80dd 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f32:	f5b3 4f63 	cmp.w	r3, #58112	@ 0xe300
 8004f36:	f000 80d9 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f3a:	f5b3 4f73 	cmp.w	r3, #62208	@ 0xf300
 8004f3e:	f000 80d5 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f42:	4a8e      	ldr	r2, [pc, #568]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	f000 80d1 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 80cc 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	f000 80c7 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f000 80c2 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	f000 80bd 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f000 80b8 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f80:	4293      	cmp	r3, r2
 8004f82:	f000 80b3 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	f000 80ae 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f94:	4293      	cmp	r3, r2
 8004f96:	f000 80a9 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f000 80a4 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	f000 809f 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	f000 809a 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f000 8095 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f000 8090 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	f000 808b 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	f000 8086 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f000 8081 	beq.w	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004fea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d07c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ff2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d078      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004ffa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d074      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005002:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005006:	4293      	cmp	r3, r2
 8005008:	d070      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800500a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800500e:	4293      	cmp	r3, r2
 8005010:	d06c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005012:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005016:	4293      	cmp	r3, r2
 8005018:	d068      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800501a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800501e:	4293      	cmp	r3, r2
 8005020:	d064      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005022:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005026:	4293      	cmp	r3, r2
 8005028:	d060      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800502a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800502e:	4293      	cmp	r3, r2
 8005030:	d05c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005032:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005036:	4293      	cmp	r3, r2
 8005038:	d058      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800503a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800503e:	4293      	cmp	r3, r2
 8005040:	d054      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005042:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005046:	4293      	cmp	r3, r2
 8005048:	d050      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800504a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800504e:	4293      	cmp	r3, r2
 8005050:	d04c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005052:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005056:	4293      	cmp	r3, r2
 8005058:	d048      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800505a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800505e:	4293      	cmp	r3, r2
 8005060:	d044      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005066:	4293      	cmp	r3, r2
 8005068:	d040      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800506a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800506e:	4293      	cmp	r3, r2
 8005070:	d03c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005072:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005076:	4293      	cmp	r3, r2
 8005078:	d038      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800507a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800507e:	4293      	cmp	r3, r2
 8005080:	d034      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005082:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005086:	4293      	cmp	r3, r2
 8005088:	d030      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800508a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800508e:	4293      	cmp	r3, r2
 8005090:	d02c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005092:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005096:	4293      	cmp	r3, r2
 8005098:	d028      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 800509a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800509e:	4293      	cmp	r3, r2
 80050a0:	d024      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d020      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050be:	4293      	cmp	r3, r2
 80050c0:	d014      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00c      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d008      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x634>
 80050e2:	f240 317d 	movw	r1, #893	@ 0x37d
 80050e6:	4826      	ldr	r0, [pc, #152]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050e8:	f7fb fc42 	bl	8000970 <assert_failed>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ec:	4a25      	ldr	r2, [pc, #148]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050f6:	f7fb fd5b 	bl	8000bb0 <HAL_GetTick>
 80050fa:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050fc:	4b21      	ldr	r3, [pc, #132]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005104:	d105      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005106:	f7fb fd53 	bl	8000bb0 <HAL_GetTick>
 800510a:	1bc0      	subs	r0, r0, r7
 800510c:	2864      	cmp	r0, #100	@ 0x64
 800510e:	d9f5      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x644>
        ret = HAL_TIMEOUT;
 8005110:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 8005112:	2d00      	cmp	r5, #0
 8005114:	d160      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005116:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800511e:	4053      	eors	r3, r2
 8005120:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005124:	d00c      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x688>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005126:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005128:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800512a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800512e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005130:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005134:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005136:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005138:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800513c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800513e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005140:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8005144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005148:	d02b      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      if (ret == HAL_OK)
 800514a:	2d00      	cmp	r5, #0
 800514c:	d163      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x75e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800514e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8005152:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005156:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800515a:	d033      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800515c:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800515e:	6913      	ldr	r3, [r2, #16]
 8005160:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005164:	6113      	str	r3, [r2, #16]
 8005166:	4904      	ldr	r1, [pc, #16]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8005168:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 800516a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 800516e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005172:	4313      	orrs	r3, r2
 8005174:	670b      	str	r3, [r1, #112]	@ 0x70
 8005176:	e007      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005178:	58024400 	.word	0x58024400
 800517c:	00010300 	.word	0x00010300
 8005180:	08009cbc 	.word	0x08009cbc
 8005184:	58024800 	.word	0x58024800
 8005188:	e027      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x722>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800518a:	2102      	movs	r1, #2
 800518c:	f104 0008 	add.w	r0, r4, #8
 8005190:	f7ff fad2 	bl	8004738 <RCCEx_PLL2_Config>
 8005194:	4605      	mov	r5, r0
        break;
 8005196:	e684      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    switch (PeriphClkInit->FmcClockSelection)
 8005198:	2601      	movs	r6, #1
 800519a:	4635      	mov	r5, r6
 800519c:	e68b      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      status = ret;
 800519e:	462e      	mov	r6, r5
 80051a0:	e689      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        tickstart = HAL_GetTick();
 80051a2:	f7fb fd05 	bl	8000bb0 <HAL_GetTick>
 80051a6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a8:	4b44      	ldr	r3, [pc, #272]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x804>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	f013 0f02 	tst.w	r3, #2
 80051b0:	d1cb      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x692>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fb fcfd 	bl	8000bb0 <HAL_GetTick>
 80051b6:	1bc0      	subs	r0, r0, r7
 80051b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051bc:	4298      	cmp	r0, r3
 80051be:	d9f3      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
            ret = HAL_TIMEOUT;
 80051c0:	2503      	movs	r5, #3
 80051c2:	e7c2      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x692>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c4:	483d      	ldr	r0, [pc, #244]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x804>)
 80051c6:	6902      	ldr	r2, [r0, #16]
 80051c8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80051cc:	493c      	ldr	r1, [pc, #240]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x808>)
 80051ce:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80051d2:	4313      	orrs	r3, r2
 80051d4:	6103      	str	r3, [r0, #16]
 80051d6:	e7c6      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      status = ret;
 80051d8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f013 0f01 	tst.w	r3, #1
 80051e0:	d033      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x792>
    switch (PeriphClkInit->Usart16ClockSelection)
 80051e2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80051e4:	2b28      	cmp	r3, #40	@ 0x28
 80051e6:	d82e      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80051e8:	e8df f003 	tbb	[pc, r3]
 80051ec:	2d2d2d1d 	.word	0x2d2d2d1d
 80051f0:	2d2d2d2d 	.word	0x2d2d2d2d
 80051f4:	2d2d2d17 	.word	0x2d2d2d17
 80051f8:	2d2d2d2d 	.word	0x2d2d2d2d
 80051fc:	2d2d2d26 	.word	0x2d2d2d26
 8005200:	2d2d2d2d 	.word	0x2d2d2d2d
 8005204:	2d2d2d1d 	.word	0x2d2d2d1d
 8005208:	2d2d2d2d 	.word	0x2d2d2d2d
 800520c:	2d2d2d1d 	.word	0x2d2d2d1d
 8005210:	2d2d2d2d 	.word	0x2d2d2d2d
 8005214:	1d          	.byte	0x1d
 8005215:	00          	.byte	0x00
        status = ret;
 8005216:	462e      	mov	r6, r5
 8005218:	e7df      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x722>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800521a:	2101      	movs	r1, #1
 800521c:	f104 0008 	add.w	r0, r4, #8
 8005220:	f7ff fa8a 	bl	8004738 <RCCEx_PLL2_Config>
 8005224:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005226:	b9e5      	cbnz	r5, 8005262 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005228:	4a24      	ldr	r2, [pc, #144]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x804>)
 800522a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800522c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005230:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8005232:	430b      	orrs	r3, r1
 8005234:	6553      	str	r3, [r2, #84]	@ 0x54
 8005236:	e008      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x792>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005238:	2101      	movs	r1, #1
 800523a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800523e:	f7ff fb59 	bl	80048f4 <RCCEx_PLL3_Config>
 8005242:	4605      	mov	r5, r0
        break;
 8005244:	e7ef      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x76e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005246:	2601      	movs	r6, #1
 8005248:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	f013 0f02 	tst.w	r3, #2
 8005250:	d017      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005252:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005254:	2b05      	cmp	r3, #5
 8005256:	d82c      	bhi.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 8005258:	e8df f003 	tbb	[pc, r3]
 800525c:	0b24050b 	.word	0x0b24050b
 8005260:	0b0b      	.short	0x0b0b
      status = ret;
 8005262:	462e      	mov	r6, r5
 8005264:	e7f1      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x792>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005266:	2101      	movs	r1, #1
 8005268:	f104 0008 	add.w	r0, r4, #8
 800526c:	f7ff fa64 	bl	8004738 <RCCEx_PLL2_Config>
 8005270:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005272:	bb0d      	cbnz	r5, 80052b8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005274:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8005276:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800527e:	430b      	orrs	r3, r1
 8005280:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f013 0f04 	tst.w	r3, #4
 8005288:	d02d      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800528a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800528e:	2b05      	cmp	r3, #5
 8005290:	f200 8146 	bhi.w	8005520 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005294:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005298:	0016001c 	.word	0x0016001c
 800529c:	001c013d 	.word	0x001c013d
 80052a0:	001c001c 	.word	0x001c001c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052a4:	2101      	movs	r1, #1
 80052a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052aa:	f7ff fb23 	bl	80048f4 <RCCEx_PLL3_Config>
 80052ae:	4605      	mov	r5, r0
        break;
 80052b0:	e7df      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052b2:	2601      	movs	r6, #1
 80052b4:	4635      	mov	r5, r6
 80052b6:	e7e4      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
      status = ret;
 80052b8:	462e      	mov	r6, r5
 80052ba:	e7e2      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 80052bc:	58024400 	.word	0x58024400
 80052c0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052c4:	2101      	movs	r1, #1
 80052c6:	f104 0008 	add.w	r0, r4, #8
 80052ca:	f7ff fa35 	bl	8004738 <RCCEx_PLL2_Config>
 80052ce:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	f040 8128 	bne.w	8005526 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d6:	4ab9      	ldr	r2, [pc, #740]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 80052d8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80052da:	f023 0307 	bic.w	r3, r3, #7
 80052de:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	f013 0f20 	tst.w	r3, #32
 80052ec:	d01d      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x872>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80052f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f6:	f000 812a 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80052fa:	f200 8119 	bhi.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 80052fe:	b14b      	cbz	r3, 8005314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8005300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005304:	f040 8111 	bne.w	800552a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005308:	2100      	movs	r1, #0
 800530a:	f104 0008 	add.w	r0, r4, #8
 800530e:	f7ff fa13 	bl	8004738 <RCCEx_PLL2_Config>
 8005312:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005314:	2d00      	cmp	r5, #0
 8005316:	f040 8121 	bne.w	800555c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800531a:	4aa8      	ldr	r2, [pc, #672]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 800531c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800531e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8005322:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8005326:	430b      	orrs	r3, r1
 8005328:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005330:	d01d      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005332:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8005336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533a:	f000 8123 	beq.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800533e:	f200 8112 	bhi.w	8005566 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005342:	b14b      	cbz	r3, 8005358 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005348:	f040 810a 	bne.w	8005560 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800534c:	2100      	movs	r1, #0
 800534e:	f104 0008 	add.w	r0, r4, #8
 8005352:	f7ff f9f1 	bl	8004738 <RCCEx_PLL2_Config>
 8005356:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005358:	2d00      	cmp	r5, #0
 800535a:	f040 811a 	bne.w	8005592 <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800535e:	4a97      	ldr	r2, [pc, #604]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 8005360:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005362:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005366:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800536a:	430b      	orrs	r3, r1
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005374:	d01d      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005376:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800537a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800537e:	f000 811f 	beq.w	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8005382:	f200 810b 	bhi.w	800559c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 8005386:	b14b      	cbz	r3, 800539c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538c:	f040 8103 	bne.w	8005596 <HAL_RCCEx_PeriphCLKConfig+0xade>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005390:	2100      	movs	r1, #0
 8005392:	f104 0008 	add.w	r0, r4, #8
 8005396:	f7ff f9cf 	bl	8004738 <RCCEx_PLL2_Config>
 800539a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800539c:	2d00      	cmp	r5, #0
 800539e:	f040 8116 	bne.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0xb16>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053a2:	4a86      	ldr	r2, [pc, #536]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 80053a4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80053a6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80053aa:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	f013 0f08 	tst.w	r3, #8
 80053b8:	d01a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));
 80053ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c2:	bf18      	it	ne
 80053c4:	f5b3 5f00 	cmpne.w	r3, #8192	@ 0x2000
 80053c8:	d004      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80053ca:	b11b      	cbz	r3, 80053d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80053cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053d0:	f040 80ff 	bne.w	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80053d4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053dc:	f000 80ff 	beq.w	80055de <HAL_RCCEx_PeriphCLKConfig+0xb26>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80053e0:	4a76      	ldr	r2, [pc, #472]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 80053e2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80053e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80053e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	f013 0f10 	tst.w	r3, #16
 80053f6:	d01a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x976>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80053f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005400:	bf18      	it	ne
 8005402:	f5b3 7f00 	cmpne.w	r3, #512	@ 0x200
 8005406:	d004      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005408:	b11b      	cbz	r3, 8005412 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800540a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800540e:	f040 80f0 	bne.w	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005412:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8005416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800541a:	f000 80f0 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0xb46>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800541e:	4a67      	ldr	r2, [pc, #412]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 8005420:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005426:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800542a:	430b      	orrs	r3, r1
 800542c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005434:	d01c      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
    switch (PeriphClkInit->AdcClockSelection)
 8005436:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543e:	f000 80e8 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 8005442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005446:	d008      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005448:	2b00      	cmp	r3, #0
 800544a:	f040 80e9 	bne.w	8005620 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800544e:	2100      	movs	r1, #0
 8005450:	f104 0008 	add.w	r0, r4, #8
 8005454:	f7ff f970 	bl	8004738 <RCCEx_PLL2_Config>
 8005458:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800545a:	2d00      	cmp	r5, #0
 800545c:	f040 80e3 	bne.w	8005626 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005460:	4a56      	ldr	r2, [pc, #344]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 8005462:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005464:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005468:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800546c:	430b      	orrs	r3, r1
 800546e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005476:	d01c      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    switch (PeriphClkInit->UsbClockSelection)
 8005478:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800547c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005480:	f000 80d3 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8005484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
 800548a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800548e:	f040 80d3 	bne.w	8005638 <HAL_RCCEx_PeriphCLKConfig+0xb80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005492:	4a4a      	ldr	r2, [pc, #296]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 8005494:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800549c:	2d00      	cmp	r5, #0
 800549e:	f040 80ce 	bne.w	800563e <HAL_RCCEx_PeriphCLKConfig+0xb86>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a2:	4a46      	ldr	r2, [pc, #280]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0xb04>)
 80054a4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80054a6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80054aa:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80054ae:	430b      	orrs	r3, r1
 80054b0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80054b8:	d010      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80054ba:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf18      	it	ne
 80054c0:	f5b3 3f80 	cmpne.w	r3, #65536	@ 0x10000
 80054c4:	f040 80bd 	bne.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    switch (PeriphClkInit->SdmmcClockSelection)
 80054c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80bf 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0xb96>
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d4:	f000 80c9 	beq.w	800566a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80054d8:	2601      	movs	r6, #1
 80054da:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80054e2:	f040 80cb 	bne.w	800567c <HAL_RCCEx_PeriphCLKConfig+0xbc4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80054ec:	f000 80e2 	beq.w	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
    switch (PeriphClkInit->RngClockSelection)
 80054f0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f6:	f000 80ce 	beq.w	8005696 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80054fa:	f240 80c9 	bls.w	8005690 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80054fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005502:	f000 80cd 	beq.w	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
 8005506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800550a:	f000 80c9 	beq.w	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
 800550e:	2601      	movs	r6, #1
 8005510:	e0d0      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005512:	2101      	movs	r1, #1
 8005514:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005518:	f7ff f9ec 	bl	80048f4 <RCCEx_PLL3_Config>
 800551c:	4605      	mov	r5, r0
        break;
 800551e:	e6d7      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x818>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005520:	2601      	movs	r6, #1
 8005522:	4635      	mov	r5, r6
 8005524:	e6df      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      status = ret;
 8005526:	462e      	mov	r6, r5
 8005528:	e6dd      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800552a:	2601      	movs	r6, #1
 800552c:	4635      	mov	r5, r6
 800552e:	e6fc      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x872>
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005534:	f43f aeee 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8005538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800553c:	f43f aeea 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8005540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005544:	f43f aee6 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8005548:	2601      	movs	r6, #1
 800554a:	4635      	mov	r5, r6
 800554c:	e6ed      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x872>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554e:	2102      	movs	r1, #2
 8005550:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005554:	f7ff f9ce 	bl	80048f4 <RCCEx_PLL3_Config>
 8005558:	4605      	mov	r5, r0
        break;
 800555a:	e6db      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x85c>
      status = ret;
 800555c:	462e      	mov	r6, r5
 800555e:	e6e4      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x872>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005560:	2601      	movs	r6, #1
 8005562:	4635      	mov	r5, r6
 8005564:	e703      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556a:	f43f aef5 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800556e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005572:	f43f aef1 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8005576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800557a:	f43f aeed 	beq.w	8005358 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 800557e:	2601      	movs	r6, #1
 8005580:	4635      	mov	r5, r6
 8005582:	e6f4      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005584:	2102      	movs	r1, #2
 8005586:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800558a:	f7ff f9b3 	bl	80048f4 <RCCEx_PLL3_Config>
 800558e:	4605      	mov	r5, r0
        break;
 8005590:	e6e2      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      status = ret;
 8005592:	462e      	mov	r6, r5
 8005594:	e6eb      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005596:	2601      	movs	r6, #1
 8005598:	4635      	mov	r5, r6
 800559a:	e70a      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800559c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a0:	f43f aefc 	beq.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80055a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055a8:	f43f aef8 	beq.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80055ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055b0:	f43f aef4 	beq.w	800539c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80055b4:	2601      	movs	r6, #1
 80055b6:	4635      	mov	r5, r6
 80055b8:	e6fb      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c0:	2102      	movs	r1, #2
 80055c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055c6:	f7ff f995 	bl	80048f4 <RCCEx_PLL3_Config>
 80055ca:	4605      	mov	r5, r0
        break;
 80055cc:	e6e6      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      status = ret;
 80055ce:	462e      	mov	r6, r5
 80055d0:	e6ef      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));
 80055d2:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 80055d6:	489f      	ldr	r0, [pc, #636]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80055d8:	f7fb f9ca 	bl	8000970 <assert_failed>
 80055dc:	e6fa      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055de:	2102      	movs	r1, #2
 80055e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055e4:	f7ff f986 	bl	80048f4 <RCCEx_PLL3_Config>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f43f aef9 	beq.w	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x928>
        status = HAL_ERROR;
 80055ee:	2601      	movs	r6, #1
 80055f0:	e6f6      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x928>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80055f2:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
 80055f6:	4897      	ldr	r0, [pc, #604]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80055f8:	f7fb f9ba 	bl	8000970 <assert_failed>
 80055fc:	e709      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x95a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055fe:	2102      	movs	r1, #2
 8005600:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005604:	f7ff f976 	bl	80048f4 <RCCEx_PLL3_Config>
 8005608:	2800      	cmp	r0, #0
 800560a:	f43f af08 	beq.w	800541e <HAL_RCCEx_PeriphCLKConfig+0x966>
        status = HAL_ERROR;
 800560e:	2601      	movs	r6, #1
 8005610:	e705      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x966>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005612:	2102      	movs	r1, #2
 8005614:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005618:	f7ff f96c 	bl	80048f4 <RCCEx_PLL3_Config>
 800561c:	4605      	mov	r5, r0
        break;
 800561e:	e71c      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    switch (PeriphClkInit->AdcClockSelection)
 8005620:	2601      	movs	r6, #1
 8005622:	4635      	mov	r5, r6
 8005624:	e724      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      status = ret;
 8005626:	462e      	mov	r6, r5
 8005628:	e722      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800562a:	2101      	movs	r1, #1
 800562c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005630:	f7ff f960 	bl	80048f4 <RCCEx_PLL3_Config>
 8005634:	4605      	mov	r5, r0
        break;
 8005636:	e731      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
    switch (PeriphClkInit->UsbClockSelection)
 8005638:	2601      	movs	r6, #1
 800563a:	4635      	mov	r5, r6
 800563c:	e739      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
      status = ret;
 800563e:	462e      	mov	r6, r5
 8005640:	e737      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8005642:	f240 5186 	movw	r1, #1414	@ 0x586
 8005646:	4883      	ldr	r0, [pc, #524]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 8005648:	f7fb f992 	bl	8000970 <assert_failed>
 800564c:	e73c      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xa10>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4a82      	ldr	r2, [pc, #520]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 8005650:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005656:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005658:	b975      	cbnz	r5, 8005678 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800565a:	4a7f      	ldr	r2, [pc, #508]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 800565c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800565e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005662:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005664:	430b      	orrs	r3, r1
 8005666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005668:	e738      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa24>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800566a:	2102      	movs	r1, #2
 800566c:	f104 0008 	add.w	r0, r4, #8
 8005670:	f7ff f862 	bl	8004738 <RCCEx_PLL2_Config>
 8005674:	4605      	mov	r5, r0
        break;
 8005676:	e7ef      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xba0>
      status = ret;
 8005678:	462e      	mov	r6, r5
 800567a:	e72f      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa24>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800567c:	2102      	movs	r1, #2
 800567e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005682:	f7ff f937 	bl	80048f4 <RCCEx_PLL3_Config>
 8005686:	2800      	cmp	r0, #0
 8005688:	f43f af2d 	beq.w	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
      status = HAL_ERROR;
 800568c:	2601      	movs	r6, #1
 800568e:	e72a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
    switch (PeriphClkInit->RngClockSelection)
 8005690:	b133      	cbz	r3, 80056a0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
 8005692:	2601      	movs	r6, #1
 8005694:	e00e      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005696:	4a70      	ldr	r2, [pc, #448]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 8005698:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800569a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 80056a0:	b93d      	cbnz	r5, 80056b2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a2:	4a6d      	ldr	r2, [pc, #436]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 80056a4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      status = ret;
 80056b2:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80056ba:	d00c      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80056bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf18      	it	ne
 80056c2:	f1b3 4f00 	cmpne.w	r3, #2147483648	@ 0x80000000
 80056c6:	d171      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056c8:	4a63      	ldr	r2, [pc, #396]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 80056ca:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80056cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056d0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80056d2:	430b      	orrs	r3, r1
 80056d4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80056de:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf18      	it	ne
 80056e4:	f1b3 7f80 	cmpne.w	r3, #16777216	@ 0x1000000
 80056e8:	d166      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ea:	4a5b      	ldr	r2, [pc, #364]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 80056ec:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80056ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056f2:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056fe:	d010      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8005700:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf18      	it	ne
 8005708:	f5b3 4f00 	cmpne.w	r3, #32768	@ 0x8000
 800570c:	d15a      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800570e:	4b52      	ldr	r3, [pc, #328]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800571e:	430a      	orrs	r2, r1
 8005720:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da0f      	bge.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xc90>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8005728:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf18      	it	ne
 800572e:	f1b3 5f80 	cmpne.w	r3, #268435456	@ 0x10000000
 8005732:	d002      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xc82>
 8005734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005738:	d14a      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800573a:	4a47      	ldr	r2, [pc, #284]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 800573c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800573e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005742:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8005744:	430b      	orrs	r3, r1
 8005746:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800574e:	d011      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005750:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf18      	it	ne
 8005758:	f5b3 0f80 	cmpne.w	r3, #4194304	@ 0x400000
 800575c:	d002      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800575e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005762:	d13b      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xd24>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005764:	4a3c      	ldr	r2, [pc, #240]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xda0>)
 8005766:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005768:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800576c:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005770:	430b      	orrs	r3, r1
 8005772:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	f013 0f01 	tst.w	r3, #1
 800577a:	d135      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xd30>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	f013 0f02 	tst.w	r3, #2
 8005782:	d13a      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	f013 0f04 	tst.w	r3, #4
 800578a:	d13f      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xd54>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	f013 0f08 	tst.w	r3, #8
 8005792:	d144      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xd66>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	f013 0f10 	tst.w	r3, #16
 800579a:	d149      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	f013 0f20 	tst.w	r3, #32
 80057a2:	d14e      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  if (status == HAL_OK)
 80057a4:	b106      	cbz	r6, 80057a8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  return HAL_ERROR;
 80057a6:	2601      	movs	r6, #1
}
 80057a8:	4630      	mov	r0, r6
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80057ac:	f240 51e5 	movw	r1, #1509	@ 0x5e5
 80057b0:	4828      	ldr	r0, [pc, #160]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80057b2:	f7fb f8dd 	bl	8000970 <assert_failed>
 80057b6:	e787      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80057b8:	f240 51f9 	movw	r1, #1529	@ 0x5f9
 80057bc:	4825      	ldr	r0, [pc, #148]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80057be:	f7fb f8d7 	bl	8000970 <assert_failed>
 80057c2:	e792      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xc32>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80057c4:	f240 610f 	movw	r1, #1551	@ 0x60f
 80057c8:	4822      	ldr	r0, [pc, #136]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80057ca:	f7fb f8d1 	bl	8000970 <assert_failed>
 80057ce:	e79e      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc56>
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80057d0:	f240 6119 	movw	r1, #1561	@ 0x619
 80057d4:	481f      	ldr	r0, [pc, #124]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80057d6:	f7fb f8cb 	bl	8000970 <assert_failed>
 80057da:	e7ae      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80057dc:	f240 6123 	movw	r1, #1571	@ 0x623
 80057e0:	481c      	ldr	r0, [pc, #112]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xd9c>)
 80057e2:	f7fb f8c5 	bl	8000970 <assert_failed>
 80057e6:	e7bd      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e8:	2100      	movs	r1, #0
 80057ea:	f104 0008 	add.w	r0, r4, #8
 80057ee:	f7fe ffa3 	bl	8004738 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0c2      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
      status = ret;
 80057f6:	4606      	mov	r6, r0
 80057f8:	e7c0      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057fa:	2101      	movs	r1, #1
 80057fc:	f104 0008 	add.w	r0, r4, #8
 8005800:	f7fe ff9a 	bl	8004738 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005804:	2800      	cmp	r0, #0
 8005806:	d0bd      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      status = ret;
 8005808:	4606      	mov	r6, r0
 800580a:	e7bb      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800580c:	2102      	movs	r1, #2
 800580e:	f104 0008 	add.w	r0, r4, #8
 8005812:	f7fe ff91 	bl	8004738 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8005816:	2800      	cmp	r0, #0
 8005818:	d0b8      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
      status = ret;
 800581a:	4606      	mov	r6, r0
 800581c:	e7b6      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800581e:	2100      	movs	r1, #0
 8005820:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005824:	f7ff f866 	bl	80048f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8005828:	2800      	cmp	r0, #0
 800582a:	d0b3      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
      status = ret;
 800582c:	4606      	mov	r6, r0
 800582e:	e7b1      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005830:	2101      	movs	r1, #1
 8005832:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005836:	f7ff f85d 	bl	80048f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800583a:	2800      	cmp	r0, #0
 800583c:	d0ae      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xce4>
      status = ret;
 800583e:	4606      	mov	r6, r0
 8005840:	e7ac      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xce4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005842:	2102      	movs	r1, #2
 8005844:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005848:	f7ff f854 	bl	80048f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800584c:	2800      	cmp	r0, #0
 800584e:	d0a9      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  return HAL_ERROR;
 8005850:	2601      	movs	r6, #1
 8005852:	e7a9      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8005854:	08009cbc 	.word	0x08009cbc
 8005858:	58024400 	.word	0x58024400

0800585c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800585c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800585e:	f7fe ff37 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800586a:	4a04      	ldr	r2, [pc, #16]	@ (800587c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800586c:	5cd3      	ldrb	r3, [r2, r3]
 800586e:	f003 031f 	and.w	r3, r3, #31
}
 8005872:	40d8      	lsrs	r0, r3
 8005874:	bd08      	pop	{r3, pc}
 8005876:	bf00      	nop
 8005878:	58024400 	.word	0x58024400
 800587c:	08009de4 	.word	0x08009de4

08005880 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8005880:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005882:	4b79      	ldr	r3, [pc, #484]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8005884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005886:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005888:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800588c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800588e:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005898:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 800589c:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 80058a0:	f000 80dd 	beq.w	8005a5e <HAL_RCCEx_GetPLL2ClockFreq+0x1de>
 80058a4:	f002 0203 	and.w	r2, r2, #3
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 80058b0:	2a01      	cmp	r2, #1
 80058b2:	d04b      	beq.n	800594c <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
 80058b4:	2a02      	cmp	r2, #2
 80058b6:	f000 8098 	beq.w	80059ea <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	f040 80b2 	bne.w	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c0:	4b69      	ldr	r3, [pc, #420]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f013 0f20 	tst.w	r3, #32
 80058c8:	d023      	beq.n	8005912 <HAL_RCCEx_GetPLL2ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058ca:	4967      	ldr	r1, [pc, #412]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80058cc:	680a      	ldr	r2, [r1, #0]
 80058ce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80058d2:	4b66      	ldr	r3, [pc, #408]	@ (8005a6c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 80058d4:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058d6:	ee07 3a10 	vmov	s14, r3
 80058da:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80058de:	ee07 ca10 	vmov	s14, ip
 80058e2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80058e6:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80058ea:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 80058ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f0:	ee06 3a90 	vmov	s13, r3
 80058f4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80058f8:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80058fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005910:	e038      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005912:	ee07 ca10 	vmov	s14, ip
 8005916:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800591a:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800591e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005922:	4b51      	ldr	r3, [pc, #324]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee06 3a90 	vmov	s13, r3
 800592e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005932:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8005936:	ee67 7a86 	vmul.f32	s15, s15, s12
 800593a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594a:	e01b      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800594c:	ee07 ca10 	vmov	s14, ip
 8005950:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005954:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8005958:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800595c:	4b42      	ldr	r3, [pc, #264]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005964:	ee06 3a90 	vmov	s13, r3
 8005968:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800596c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8005970:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800597c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005980:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005984:	4a38      	ldr	r2, [pc, #224]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8005986:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005988:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005994:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80059a0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80059a4:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80059a8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80059aa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ba:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80059be:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80059c2:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80059c6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80059c8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059dc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80059e0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80059e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e8:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059ea:	ee07 ca10 	vmov	s14, ip
 80059ee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80059f2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1fc>
 80059f6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80059fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a02:	ee06 3a90 	vmov	s13, r3
 8005a06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005a0a:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8005a0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005a22:	e7af      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a24:	ee07 ca10 	vmov	s14, ip
 8005a28:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005a2c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8005a30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3c:	ee06 3a90 	vmov	s13, r3
 8005a40:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005a44:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8005a48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a58:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005a5c:	e792      	b.n	8005984 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a62:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a64:	6083      	str	r3, [r0, #8]
}
 8005a66:	e7bd      	b.n	80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x164>
 8005a68:	58024400 	.word	0x58024400
 8005a6c:	03d09000 	.word	0x03d09000
 8005a70:	39000000 	.word	0x39000000
 8005a74:	4c742400 	.word	0x4c742400
 8005a78:	4a742400 	.word	0x4a742400
 8005a7c:	4bb71b00 	.word	0x4bb71b00

08005a80 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8005a80:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a82:	4b79      	ldr	r3, [pc, #484]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005a84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a86:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005a88:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a8e:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a94:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8005a9c:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8005aa0:	f000 80dd 	beq.w	8005c5e <HAL_RCCEx_GetPLL3ClockFreq+0x1de>
 8005aa4:	f002 0203 	and.w	r2, r2, #3
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005ab0:	2a01      	cmp	r2, #1
 8005ab2:	d04b      	beq.n	8005b4c <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
 8005ab4:	2a02      	cmp	r2, #2
 8005ab6:	f000 8098 	beq.w	8005bea <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	f040 80b2 	bne.w	8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ac0:	4b69      	ldr	r3, [pc, #420]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f013 0f20 	tst.w	r3, #32
 8005ac8:	d023      	beq.n	8005b12 <HAL_RCCEx_GetPLL3ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aca:	4967      	ldr	r1, [pc, #412]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005acc:	680a      	ldr	r2, [r1, #0]
 8005ace:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005ad2:	4b66      	ldr	r3, [pc, #408]	@ (8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 8005ad4:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ad6:	ee07 3a10 	vmov	s14, r3
 8005ada:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005ade:	ee07 ca10 	vmov	s14, ip
 8005ae2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005ae6:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8005aea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af0:	ee06 3a90 	vmov	s13, r3
 8005af4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005af8:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005afc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b10:	e038      	b.n	8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b12:	ee07 ca10 	vmov	s14, ip
 8005b16:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005b1a:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8005b1e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005b22:	4b51      	ldr	r3, [pc, #324]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2a:	ee06 3a90 	vmov	s13, r3
 8005b2e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005b32:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005b36:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b4a:	e01b      	b.n	8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b4c:	ee07 ca10 	vmov	s14, ip
 8005b50:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005b54:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8005b58:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005b5c:	4b42      	ldr	r3, [pc, #264]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	ee06 3a90 	vmov	s13, r3
 8005b68:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005b6c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005b70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b80:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005b84:	4a38      	ldr	r2, [pc, #224]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005b86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005b88:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b9c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005ba0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005ba4:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ba8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005baa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bba:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005bbe:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005bc2:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005bc6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bc8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005bcc:	ee07 3a90 	vmov	s15, r3
 8005bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005bdc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005be0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bea:	ee07 ca10 	vmov	s14, ip
 8005bee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005bf2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8005c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1fc>
 8005bf6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c02:	ee06 3a90 	vmov	s13, r3
 8005c06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005c0a:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005c0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005c22:	e7af      	b.n	8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c24:	ee07 ca10 	vmov	s14, ip
 8005c28:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005c2c:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8005c30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	ee06 3a90 	vmov	s13, r3
 8005c40:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005c44:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8005c48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c58:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005c5c:	e792      	b.n	8005b84 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c62:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c64:	6083      	str	r3, [r0, #8]
}
 8005c66:	e7bd      	b.n	8005be4 <HAL_RCCEx_GetPLL3ClockFreq+0x164>
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	03d09000 	.word	0x03d09000
 8005c70:	39000000 	.word	0x39000000
 8005c74:	4c742400 	.word	0x4c742400
 8005c78:	4a742400 	.word	0x4a742400
 8005c7c:	4bb71b00 	.word	0x4bb71b00

08005c80 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8005c80:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c82:	4b79      	ldr	r3, [pc, #484]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005c84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005c86:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005c88:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c8e:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c94:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8005c98:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8005c9c:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8005ca0:	f000 80dd 	beq.w	8005e5e <HAL_RCCEx_GetPLL1ClockFreq+0x1de>
 8005ca4:	f002 0203 	and.w	r2, r2, #3
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8005cb0:	2a01      	cmp	r2, #1
 8005cb2:	d04b      	beq.n	8005d4c <HAL_RCCEx_GetPLL1ClockFreq+0xcc>
 8005cb4:	2a02      	cmp	r2, #2
 8005cb6:	f000 8098 	beq.w	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	f040 80b2 	bne.w	8005e24 <HAL_RCCEx_GetPLL1ClockFreq+0x1a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc0:	4b69      	ldr	r3, [pc, #420]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f013 0f20 	tst.w	r3, #32
 8005cc8:	d023      	beq.n	8005d12 <HAL_RCCEx_GetPLL1ClockFreq+0x92>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cca:	4967      	ldr	r1, [pc, #412]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005ccc:	680a      	ldr	r2, [r1, #0]
 8005cce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005cd2:	4b66      	ldr	r3, [pc, #408]	@ (8005e6c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>)
 8005cd4:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cd6:	ee07 3a10 	vmov	s14, r3
 8005cda:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005cde:	ee07 ca10 	vmov	s14, ip
 8005ce2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005ce6:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8005cea:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf0:	ee06 3a90 	vmov	s13, r3
 8005cf4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005cf8:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005cfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d10:	e038      	b.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d12:	ee07 ca10 	vmov	s14, ip
 8005d16:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005d1a:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8005e74 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8005d1e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d22:	4b51      	ldr	r3, [pc, #324]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee06 3a90 	vmov	s13, r3
 8005d2e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005d32:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005d36:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d4a:	e01b      	b.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d4c:	ee07 ca10 	vmov	s14, ip
 8005d50:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005d54:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8005e78 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8005d58:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d64:	ee06 3a90 	vmov	s13, r3
 8005d68:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005d6c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005d70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d80:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d84:	4a38      	ldr	r2, [pc, #224]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005d86:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d88:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005da0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005da4:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005da8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005daa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005dbe:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8005dc2:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005dc6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005dc8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ddc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005de0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8005de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de8:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dea:	ee07 ca10 	vmov	s14, ip
 8005dee:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005df2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x1fc>
 8005df6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e02:	ee06 3a90 	vmov	s13, r3
 8005e06:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005e0a:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005e0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005e22:	e7af      	b.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e24:	ee07 ca10 	vmov	s14, ip
 8005e28:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005e2c:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8005e74 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8005e30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005e34:	4b0c      	ldr	r3, [pc, #48]	@ (8005e68 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3c:	ee06 3a90 	vmov	s13, r3
 8005e40:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005e44:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8005e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
 8005e48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e58:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005e5c:	e792      	b.n	8005d84 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e62:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e64:	6083      	str	r3, [r0, #8]
}
 8005e66:	e7bd      	b.n	8005de4 <HAL_RCCEx_GetPLL1ClockFreq+0x164>
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	39000000 	.word	0x39000000
 8005e74:	4c742400 	.word	0x4c742400
 8005e78:	4a742400 	.word	0x4a742400
 8005e7c:	4bb71b00 	.word	0x4bb71b00

08005e80 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8005e80:	b500      	push	{lr}
 8005e82:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e84:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	d028      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e8c:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8005e90:	430b      	orrs	r3, r1
 8005e92:	d077      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e94:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	f000 80ce 	beq.w	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e9e:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f000 8126 	beq.w	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005ea8:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005eac:	430b      	orrs	r3, r1
 8005eae:	f000 8185 	beq.w	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005eb2:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	f000 81ce 	beq.w	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ebc:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	f000 8211 	beq.w	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005ec6:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	f000 822a 	beq.w	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ed0:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8005ed4:	4308      	orrs	r0, r1
 8005ed6:	f000 827b 	beq.w	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
    frequency = 0;
 8005eda:	2000      	movs	r0, #0
 8005edc:	e00c      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005ede:	4b95      	ldr	r3, [pc, #596]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee2:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	f200 829c 	bhi.w	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
 8005eec:	e8df f003 	tbb	[pc, r3]
 8005ef0:	031b1107 	.word	0x031b1107
 8005ef4:	25          	.byte	0x25
 8005ef5:	00          	.byte	0x00
 8005ef6:	4890      	ldr	r0, [pc, #576]	@ (8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
}
 8005ef8:	b00b      	add	sp, #44	@ 0x2c
 8005efa:	f85d fb04 	ldr.w	pc, [sp], #4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005efe:	4b8d      	ldr	r3, [pc, #564]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005f06:	d0f7      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f08:	a807      	add	r0, sp, #28
 8005f0a:	f7ff feb9 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f0e:	9808      	ldr	r0, [sp, #32]
 8005f10:	e7f2      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f12:	4b88      	ldr	r3, [pc, #544]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005f1a:	d0ed      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1c:	a804      	add	r0, sp, #16
 8005f1e:	f7ff fcaf 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f22:	9804      	ldr	r0, [sp, #16]
 8005f24:	e7e8      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f26:	4b83      	ldr	r3, [pc, #524]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005f2e:	d0e3      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f30:	a801      	add	r0, sp, #4
 8005f32:	f7ff fda5 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f36:	9801      	ldr	r0, [sp, #4]
 8005f38:	e7de      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f3c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005f3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	f012 0f04 	tst.w	r2, #4
 8005f48:	d007      	beq.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005f4a:	b933      	cbnz	r3, 8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f4c:	4b79      	ldr	r3, [pc, #484]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f54:	4879      	ldr	r0, [pc, #484]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f56:	40d8      	lsrs	r0, r3
 8005f58:	e7ce      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f5a:	4a76      	ldr	r2, [pc, #472]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005f62:	d003      	beq.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005f64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f68:	f000 825e 	beq.w	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f6c:	4a71      	ldr	r2, [pc, #452]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005f74:	f000 825a 	beq.w	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 8005f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7c:	f000 8258 	beq.w	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          frequency = 0;
 8005f80:	2000      	movs	r0, #0
 8005f82:	e7b9      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f84:	4b6b      	ldr	r3, [pc, #428]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f88:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f90:	d033      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005f92:	d916      	bls.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005f94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f98:	f000 824c 	beq.w	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8005f9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fa0:	d11f      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fa2:	4a64      	ldr	r2, [pc, #400]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fa4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005fa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	f012 0f04 	tst.w	r2, #4
 8005fb0:	d02e      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005fb2:	bb6b      	cbnz	r3, 8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb4:	4b5f      	ldr	r3, [pc, #380]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005fbc:	485f      	ldr	r0, [pc, #380]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fbe:	40d8      	lsrs	r0, r3
 8005fc0:	e79a      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (saiclocksource)
 8005fc2:	b183      	cbz	r3, 8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005fc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fc8:	d109      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fca:	4b5a      	ldr	r3, [pc, #360]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005fd2:	d091      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd4:	a804      	add	r0, sp, #16
 8005fd6:	f7ff fc53 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005fda:	9804      	ldr	r0, [sp, #16]
 8005fdc:	e78c      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        frequency = 0;
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e78a      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e788      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fe6:	4b53      	ldr	r3, [pc, #332]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005fee:	d083      	beq.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff0:	a807      	add	r0, sp, #28
 8005ff2:	f7ff fe45 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ff6:	9808      	ldr	r0, [sp, #32]
 8005ff8:	e77e      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006002:	f43f af79 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006006:	a801      	add	r0, sp, #4
 8006008:	f7ff fd3a 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800600c:	9801      	ldr	r0, [sp, #4]
 800600e:	e773      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006010:	4a48      	ldr	r2, [pc, #288]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8006018:	d003      	beq.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800601a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800601e:	f000 820b 	beq.w	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006022:	4a44      	ldr	r2, [pc, #272]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800602a:	f000 8207 	beq.w	800643c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800602e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006032:	f000 8205 	beq.w	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          frequency = 0;
 8006036:	2000      	movs	r0, #0
 8006038:	e75e      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800603a:	4b3e      	ldr	r3, [pc, #248]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8006042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006046:	d035      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006048:	d916      	bls.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800604a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800604e:	f000 81f9 	beq.w	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006056:	d120      	bne.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006058:	4a36      	ldr	r2, [pc, #216]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800605a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800605c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	f012 0f04 	tst.w	r2, #4
 8006066:	d030      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8006068:	bb7b      	cbnz	r3, 80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800606a:	4b32      	ldr	r3, [pc, #200]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006072:	4832      	ldr	r0, [pc, #200]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006074:	40d8      	lsrs	r0, r3
 8006076:	e73f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (saiclocksource)
 8006078:	b18b      	cbz	r3, 800609e <HAL_RCCEx_GetPeriphCLKFreq+0x21e>
 800607a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800607e:	d10a      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006080:	4b2c      	ldr	r3, [pc, #176]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006088:	f43f af36 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608c:	a804      	add	r0, sp, #16
 800608e:	f7ff fbf7 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006092:	9804      	ldr	r0, [sp, #16]
 8006094:	e730      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        frequency = 0;
 8006096:	2000      	movs	r0, #0
 8006098:	e72e      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 800609a:	2000      	movs	r0, #0
 800609c:	e72c      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800609e:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80060a6:	f43f af27 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060aa:	a807      	add	r0, sp, #28
 80060ac:	f7ff fde8 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060b0:	9808      	ldr	r0, [sp, #32]
 80060b2:	e721      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80060bc:	f43f af1c 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c0:	a801      	add	r0, sp, #4
 80060c2:	f7ff fcdd 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060c6:	9801      	ldr	r0, [sp, #4]
 80060c8:	e716      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80060d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d8:	f000 81b6 	beq.w	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060dc:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80060e4:	f000 81b2 	beq.w	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80060e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ec:	f000 81b0 	beq.w	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
          frequency = 0;
 80060f0:	2000      	movs	r0, #0
 80060f2:	e701      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80060f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 80060fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006100:	d03c      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8006102:	d91d      	bls.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006104:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006108:	f000 81a4 	beq.w	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800610c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006110:	d127      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006112:	4a08      	ldr	r2, [pc, #32]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006114:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8006116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f012 0f04 	tst.w	r2, #4
 8006120:	d037      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d135      	bne.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006126:	4b03      	ldr	r3, [pc, #12]	@ (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800612e:	4803      	ldr	r0, [pc, #12]	@ (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006130:	40d8      	lsrs	r0, r3
 8006132:	e6e1      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8006134:	58024400 	.word	0x58024400
 8006138:	00bb8000 	.word	0x00bb8000
 800613c:	03d09000 	.word	0x03d09000
    switch (srcclk)
 8006140:	b18b      	cbz	r3, 8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006146:	d10a      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006148:	4b9d      	ldr	r3, [pc, #628]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006150:	f43f aed2 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006154:	a804      	add	r0, sp, #16
 8006156:	f7ff fb93 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800615a:	9804      	ldr	r0, [sp, #16]
 800615c:	e6cc      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        frequency = 0;
 800615e:	2000      	movs	r0, #0
 8006160:	e6ca      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8006162:	2000      	movs	r0, #0
 8006164:	e6c8      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006166:	4b96      	ldr	r3, [pc, #600]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800616e:	f43f aec3 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006172:	a807      	add	r0, sp, #28
 8006174:	f7ff fd84 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006178:	9808      	ldr	r0, [sp, #32]
 800617a:	e6bd      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800617c:	4b90      	ldr	r3, [pc, #576]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006184:	f43f aeb8 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006188:	a801      	add	r0, sp, #4
 800618a:	f7ff fc79 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800618e:	9801      	ldr	r0, [sp, #4]
 8006190:	e6b2      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006192:	4a8b      	ldr	r2, [pc, #556]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800619a:	d003      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800619c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a0:	f000 815a 	beq.w	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061a4:	4a86      	ldr	r2, [pc, #536]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80061ac:	f000 8156 	beq.w	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80061b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b4:	f000 8154 	beq.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
          frequency = 0;
 80061b8:	2000      	movs	r0, #0
 80061ba:	e69d      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80061bc:	4b80      	ldr	r3, [pc, #512]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80061c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061c8:	d032      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80061ca:	d80b      	bhi.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d0:	d018      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80061d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d6:	d020      	beq.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80061d8:	b913      	cbnz	r3, 80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 80061da:	f7fe fa9b 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
        break;
 80061de:	e68b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 80061e0:	2000      	movs	r0, #0
 80061e2:	e689      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80061e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061e8:	d02e      	beq.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80061ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061ee:	d107      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061f0:	4b73      	ldr	r3, [pc, #460]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80061f8:	f43f ae7e 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 80061fc:	4871      	ldr	r0, [pc, #452]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80061fe:	e67b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006200:	2000      	movs	r0, #0
 8006202:	e679      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006204:	4b6e      	ldr	r3, [pc, #440]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800620c:	f43f ae74 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006210:	a804      	add	r0, sp, #16
 8006212:	f7ff fb35 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006216:	9805      	ldr	r0, [sp, #20]
 8006218:	e66e      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800621a:	4b69      	ldr	r3, [pc, #420]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006222:	f43f ae69 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006226:	a801      	add	r0, sp, #4
 8006228:	f7ff fc2a 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800622c:	9802      	ldr	r0, [sp, #8]
 800622e:	e663      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006230:	4b63      	ldr	r3, [pc, #396]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f010 0004 	ands.w	r0, r0, #4
 8006238:	f43f ae5e 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006242:	4861      	ldr	r0, [pc, #388]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8006244:	40d8      	lsrs	r0, r3
 8006246:	e657      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006248:	4b5d      	ldr	r3, [pc, #372]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006250:	f43f ae52 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006254:	485d      	ldr	r0, [pc, #372]	@ (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006256:	e64f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006258:	4b59      	ldr	r3, [pc, #356]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800625a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006264:	d010      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8006266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800626a:	d018      	beq.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 80f9 	bne.w	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006272:	4b53      	ldr	r3, [pc, #332]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800627a:	f43f ae3d 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627e:	a804      	add	r0, sp, #16
 8006280:	f7ff fafe 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006284:	9804      	ldr	r0, [sp, #16]
 8006286:	e637      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006288:	4b4d      	ldr	r3, [pc, #308]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006290:	f43f ae32 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006294:	a801      	add	r0, sp, #4
 8006296:	f7ff fbf3 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800629a:	9803      	ldr	r0, [sp, #12]
 800629c:	e62c      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800629e:	4a48      	ldr	r2, [pc, #288]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062a0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80062a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	f012 0f04 	tst.w	r2, #4
 80062ac:	d007      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 80062ae:	b933      	cbnz	r3, 80062be <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b0:	4b43      	ldr	r3, [pc, #268]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80062b8:	4843      	ldr	r0, [pc, #268]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80062ba:	40d8      	lsrs	r0, r3
 80062bc:	e61c      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062be:	4a40      	ldr	r2, [pc, #256]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80062c6:	d003      	beq.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80062c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062cc:	f000 80cc 	beq.w	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062d0:	4a3b      	ldr	r2, [pc, #236]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80062d8:	f000 80c8 	beq.w	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 80062dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062e0:	f000 80c6 	beq.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
          frequency = 0;
 80062e4:	2000      	movs	r0, #0
 80062e6:	e607      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80062e8:	4b35      	ldr	r3, [pc, #212]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    switch (srcclk)
 80062ec:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80062f0:	d002      	beq.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 80062f2:	b963      	cbnz	r3, 800630e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80062f4:	2000      	movs	r0, #0
 80062f6:	e5ff      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f8:	4b31      	ldr	r3, [pc, #196]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8006300:	f43f adfa 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006304:	a807      	add	r0, sp, #28
 8006306:	f7ff fcbb 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630a:	9808      	ldr	r0, [sp, #32]
 800630c:	e5f4      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800630e:	4b2c      	ldr	r3, [pc, #176]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006316:	f43f adef 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631a:	a804      	add	r0, sp, #16
 800631c:	f7ff fab0 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006320:	9806      	ldr	r0, [sp, #24]
 8006322:	e5e9      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006324:	4b26      	ldr	r3, [pc, #152]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800632c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006330:	d032      	beq.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006332:	d80b      	bhi.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8006334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006338:	d018      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800633a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633e:	d020      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006340:	b913      	cbnz	r3, 8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006342:	f7ff fa8b 	bl	800585c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8006346:	e5d7      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006348:	2000      	movs	r0, #0
 800634a:	e5d5      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 800634c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006350:	d02e      	beq.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
 8006352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006356:	d107      	bne.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006358:	4b19      	ldr	r3, [pc, #100]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006360:	f43f adca 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006364:	4817      	ldr	r0, [pc, #92]	@ (80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8006366:	e5c7      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006368:	2000      	movs	r0, #0
 800636a:	e5c5      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800636c:	4b14      	ldr	r3, [pc, #80]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006374:	f43f adc0 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006378:	a804      	add	r0, sp, #16
 800637a:	f7ff fa81 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800637e:	9805      	ldr	r0, [sp, #20]
 8006380:	e5ba      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006382:	4b0f      	ldr	r3, [pc, #60]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800638a:	f43f adb5 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638e:	a801      	add	r0, sp, #4
 8006390:	f7ff fb76 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006394:	9802      	ldr	r0, [sp, #8]
 8006396:	e5af      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006398:	4b09      	ldr	r3, [pc, #36]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	f010 0004 	ands.w	r0, r0, #4
 80063a0:	f43f adaa 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063aa:	4807      	ldr	r0, [pc, #28]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 80063ac:	40d8      	lsrs	r0, r3
 80063ae:	e5a3      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80063b0:	4b03      	ldr	r3, [pc, #12]	@ (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80063b8:	f43f ad9e 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 80063bc:	4803      	ldr	r0, [pc, #12]	@ (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063be:	e59b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80063c0:	58024400 	.word	0x58024400
 80063c4:	016e3600 	.word	0x016e3600
 80063c8:	03d09000 	.word	0x03d09000
 80063cc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80063d0:	4b29      	ldr	r3, [pc, #164]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 80063d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063dc:	d00c      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80063de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e2:	d014      	beq.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d145      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063e8:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80063f0:	f43f ad82 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 80063f4:	4821      	ldr	r0, [pc, #132]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 80063f6:	e57f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063f8:	4b1f      	ldr	r3, [pc, #124]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8006400:	f43f ad7a 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006404:	a807      	add	r0, sp, #28
 8006406:	f7ff fc3b 	bl	8005c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800640a:	9808      	ldr	r0, [sp, #32]
 800640c:	e574      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800640e:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006416:	f43f ad6f 	beq.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800641a:	a804      	add	r0, sp, #16
 800641c:	f7ff fa30 	bl	8005880 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006420:	9805      	ldr	r0, [sp, #20]
 8006422:	e569      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        frequency = 0;
 8006424:	2000      	movs	r0, #0
 8006426:	e567      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006428:	4815      	ldr	r0, [pc, #84]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800642a:	e565      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800642c:	2000      	movs	r0, #0
 800642e:	e563      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006430:	4812      	ldr	r0, [pc, #72]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006432:	e561      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (saiclocksource)
 8006434:	4813      	ldr	r0, [pc, #76]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006436:	e55f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006438:	4811      	ldr	r0, [pc, #68]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800643a:	e55d      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800643c:	2000      	movs	r0, #0
 800643e:	e55b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006440:	480e      	ldr	r0, [pc, #56]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006442:	e559      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (saiclocksource)
 8006444:	480f      	ldr	r0, [pc, #60]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006446:	e557      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006448:	480d      	ldr	r0, [pc, #52]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800644a:	e555      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800644c:	2000      	movs	r0, #0
 800644e:	e553      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006450:	480a      	ldr	r0, [pc, #40]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006452:	e551      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006454:	480b      	ldr	r0, [pc, #44]	@ (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8006456:	e54f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006458:	4809      	ldr	r0, [pc, #36]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800645a:	e54d      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800645c:	2000      	movs	r0, #0
 800645e:	e54b      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006460:	4806      	ldr	r0, [pc, #24]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006462:	e549      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006464:	2000      	movs	r0, #0
 8006466:	e547      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = CSI_VALUE;
 8006468:	4805      	ldr	r0, [pc, #20]	@ (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800646a:	e545      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = 0;
 800646c:	2000      	movs	r0, #0
 800646e:	e543      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          frequency = HSE_VALUE;
 8006470:	4802      	ldr	r0, [pc, #8]	@ (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 8006472:	e541      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
    switch (srcclk)
 8006474:	2000      	movs	r0, #0
  return frequency;
 8006476:	e53f      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8006478:	58024400 	.word	0x58024400
 800647c:	016e3600 	.word	0x016e3600
 8006480:	003d0900 	.word	0x003d0900
 8006484:	00bb8000 	.word	0x00bb8000

08006488 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006488:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800648a:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800648c:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800648e:	3008      	adds	r0, #8
 8006490:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8006492:	fb03 0000 	mla	r0, r3, r0, r0
 8006496:	4770      	bx	lr

08006498 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006498:	2800      	cmp	r0, #0
 800649a:	f000 81a8 	beq.w	80067ee <HAL_SPI_Init+0x356>
{
 800649e:	b570      	push	{r4, r5, r6, lr}
 80064a0:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	49a5      	ldr	r1, [pc, #660]	@ (800673c <HAL_SPI_Init+0x2a4>)
 80064a6:	4aa6      	ldr	r2, [pc, #664]	@ (8006740 <HAL_SPI_Init+0x2a8>)
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf18      	it	ne
 80064ac:	4293      	cmpne	r3, r2
 80064ae:	d012      	beq.n	80064d6 <HAL_SPI_Init+0x3e>
 80064b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_SPI_Init+0x3e>
 80064b8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00a      	beq.n	80064d6 <HAL_SPI_Init+0x3e>
 80064c0:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d006      	beq.n	80064d6 <HAL_SPI_Init+0x3e>
 80064c8:	4a9e      	ldr	r2, [pc, #632]	@ (8006744 <HAL_SPI_Init+0x2ac>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <HAL_SPI_Init+0x3e>
 80064ce:	21fe      	movs	r1, #254	@ 0xfe
 80064d0:	489d      	ldr	r0, [pc, #628]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80064d2:	f7fa fa4d 	bl	8000970 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf18      	it	ne
 80064dc:	f5b3 0f80 	cmpne.w	r3, #4194304	@ 0x400000
 80064e0:	f040 80d2 	bne.w	8006688 <HAL_SPI_Init+0x1f0>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80064e4:	68a3      	ldr	r3, [r4, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf18      	it	ne
 80064ea:	f5b3 2f80 	cmpne.w	r3, #262144	@ 0x40000
 80064ee:	d006      	beq.n	80064fe <HAL_SPI_Init+0x66>
 80064f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80064f4:	d003      	beq.n	80064fe <HAL_SPI_Init+0x66>
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064fa:	f040 80ca 	bne.w	8006692 <HAL_SPI_Init+0x1fa>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	3b03      	subs	r3, #3
 8006502:	2b1c      	cmp	r3, #28
 8006504:	f200 80cb 	bhi.w	800669e <HAL_SPI_Init+0x206>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8006508:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800650a:	2b00      	cmp	r3, #0
 800650c:	bf18      	it	ne
 800650e:	2b20      	cmpne	r3, #32
 8006510:	d024      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d022      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006516:	2b60      	cmp	r3, #96	@ 0x60
 8006518:	d020      	beq.n	800655c <HAL_SPI_Init+0xc4>
 800651a:	2b80      	cmp	r3, #128	@ 0x80
 800651c:	d01e      	beq.n	800655c <HAL_SPI_Init+0xc4>
 800651e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006520:	d01c      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006522:	2bc0      	cmp	r3, #192	@ 0xc0
 8006524:	d01a      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006526:	2be0      	cmp	r3, #224	@ 0xe0
 8006528:	d018      	beq.n	800655c <HAL_SPI_Init+0xc4>
 800652a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652e:	d015      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006530:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8006534:	d012      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006536:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800653a:	d00f      	beq.n	800655c <HAL_SPI_Init+0xc4>
 800653c:	f5b3 7fb0 	cmp.w	r3, #352	@ 0x160
 8006540:	d00c      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006542:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8006546:	d009      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006548:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 800654c:	d006      	beq.n	800655c <HAL_SPI_Init+0xc4>
 800654e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006552:	d003      	beq.n	800655c <HAL_SPI_Init+0xc4>
 8006554:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8006558:	f040 80a7 	bne.w	80066aa <HAL_SPI_Init+0x212>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800655c:	69a3      	ldr	r3, [r4, #24]
 800655e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006562:	bf18      	it	ne
 8006564:	2b00      	cmpne	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_SPI_Init+0xd8>
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800656c:	f040 80a3 	bne.w	80066b6 <HAL_SPI_Init+0x21e>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8006570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006576:	bf18      	it	ne
 8006578:	2b00      	cmpne	r3, #0
 800657a:	f040 80a2 	bne.w	80066c2 <HAL_SPI_Init+0x22a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800657e:	69e3      	ldr	r3, [r4, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf18      	it	ne
 8006584:	f1b3 5f80 	cmpne.w	r3, #268435456	@ 0x10000000
 8006588:	d012      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800658e:	d00f      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 8006590:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006594:	d00c      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659a:	d009      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 800659c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065a0:	d006      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 80065a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80065a6:	d003      	beq.n	80065b0 <HAL_SPI_Init+0x118>
 80065a8:	f1b3 4fe0 	cmp.w	r3, #1879048192	@ 0x70000000
 80065ac:	f040 808f 	bne.w	80066ce <HAL_SPI_Init+0x236>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80065b0:	6a23      	ldr	r3, [r4, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf18      	it	ne
 80065b6:	f5b3 0f00 	cmpne.w	r3, #8388608	@ 0x800000
 80065ba:	f040 808e 	bne.w	80066da <HAL_SPI_Init+0x242>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80065be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bf18      	it	ne
 80065c4:	f5b3 2f00 	cmpne.w	r3, #524288	@ 0x80000
 80065c8:	f040 808d 	bne.w	80066e6 <HAL_SPI_Init+0x24e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80065ce:	b96b      	cbnz	r3, 80065ec <HAL_SPI_Init+0x154>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf18      	it	ne
 80065d6:	f1b3 7f00 	cmpne.w	r3, #33554432	@ 0x2000000
 80065da:	f040 808a 	bne.w	80066f2 <HAL_SPI_Init+0x25a>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80065de:	6963      	ldr	r3, [r4, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf18      	it	ne
 80065e4:	f1b3 7f80 	cmpne.w	r3, #16777216	@ 0x1000000
 80065e8:	f040 8089 	bne.w	80066fe <HAL_SPI_Init+0x266>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62a3      	str	r3, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065f0:	6825      	ldr	r5, [r4, #0]
 80065f2:	4b52      	ldr	r3, [pc, #328]	@ (800673c <HAL_SPI_Init+0x2a4>)
 80065f4:	4e52      	ldr	r6, [pc, #328]	@ (8006740 <HAL_SPI_Init+0x2a8>)
 80065f6:	429d      	cmp	r5, r3
 80065f8:	bf18      	it	ne
 80065fa:	42b5      	cmpne	r5, r6
 80065fc:	bf14      	ite	ne
 80065fe:	2601      	movne	r6, #1
 8006600:	2600      	moveq	r6, #0
 8006602:	d007      	beq.n	8006614 <HAL_SPI_Init+0x17c>
 8006604:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
 8006608:	429d      	cmp	r5, r3
 800660a:	d003      	beq.n	8006614 <HAL_SPI_Init+0x17c>
 800660c:	68e3      	ldr	r3, [r4, #12]
 800660e:	2b0f      	cmp	r3, #15
 8006610:	f200 80ef 	bhi.w	80067f2 <HAL_SPI_Init+0x35a>
  packet_length = SPI_GetPacketSize(hspi);
 8006614:	4620      	mov	r0, r4
 8006616:	f7ff ff37 	bl	8006488 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800661a:	b12e      	cbz	r6, 8006628 <HAL_SPI_Init+0x190>
 800661c:	4b4b      	ldr	r3, [pc, #300]	@ (800674c <HAL_SPI_Init+0x2b4>)
 800661e:	429d      	cmp	r5, r3
 8006620:	d002      	beq.n	8006628 <HAL_SPI_Init+0x190>
 8006622:	2808      	cmp	r0, #8
 8006624:	f200 80e7 	bhi.w	80067f6 <HAL_SPI_Init+0x35e>
 8006628:	4a44      	ldr	r2, [pc, #272]	@ (800673c <HAL_SPI_Init+0x2a4>)
 800662a:	4b45      	ldr	r3, [pc, #276]	@ (8006740 <HAL_SPI_Init+0x2a8>)
 800662c:	429d      	cmp	r5, r3
 800662e:	bf18      	it	ne
 8006630:	4295      	cmpne	r5, r2
 8006632:	d003      	beq.n	800663c <HAL_SPI_Init+0x1a4>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006638:	429d      	cmp	r5, r3
 800663a:	d102      	bne.n	8006642 <HAL_SPI_Init+0x1aa>
 800663c:	2810      	cmp	r0, #16
 800663e:	f200 80dc 	bhi.w	80067fa <HAL_SPI_Init+0x362>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006642:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8006646:	2b00      	cmp	r3, #0
 8006648:	d05f      	beq.n	800670a <HAL_SPI_Init+0x272>
  hspi->State = HAL_SPI_STATE_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	6813      	ldr	r3, [r2, #0]
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006662:	69a1      	ldr	r1, [r4, #24]
 8006664:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8006668:	d055      	beq.n	8006716 <HAL_SPI_Init+0x27e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8006670:	d06e      	beq.n	8006750 <HAL_SPI_Init+0x2b8>
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	2b06      	cmp	r3, #6
 8006676:	d96b      	bls.n	8006750 <HAL_SPI_Init+0x2b8>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006678:	6821      	ldr	r1, [r4, #0]
 800667a:	680b      	ldr	r3, [r1, #0]
 800667c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006680:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8006682:	4303      	orrs	r3, r0
 8006684:	600b      	str	r3, [r1, #0]
 8006686:	e068      	b.n	800675a <HAL_SPI_Init+0x2c2>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006688:	21ff      	movs	r1, #255	@ 0xff
 800668a:	482f      	ldr	r0, [pc, #188]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 800668c:	f7fa f970 	bl	8000970 <assert_failed>
 8006690:	e728      	b.n	80064e4 <HAL_SPI_Init+0x4c>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006696:	482c      	ldr	r0, [pc, #176]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 8006698:	f7fa f96a 	bl	8000970 <assert_failed>
 800669c:	e72f      	b.n	80064fe <HAL_SPI_Init+0x66>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800669e:	f240 1101 	movw	r1, #257	@ 0x101
 80066a2:	4829      	ldr	r0, [pc, #164]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066a4:	f7fa f964 	bl	8000970 <assert_failed>
 80066a8:	e72e      	b.n	8006508 <HAL_SPI_Init+0x70>
  assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80066aa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80066ae:	4826      	ldr	r0, [pc, #152]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066b0:	f7fa f95e 	bl	8000970 <assert_failed>
 80066b4:	e752      	b.n	800655c <HAL_SPI_Init+0xc4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80066b6:	f240 1103 	movw	r1, #259	@ 0x103
 80066ba:	4823      	ldr	r0, [pc, #140]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066bc:	f7fa f958 	bl	8000970 <assert_failed>
 80066c0:	e756      	b.n	8006570 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80066c2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80066c6:	4820      	ldr	r0, [pc, #128]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066c8:	f7fa f952 	bl	8000970 <assert_failed>
 80066cc:	e757      	b.n	800657e <HAL_SPI_Init+0xe6>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80066ce:	f240 1105 	movw	r1, #261	@ 0x105
 80066d2:	481d      	ldr	r0, [pc, #116]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066d4:	f7fa f94c 	bl	8000970 <assert_failed>
 80066d8:	e76a      	b.n	80065b0 <HAL_SPI_Init+0x118>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80066da:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80066de:	481a      	ldr	r0, [pc, #104]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066e0:	f7fa f946 	bl	8000970 <assert_failed>
 80066e4:	e76b      	b.n	80065be <HAL_SPI_Init+0x126>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80066e6:	f240 1107 	movw	r1, #263	@ 0x107
 80066ea:	4817      	ldr	r0, [pc, #92]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066ec:	f7fa f940 	bl	8000970 <assert_failed>
 80066f0:	e76c      	b.n	80065cc <HAL_SPI_Init+0x134>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80066f2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80066f6:	4814      	ldr	r0, [pc, #80]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 80066f8:	f7fa f93a 	bl	8000970 <assert_failed>
 80066fc:	e76f      	b.n	80065de <HAL_SPI_Init+0x146>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80066fe:	f240 110b 	movw	r1, #267	@ 0x10b
 8006702:	4811      	ldr	r0, [pc, #68]	@ (8006748 <HAL_SPI_Init+0x2b0>)
 8006704:	f7fa f934 	bl	8000970 <assert_failed>
 8006708:	e770      	b.n	80065ec <HAL_SPI_Init+0x154>
    hspi->Lock = HAL_UNLOCKED;
 800670a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 800670e:	4620      	mov	r0, r4
 8006710:	f7fa f988 	bl	8000a24 <HAL_SPI_MspInit>
 8006714:	e799      	b.n	800664a <HAL_SPI_Init+0x1b2>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006716:	6861      	ldr	r1, [r4, #4]
 8006718:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800671c:	d006      	beq.n	800672c <HAL_SPI_Init+0x294>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800671e:	2900      	cmp	r1, #0
 8006720:	d1a3      	bne.n	800666a <HAL_SPI_Init+0x1d2>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006722:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006724:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006728:	d19f      	bne.n	800666a <HAL_SPI_Init+0x1d2>
 800672a:	e002      	b.n	8006732 <HAL_SPI_Init+0x29a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800672c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800672e:	2800      	cmp	r0, #0
 8006730:	d1f5      	bne.n	800671e <HAL_SPI_Init+0x286>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e796      	b.n	800666a <HAL_SPI_Init+0x1d2>
 800673c:	40013000 	.word	0x40013000
 8006740:	40003800 	.word	0x40003800
 8006744:	58001400 	.word	0x58001400
 8006748:	08009cf4 	.word	0x08009cf4
 800674c:	40003c00 	.word	0x40003c00
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	680b      	ldr	r3, [r1, #0]
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800675a:	69e3      	ldr	r3, [r4, #28]
 800675c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800675e:	430b      	orrs	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006764:	4313      	orrs	r3, r2
 8006766:	68e1      	ldr	r1, [r4, #12]
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	430b      	orrs	r3, r1
 800676c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800676e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006770:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006772:	4313      	orrs	r3, r2
 8006774:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006776:	4313      	orrs	r3, r2
 8006778:	69a2      	ldr	r2, [r4, #24]
 800677a:	4313      	orrs	r3, r2
 800677c:	6922      	ldr	r2, [r4, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	6962      	ldr	r2, [r4, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	6a22      	ldr	r2, [r4, #32]
 8006786:	4313      	orrs	r3, r2
 8006788:	6862      	ldr	r2, [r4, #4]
 800678a:	4313      	orrs	r3, r2
 800678c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800678e:	4313      	orrs	r3, r2
 8006790:	68a2      	ldr	r2, [r4, #8]
 8006792:	4313      	orrs	r3, r2
 8006794:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8006796:	4313      	orrs	r3, r2
 8006798:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	430b      	orrs	r3, r1
 800679e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	b96b      	cbnz	r3, 80067c0 <HAL_SPI_Init+0x328>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	6893      	ldr	r3, [r2, #8]
 80067a8:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80067ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80067b0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80067b2:	6822      	ldr	r2, [r4, #0]
 80067b4:	6893      	ldr	r3, [r2, #8]
 80067b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067be:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80067ca:	6863      	ldr	r3, [r4, #4]
 80067cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80067d0:	d006      	beq.n	80067e0 <HAL_SPI_Init+0x348>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	68d3      	ldr	r3, [r2, #12]
 80067d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067da:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80067dc:	430b      	orrs	r3, r1
 80067de:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e0:	2000      	movs	r0, #0
 80067e2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
}
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80067ee:	2001      	movs	r0, #1
}
 80067f0:	4770      	bx	lr
    return HAL_ERROR;
 80067f2:	2001      	movs	r0, #1
 80067f4:	e7fa      	b.n	80067ec <HAL_SPI_Init+0x354>
    return HAL_ERROR;
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7f8      	b.n	80067ec <HAL_SPI_Init+0x354>
 80067fa:	2001      	movs	r0, #1
 80067fc:	e7f6      	b.n	80067ec <HAL_SPI_Init+0x354>
 80067fe:	bf00      	nop

08006800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006804:	6a02      	ldr	r2, [r0, #32]
 8006806:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800680a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800680e:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006810:	4e14      	ldr	r6, [pc, #80]	@ (8006864 <TIM_OC5_SetConfig+0x64>)
 8006812:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006814:	680d      	ldr	r5, [r1, #0]
 8006816:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006818:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800681c:	688c      	ldr	r4, [r1, #8]
 800681e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	4d11      	ldr	r5, [pc, #68]	@ (8006868 <TIM_OC5_SetConfig+0x68>)
 8006824:	4c11      	ldr	r4, [pc, #68]	@ (800686c <TIM_OC5_SetConfig+0x6c>)
 8006826:	42a0      	cmp	r0, r4
 8006828:	bf18      	it	ne
 800682a:	42a8      	cmpne	r0, r5
 800682c:	d00d      	beq.n	800684a <TIM_OC5_SetConfig+0x4a>
 800682e:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 8006832:	42a0      	cmp	r0, r4
 8006834:	bf14      	ite	ne
 8006836:	2400      	movne	r4, #0
 8006838:	2401      	moveq	r4, #1
 800683a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800683e:	42a8      	cmp	r0, r5
 8006840:	d003      	beq.n	800684a <TIM_OC5_SetConfig+0x4a>
 8006842:	b914      	cbnz	r4, 800684a <TIM_OC5_SetConfig+0x4a>
 8006844:	4c0a      	ldr	r4, [pc, #40]	@ (8006870 <TIM_OC5_SetConfig+0x70>)
 8006846:	42a0      	cmp	r0, r4
 8006848:	d104      	bne.n	8006854 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800684a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800684e:	694c      	ldr	r4, [r1, #20]
 8006850:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006854:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006856:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006858:	684a      	ldr	r2, [r1, #4]
 800685a:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685c:	6203      	str	r3, [r0, #32]
}
 800685e:	bc70      	pop	{r4, r5, r6}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	fffeff8f 	.word	0xfffeff8f
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400
 8006870:	40014800 	.word	0x40014800

08006874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006878:	6a02      	ldr	r2, [r0, #32]
 800687a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800687e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006884:	4a14      	ldr	r2, [pc, #80]	@ (80068d8 <TIM_OC6_SetConfig+0x64>)
 8006886:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	680d      	ldr	r5, [r1, #0]
 800688a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800688e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006892:	688d      	ldr	r5, [r1, #8]
 8006894:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	4e10      	ldr	r6, [pc, #64]	@ (80068dc <TIM_OC6_SetConfig+0x68>)
 800689a:	4d11      	ldr	r5, [pc, #68]	@ (80068e0 <TIM_OC6_SetConfig+0x6c>)
 800689c:	42a8      	cmp	r0, r5
 800689e:	bf18      	it	ne
 80068a0:	42b0      	cmpne	r0, r6
 80068a2:	d00d      	beq.n	80068c0 <TIM_OC6_SetConfig+0x4c>
 80068a4:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 80068a8:	42a8      	cmp	r0, r5
 80068aa:	bf14      	ite	ne
 80068ac:	2500      	movne	r5, #0
 80068ae:	2501      	moveq	r5, #1
 80068b0:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 80068b4:	42b0      	cmp	r0, r6
 80068b6:	d003      	beq.n	80068c0 <TIM_OC6_SetConfig+0x4c>
 80068b8:	b915      	cbnz	r5, 80068c0 <TIM_OC6_SetConfig+0x4c>
 80068ba:	4d0a      	ldr	r5, [pc, #40]	@ (80068e4 <TIM_OC6_SetConfig+0x70>)
 80068bc:	42a8      	cmp	r0, r5
 80068be:	d104      	bne.n	80068ca <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068c0:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068c4:	694d      	ldr	r5, [r1, #20]
 80068c6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068cc:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068ce:	684a      	ldr	r2, [r1, #4]
 80068d0:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d2:	6203      	str	r3, [r0, #32]
}
 80068d4:	bc70      	pop	{r4, r5, r6}
 80068d6:	4770      	bx	lr
 80068d8:	feff8fff 	.word	0xfeff8fff
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40010400 	.word	0x40010400
 80068e4:	40014800 	.word	0x40014800

080068e8 <TIM_OC1_SetConfig>:
{
 80068e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 80068f0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f2:	6a02      	ldr	r2, [r0, #32]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80068fa:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80068fc:	6981      	ldr	r1, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fe:	4a34      	ldr	r2, [pc, #208]	@ (80069d0 <TIM_OC1_SetConfig+0xe8>)
 8006900:	400a      	ands	r2, r1
  tmpccmrx |= OC_Config->OCMode;
 8006902:	6829      	ldr	r1, [r5, #0]
 8006904:	ea41 0802 	orr.w	r8, r1, r2
  tmpccer &= ~TIM_CCER_CC1P;
 8006908:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800690c:	68ae      	ldr	r6, [r5, #8]
 800690e:	431e      	orrs	r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006910:	4a30      	ldr	r2, [pc, #192]	@ (80069d4 <TIM_OC1_SetConfig+0xec>)
 8006912:	4b31      	ldr	r3, [pc, #196]	@ (80069d8 <TIM_OC1_SetConfig+0xf0>)
 8006914:	4298      	cmp	r0, r3
 8006916:	bf18      	it	ne
 8006918:	4290      	cmpne	r0, r2
 800691a:	bf0c      	ite	eq
 800691c:	f04f 0901 	moveq.w	r9, #1
 8006920:	f04f 0900 	movne.w	r9, #0
 8006924:	d00d      	beq.n	8006942 <TIM_OC1_SetConfig+0x5a>
 8006926:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800692a:	4298      	cmp	r0, r3
 800692c:	bf14      	ite	ne
 800692e:	2300      	movne	r3, #0
 8006930:	2301      	moveq	r3, #1
 8006932:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8006936:	4290      	cmp	r0, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC1_SetConfig+0x5a>
 800693a:	b913      	cbnz	r3, 8006942 <TIM_OC1_SetConfig+0x5a>
 800693c:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <TIM_OC1_SetConfig+0xf4>)
 800693e:	4298      	cmp	r0, r3
 8006940:	d10a      	bne.n	8006958 <TIM_OC1_SetConfig+0x70>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006942:	68eb      	ldr	r3, [r5, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf18      	it	ne
 8006948:	2b08      	cmpne	r3, #8
 800694a:	d12e      	bne.n	80069aa <TIM_OC1_SetConfig+0xc2>
    tmpccer &= ~TIM_CCER_CC1NP;
 800694c:	f026 0608 	bic.w	r6, r6, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006950:	68eb      	ldr	r3, [r5, #12]
 8006952:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006954:	f023 0604 	bic.w	r6, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	d10b      	bne.n	8006976 <TIM_OC1_SetConfig+0x8e>
 800695e:	4b20      	ldr	r3, [pc, #128]	@ (80069e0 <TIM_OC1_SetConfig+0xf8>)
 8006960:	429c      	cmp	r4, r3
 8006962:	bf14      	ite	ne
 8006964:	2300      	movne	r3, #0
 8006966:	2301      	moveq	r3, #1
 8006968:	4a1e      	ldr	r2, [pc, #120]	@ (80069e4 <TIM_OC1_SetConfig+0xfc>)
 800696a:	4294      	cmp	r4, r2
 800696c:	d003      	beq.n	8006976 <TIM_OC1_SetConfig+0x8e>
 800696e:	b913      	cbnz	r3, 8006976 <TIM_OC1_SetConfig+0x8e>
 8006970:	4b1a      	ldr	r3, [pc, #104]	@ (80069dc <TIM_OC1_SetConfig+0xf4>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d111      	bne.n	800699a <TIM_OC1_SetConfig+0xb2>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006976:	69ab      	ldr	r3, [r5, #24]
 8006978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697c:	bf18      	it	ne
 800697e:	2b00      	cmpne	r3, #0
 8006980:	d119      	bne.n	80069b6 <TIM_OC1_SetConfig+0xce>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006982:	696b      	ldr	r3, [r5, #20]
 8006984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006988:	bf18      	it	ne
 800698a:	2b00      	cmpne	r3, #0
 800698c:	d119      	bne.n	80069c2 <TIM_OC1_SetConfig+0xda>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698e:	f427 7740 	bic.w	r7, r7, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	696b      	ldr	r3, [r5, #20]
 8006994:	433b      	orrs	r3, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8006996:	69af      	ldr	r7, [r5, #24]
 8006998:	431f      	orrs	r7, r3
  TIMx->CR2 = tmpcr2;
 800699a:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800699c:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80069a0:	686b      	ldr	r3, [r5, #4]
 80069a2:	6363      	str	r3, [r4, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80069a4:	6226      	str	r6, [r4, #32]
}
 80069a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80069aa:	f641 316b 	movw	r1, #7019	@ 0x1b6b
 80069ae:	480e      	ldr	r0, [pc, #56]	@ (80069e8 <TIM_OC1_SetConfig+0x100>)
 80069b0:	f7f9 ffde 	bl	8000970 <assert_failed>
 80069b4:	e7ca      	b.n	800694c <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80069b6:	f641 3178 	movw	r1, #7032	@ 0x1b78
 80069ba:	480b      	ldr	r0, [pc, #44]	@ (80069e8 <TIM_OC1_SetConfig+0x100>)
 80069bc:	f7f9 ffd8 	bl	8000970 <assert_failed>
 80069c0:	e7df      	b.n	8006982 <TIM_OC1_SetConfig+0x9a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80069c2:	f641 3179 	movw	r1, #7033	@ 0x1b79
 80069c6:	4808      	ldr	r0, [pc, #32]	@ (80069e8 <TIM_OC1_SetConfig+0x100>)
 80069c8:	f7f9 ffd2 	bl	8000970 <assert_failed>
 80069cc:	e7df      	b.n	800698e <TIM_OC1_SetConfig+0xa6>
 80069ce:	bf00      	nop
 80069d0:	fffeff8c 	.word	0xfffeff8c
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014800 	.word	0x40014800
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	08009d2c 	.word	0x08009d2c

080069ec <TIM_OC3_SetConfig>:
{
 80069ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 80069f4:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f6:	6a03      	ldr	r3, [r0, #32]
 80069f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069fc:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80069fe:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006a00:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a02:	4b2f      	ldr	r3, [pc, #188]	@ (8006ac0 <TIM_OC3_SetConfig+0xd4>)
 8006a04:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 8006a06:	680a      	ldr	r2, [r1, #0]
 8006a08:	ea42 0803 	orr.w	r8, r2, r3
  tmpccer &= ~TIM_CCER_CC3P;
 8006a0c:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a10:	688b      	ldr	r3, [r1, #8]
 8006a12:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a16:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac4 <TIM_OC3_SetConfig+0xd8>)
 8006a18:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac8 <TIM_OC3_SetConfig+0xdc>)
 8006a1a:	4298      	cmp	r0, r3
 8006a1c:	bf18      	it	ne
 8006a1e:	4290      	cmpne	r0, r2
 8006a20:	bf0c      	ite	eq
 8006a22:	f04f 0901 	moveq.w	r9, #1
 8006a26:	f04f 0900 	movne.w	r9, #0
 8006a2a:	d10b      	bne.n	8006a44 <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a2c:	68cb      	ldr	r3, [r1, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bf18      	it	ne
 8006a32:	2b08      	cmpne	r3, #8
 8006a34:	d131      	bne.n	8006a9a <TIM_OC3_SetConfig+0xae>
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a36:	f426 6600 	bic.w	r6, r6, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a3a:	68eb      	ldr	r3, [r5, #12]
 8006a3c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a40:	f426 6680 	bic.w	r6, r6, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	d10b      	bne.n	8006a62 <TIM_OC3_SetConfig+0x76>
 8006a4a:	4b20      	ldr	r3, [pc, #128]	@ (8006acc <TIM_OC3_SetConfig+0xe0>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	bf14      	ite	ne
 8006a50:	2300      	movne	r3, #0
 8006a52:	2301      	moveq	r3, #1
 8006a54:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <TIM_OC3_SetConfig+0xe4>)
 8006a56:	4294      	cmp	r4, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC3_SetConfig+0x76>
 8006a5a:	b913      	cbnz	r3, 8006a62 <TIM_OC3_SetConfig+0x76>
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad4 <TIM_OC3_SetConfig+0xe8>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d113      	bne.n	8006a8a <TIM_OC3_SetConfig+0x9e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a62:	69ab      	ldr	r3, [r5, #24]
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a68:	bf18      	it	ne
 8006a6a:	2b00      	cmpne	r3, #0
 8006a6c:	d11b      	bne.n	8006aa6 <TIM_OC3_SetConfig+0xba>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a6e:	696b      	ldr	r3, [r5, #20]
 8006a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a74:	bf18      	it	ne
 8006a76:	2b00      	cmpne	r3, #0
 8006a78:	d11b      	bne.n	8006ab2 <TIM_OC3_SetConfig+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7a:	f427 5740 	bic.w	r7, r7, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a7e:	696b      	ldr	r3, [r5, #20]
 8006a80:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a84:	69ab      	ldr	r3, [r5, #24]
 8006a86:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
  TIMx->CR2 = tmpcr2;
 8006a8a:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a8c:	f8c4 801c 	str.w	r8, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006a90:	686b      	ldr	r3, [r5, #4]
 8006a92:	63e3      	str	r3, [r4, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006a94:	6226      	str	r6, [r4, #32]
}
 8006a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a9a:	f641 4102 	movw	r1, #7170	@ 0x1c02
 8006a9e:	480e      	ldr	r0, [pc, #56]	@ (8006ad8 <TIM_OC3_SetConfig+0xec>)
 8006aa0:	f7f9 ff66 	bl	8000970 <assert_failed>
 8006aa4:	e7c7      	b.n	8006a36 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006aa6:	f641 410f 	movw	r1, #7183	@ 0x1c0f
 8006aaa:	480b      	ldr	r0, [pc, #44]	@ (8006ad8 <TIM_OC3_SetConfig+0xec>)
 8006aac:	f7f9 ff60 	bl	8000970 <assert_failed>
 8006ab0:	e7dd      	b.n	8006a6e <TIM_OC3_SetConfig+0x82>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006ab2:	f641 4110 	movw	r1, #7184	@ 0x1c10
 8006ab6:	4808      	ldr	r0, [pc, #32]	@ (8006ad8 <TIM_OC3_SetConfig+0xec>)
 8006ab8:	f7f9 ff5a 	bl	8000970 <assert_failed>
 8006abc:	e7dd      	b.n	8006a7a <TIM_OC3_SetConfig+0x8e>
 8006abe:	bf00      	nop
 8006ac0:	fffeff8c 	.word	0xfffeff8c
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014800 	.word	0x40014800
 8006ad8:	08009d2c 	.word	0x08009d2c

08006adc <TIM_OC4_SetConfig>:
{
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 8006ae4:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae6:	6a03      	ldr	r3, [r0, #32]
 8006ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aec:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006aee:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8006af2:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006af4:	4f1b      	ldr	r7, [pc, #108]	@ (8006b64 <TIM_OC4_SetConfig+0x88>)
 8006af6:	4017      	ands	r7, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af8:	680a      	ldr	r2, [r1, #0]
 8006afa:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
 8006afe:	f426 5600 	bic.w	r6, r6, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b02:	688b      	ldr	r3, [r1, #8]
 8006b04:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b08:	4a17      	ldr	r2, [pc, #92]	@ (8006b68 <TIM_OC4_SetConfig+0x8c>)
 8006b0a:	4b18      	ldr	r3, [pc, #96]	@ (8006b6c <TIM_OC4_SetConfig+0x90>)
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	bf18      	it	ne
 8006b10:	4290      	cmpne	r0, r2
 8006b12:	d00d      	beq.n	8006b30 <TIM_OC4_SetConfig+0x54>
 8006b14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8006b18:	4298      	cmp	r0, r3
 8006b1a:	bf14      	ite	ne
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8006b24:	4290      	cmp	r0, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC4_SetConfig+0x54>
 8006b28:	b913      	cbnz	r3, 8006b30 <TIM_OC4_SetConfig+0x54>
 8006b2a:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <TIM_OC4_SetConfig+0x94>)
 8006b2c:	4298      	cmp	r0, r3
 8006b2e:	d10a      	bne.n	8006b46 <TIM_OC4_SetConfig+0x6a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006b30:	696b      	ldr	r3, [r5, #20]
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b36:	bf18      	it	ne
 8006b38:	2b00      	cmpne	r3, #0
 8006b3a:	d10c      	bne.n	8006b56 <TIM_OC4_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b3c:	f428 4880 	bic.w	r8, r8, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b40:	696b      	ldr	r3, [r5, #20]
 8006b42:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  TIMx->CR2 = tmpcr2;
 8006b46:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006b4a:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8006b4c:	686b      	ldr	r3, [r5, #4]
 8006b4e:	6423      	str	r3, [r4, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006b50:	6226      	str	r6, [r4, #32]
}
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006b56:	f641 414f 	movw	r1, #7247	@ 0x1c4f
 8006b5a:	4806      	ldr	r0, [pc, #24]	@ (8006b74 <TIM_OC4_SetConfig+0x98>)
 8006b5c:	f7f9 ff08 	bl	8000970 <assert_failed>
 8006b60:	e7ec      	b.n	8006b3c <TIM_OC4_SetConfig+0x60>
 8006b62:	bf00      	nop
 8006b64:	feff8cff 	.word	0xfeff8cff
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400
 8006b70:	40014800 	.word	0x40014800
 8006b74:	08009d2c 	.word	0x08009d2c

08006b78 <TIM_Base_SetConfig>:
{
 8006b78:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 8006b7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c78 <TIM_Base_SetConfig+0x100>)
 8006b7e:	4290      	cmp	r0, r2
 8006b80:	bf14      	ite	ne
 8006b82:	2200      	movne	r2, #0
 8006b84:	2201      	moveq	r2, #1
 8006b86:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006b8a:	bf14      	ite	ne
 8006b8c:	4614      	movne	r4, r2
 8006b8e:	f042 0401 	orreq.w	r4, r2, #1
 8006b92:	b9ac      	cbnz	r4, 8006bc0 <TIM_Base_SetConfig+0x48>
 8006b94:	4d39      	ldr	r5, [pc, #228]	@ (8006c7c <TIM_Base_SetConfig+0x104>)
 8006b96:	42a8      	cmp	r0, r5
 8006b98:	bf14      	ite	ne
 8006b9a:	2500      	movne	r5, #0
 8006b9c:	2501      	moveq	r5, #1
 8006b9e:	4e38      	ldr	r6, [pc, #224]	@ (8006c80 <TIM_Base_SetConfig+0x108>)
 8006ba0:	42b0      	cmp	r0, r6
 8006ba2:	d00d      	beq.n	8006bc0 <TIM_Base_SetConfig+0x48>
 8006ba4:	b965      	cbnz	r5, 8006bc0 <TIM_Base_SetConfig+0x48>
 8006ba6:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8006baa:	f505 3582 	add.w	r5, r5, #66560	@ 0x10400
 8006bae:	42a8      	cmp	r0, r5
 8006bb0:	bf14      	ite	ne
 8006bb2:	2500      	movne	r5, #0
 8006bb4:	2501      	moveq	r5, #1
 8006bb6:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006bba:	42b0      	cmp	r0, r6
 8006bbc:	d000      	beq.n	8006bc0 <TIM_Base_SetConfig+0x48>
 8006bbe:	b11d      	cbz	r5, 8006bc8 <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006bc4:	684d      	ldr	r5, [r1, #4]
 8006bc6:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc8:	bb64      	cbnz	r4, 8006c24 <TIM_Base_SetConfig+0xac>
 8006bca:	4c2c      	ldr	r4, [pc, #176]	@ (8006c7c <TIM_Base_SetConfig+0x104>)
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	bf14      	ite	ne
 8006bd0:	2400      	movne	r4, #0
 8006bd2:	2401      	moveq	r4, #1
 8006bd4:	4d2a      	ldr	r5, [pc, #168]	@ (8006c80 <TIM_Base_SetConfig+0x108>)
 8006bd6:	42a8      	cmp	r0, r5
 8006bd8:	d024      	beq.n	8006c24 <TIM_Base_SetConfig+0xac>
 8006bda:	bb1c      	cbnz	r4, 8006c24 <TIM_Base_SetConfig+0xac>
 8006bdc:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8006be0:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 8006be4:	42a0      	cmp	r0, r4
 8006be6:	bf14      	ite	ne
 8006be8:	2400      	movne	r4, #0
 8006bea:	2401      	moveq	r4, #1
 8006bec:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006bf0:	42a8      	cmp	r0, r5
 8006bf2:	d017      	beq.n	8006c24 <TIM_Base_SetConfig+0xac>
 8006bf4:	b9b4      	cbnz	r4, 8006c24 <TIM_Base_SetConfig+0xac>
 8006bf6:	4c23      	ldr	r4, [pc, #140]	@ (8006c84 <TIM_Base_SetConfig+0x10c>)
 8006bf8:	42a0      	cmp	r0, r4
 8006bfa:	bf14      	ite	ne
 8006bfc:	2400      	movne	r4, #0
 8006bfe:	2401      	moveq	r4, #1
 8006c00:	f505 359a 	add.w	r5, r5, #78848	@ 0x13400
 8006c04:	42a8      	cmp	r0, r5
 8006c06:	d00d      	beq.n	8006c24 <TIM_Base_SetConfig+0xac>
 8006c08:	b964      	cbnz	r4, 8006c24 <TIM_Base_SetConfig+0xac>
 8006c0a:	4c1f      	ldr	r4, [pc, #124]	@ (8006c88 <TIM_Base_SetConfig+0x110>)
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	bf14      	ite	ne
 8006c10:	2400      	movne	r4, #0
 8006c12:	2401      	moveq	r4, #1
 8006c14:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006c18:	42a8      	cmp	r0, r5
 8006c1a:	d003      	beq.n	8006c24 <TIM_Base_SetConfig+0xac>
 8006c1c:	b914      	cbnz	r4, 8006c24 <TIM_Base_SetConfig+0xac>
 8006c1e:	4c1b      	ldr	r4, [pc, #108]	@ (8006c8c <TIM_Base_SetConfig+0x114>)
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d103      	bne.n	8006c2c <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c28:	68cc      	ldr	r4, [r1, #12]
 8006c2a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c30:	694c      	ldr	r4, [r1, #20]
 8006c32:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c34:	688c      	ldr	r4, [r1, #8]
 8006c36:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c38:	680c      	ldr	r4, [r1, #0]
 8006c3a:	6284      	str	r4, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c3c:	4c14      	ldr	r4, [pc, #80]	@ (8006c90 <TIM_Base_SetConfig+0x118>)
 8006c3e:	42a0      	cmp	r0, r4
 8006c40:	bf08      	it	eq
 8006c42:	f042 0201 	orreq.w	r2, r2, #1
 8006c46:	b962      	cbnz	r2, 8006c62 <TIM_Base_SetConfig+0xea>
 8006c48:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <TIM_Base_SetConfig+0x10c>)
 8006c4a:	4290      	cmp	r0, r2
 8006c4c:	bf14      	ite	ne
 8006c4e:	2200      	movne	r2, #0
 8006c50:	2201      	moveq	r2, #1
 8006c52:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8006c56:	42a0      	cmp	r0, r4
 8006c58:	d003      	beq.n	8006c62 <TIM_Base_SetConfig+0xea>
 8006c5a:	b912      	cbnz	r2, 8006c62 <TIM_Base_SetConfig+0xea>
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006c5e:	4290      	cmp	r0, r2
 8006c60:	d101      	bne.n	8006c66 <TIM_Base_SetConfig+0xee>
    TIMx->RCR = Structure->RepetitionCounter;
 8006c62:	690a      	ldr	r2, [r1, #16]
 8006c64:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c66:	6802      	ldr	r2, [r0, #0]
 8006c68:	f042 0204 	orr.w	r2, r2, #4
 8006c6c:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8006c6e:	2201      	movs	r2, #1
 8006c70:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8006c72:	6003      	str	r3, [r0, #0]
}
 8006c74:	bc70      	pop	{r4, r5, r6}
 8006c76:	4770      	bx	lr
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000800 	.word	0x40000800
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40014400 	.word	0x40014400
 8006c88:	4000e000 	.word	0x4000e000
 8006c8c:	4000e400 	.word	0x4000e400
 8006c90:	40010400 	.word	0x40010400
 8006c94:	40014800 	.word	0x40014800

08006c98 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f000 80c0 	beq.w	8006e1e <HAL_TIM_PWM_Init+0x186>
{
 8006c9e:	b510      	push	{r4, lr}
 8006ca0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ca2:	6803      	ldr	r3, [r0, #0]
 8006ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8006e24 <HAL_TIM_PWM_Init+0x18c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	bf18      	it	ne
 8006caa:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006cae:	d03c      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cb0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d038      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cb8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d034      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cc0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d030      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d028      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cd8:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d024      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006ce0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d020      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006ce8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d01c      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cf0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006cf8:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d014      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006d00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d010      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006d08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00c      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006d10:	f5a2 42d0 	sub.w	r2, r2, #26624	@ 0x6800
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d008      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006d18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIM_PWM_Init+0x92>
 8006d20:	f240 5133 	movw	r1, #1331	@ 0x533
 8006d24:	4840      	ldr	r0, [pc, #256]	@ (8006e28 <HAL_TIM_PWM_Init+0x190>)
 8006d26:	f7f9 fe23 	bl	8000970 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf18      	it	ne
 8006d30:	2b10      	cmpne	r3, #16
 8006d32:	d005      	beq.n	8006d40 <HAL_TIM_PWM_Init+0xa8>
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d003      	beq.n	8006d40 <HAL_TIM_PWM_Init+0xa8>
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d001      	beq.n	8006d40 <HAL_TIM_PWM_Init+0xa8>
 8006d3c:	2b60      	cmp	r3, #96	@ 0x60
 8006d3e:	d120      	bne.n	8006d82 <HAL_TIM_PWM_Init+0xea>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bf18      	it	ne
 8006d46:	f5b3 7f80 	cmpne.w	r3, #256	@ 0x100
 8006d4a:	d002      	beq.n	8006d52 <HAL_TIM_PWM_Init+0xba>
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d50:	d11d      	bne.n	8006d8e <HAL_TIM_PWM_Init+0xf6>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	4a35      	ldr	r2, [pc, #212]	@ (8006e2c <HAL_TIM_PWM_Init+0x194>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bf18      	it	ne
 8006d5a:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006d5e:	d01c      	beq.n	8006d9a <HAL_TIM_PWM_Init+0x102>
 8006d60:	f502 4254 	add.w	r2, r2, #54272	@ 0xd400
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_TIM_PWM_Init+0x102>
 8006d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d014      	beq.n	8006d9a <HAL_TIM_PWM_Init+0x102>
 8006d70:	68e3      	ldr	r3, [r4, #12]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	bf8c      	ite	hi
 8006d7c:	2300      	movhi	r3, #0
 8006d7e:	2301      	movls	r3, #1
 8006d80:	e00f      	b.n	8006da2 <HAL_TIM_PWM_Init+0x10a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d82:	f240 5134 	movw	r1, #1332	@ 0x534
 8006d86:	4828      	ldr	r0, [pc, #160]	@ (8006e28 <HAL_TIM_PWM_Init+0x190>)
 8006d88:	f7f9 fdf2 	bl	8000970 <assert_failed>
 8006d8c:	e7d8      	b.n	8006d40 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d8e:	f240 5135 	movw	r1, #1333	@ 0x535
 8006d92:	4825      	ldr	r0, [pc, #148]	@ (8006e28 <HAL_TIM_PWM_Init+0x190>)
 8006d94:	f7f9 fdec 	bl	8000970 <assert_failed>
 8006d98:	e7db      	b.n	8006d52 <HAL_TIM_PWM_Init+0xba>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	3b00      	subs	r3, #0
 8006d9e:	bf18      	it	ne
 8006da0:	2301      	movne	r3, #1
 8006da2:	b353      	cbz	r3, 8006dfa <HAL_TIM_PWM_Init+0x162>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006da4:	69a3      	ldr	r3, [r4, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf18      	it	ne
 8006daa:	2b80      	cmpne	r3, #128	@ 0x80
 8006dac:	d12b      	bne.n	8006e06 <HAL_TIM_PWM_Init+0x16e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8006db2:	b373      	cbz	r3, 8006e12 <HAL_TIM_PWM_Init+0x17a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006db4:	2302      	movs	r3, #2
 8006db6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dba:	4621      	mov	r1, r4
 8006dbc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006dc0:	f7ff feda 	bl	8006b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006dce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006dd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006dd6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006dda:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006de6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006dea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006dee:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006df2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006df6:	2000      	movs	r0, #0
}
 8006df8:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006dfa:	f240 5136 	movw	r1, #1334	@ 0x536
 8006dfe:	480a      	ldr	r0, [pc, #40]	@ (8006e28 <HAL_TIM_PWM_Init+0x190>)
 8006e00:	f7f9 fdb6 	bl	8000970 <assert_failed>
 8006e04:	e7ce      	b.n	8006da4 <HAL_TIM_PWM_Init+0x10c>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006e06:	f240 5137 	movw	r1, #1335	@ 0x537
 8006e0a:	4807      	ldr	r0, [pc, #28]	@ (8006e28 <HAL_TIM_PWM_Init+0x190>)
 8006e0c:	f7f9 fdb0 	bl	8000970 <assert_failed>
 8006e10:	e7cd      	b.n	8006dae <HAL_TIM_PWM_Init+0x116>
    htim->Lock = HAL_UNLOCKED;
 8006e12:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006e16:	4620      	mov	r0, r4
 8006e18:	f001 f994 	bl	8008144 <HAL_TIM_PWM_MspInit>
 8006e1c:	e7ca      	b.n	8006db4 <HAL_TIM_PWM_Init+0x11c>
    return HAL_ERROR;
 8006e1e:	2001      	movs	r0, #1
}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	08009d2c 	.word	0x08009d2c
 8006e2c:	40000c00 	.word	0x40000c00

08006e30 <TIM_OC2_SetConfig>:
{
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 8006e38:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e3a:	6a03      	ldr	r3, [r0, #32]
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006e42:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006e44:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e46:	4b2f      	ldr	r3, [pc, #188]	@ (8006f04 <TIM_OC2_SetConfig+0xd4>)
 8006e48:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4a:	680a      	ldr	r2, [r1, #0]
 8006e4c:	ea43 2802 	orr.w	r8, r3, r2, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006e50:	f026 0620 	bic.w	r6, r6, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e54:	688b      	ldr	r3, [r1, #8]
 8006e56:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006f08 <TIM_OC2_SetConfig+0xd8>)
 8006e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f0c <TIM_OC2_SetConfig+0xdc>)
 8006e5e:	4298      	cmp	r0, r3
 8006e60:	bf18      	it	ne
 8006e62:	4290      	cmpne	r0, r2
 8006e64:	bf0c      	ite	eq
 8006e66:	f04f 0901 	moveq.w	r9, #1
 8006e6a:	f04f 0900 	movne.w	r9, #0
 8006e6e:	d10b      	bne.n	8006e88 <TIM_OC2_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006e70:	68cb      	ldr	r3, [r1, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	bf18      	it	ne
 8006e76:	2b08      	cmpne	r3, #8
 8006e78:	d131      	bne.n	8006ede <TIM_OC2_SetConfig+0xae>
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e7a:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e84:	f026 0640 	bic.w	r6, r6, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	d10b      	bne.n	8006ea6 <TIM_OC2_SetConfig+0x76>
 8006e8e:	4b20      	ldr	r3, [pc, #128]	@ (8006f10 <TIM_OC2_SetConfig+0xe0>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf14      	ite	ne
 8006e94:	2300      	movne	r3, #0
 8006e96:	2301      	moveq	r3, #1
 8006e98:	4a1e      	ldr	r2, [pc, #120]	@ (8006f14 <TIM_OC2_SetConfig+0xe4>)
 8006e9a:	4294      	cmp	r4, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC2_SetConfig+0x76>
 8006e9e:	b913      	cbnz	r3, 8006ea6 <TIM_OC2_SetConfig+0x76>
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <TIM_OC2_SetConfig+0xe8>)
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	d113      	bne.n	8006ece <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006ea6:	69ab      	ldr	r3, [r5, #24]
 8006ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eac:	bf18      	it	ne
 8006eae:	2b00      	cmpne	r3, #0
 8006eb0:	d11b      	bne.n	8006eea <TIM_OC2_SetConfig+0xba>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006eb2:	696b      	ldr	r3, [r5, #20]
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb8:	bf18      	it	ne
 8006eba:	2b00      	cmpne	r3, #0
 8006ebc:	d11b      	bne.n	8006ef6 <TIM_OC2_SetConfig+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ebe:	f427 6740 	bic.w	r7, r7, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ec2:	696b      	ldr	r3, [r5, #20]
 8006ec4:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec8:	69ab      	ldr	r3, [r5, #24]
 8006eca:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
  TIMx->CR2 = tmpcr2;
 8006ece:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006ed0:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed4:	686b      	ldr	r3, [r5, #4]
 8006ed6:	63a3      	str	r3, [r4, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006ed8:	6226      	str	r6, [r4, #32]
}
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ede:	f641 31b7 	movw	r1, #7095	@ 0x1bb7
 8006ee2:	480e      	ldr	r0, [pc, #56]	@ (8006f1c <TIM_OC2_SetConfig+0xec>)
 8006ee4:	f7f9 fd44 	bl	8000970 <assert_failed>
 8006ee8:	e7c7      	b.n	8006e7a <TIM_OC2_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006eea:	f641 31c4 	movw	r1, #7108	@ 0x1bc4
 8006eee:	480b      	ldr	r0, [pc, #44]	@ (8006f1c <TIM_OC2_SetConfig+0xec>)
 8006ef0:	f7f9 fd3e 	bl	8000970 <assert_failed>
 8006ef4:	e7dd      	b.n	8006eb2 <TIM_OC2_SetConfig+0x82>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006ef6:	f641 31c5 	movw	r1, #7109	@ 0x1bc5
 8006efa:	4808      	ldr	r0, [pc, #32]	@ (8006f1c <TIM_OC2_SetConfig+0xec>)
 8006efc:	f7f9 fd38 	bl	8000970 <assert_failed>
 8006f00:	e7dd      	b.n	8006ebe <TIM_OC2_SetConfig+0x8e>
 8006f02:	bf00      	nop
 8006f04:	feff8cff 	.word	0xfeff8cff
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400
 8006f10:	40014400 	.word	0x40014400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014800 	.word	0x40014800
 8006f1c:	08009d2c 	.word	0x08009d2c

08006f20 <HAL_TIM_PWM_ConfigChannel>:
{
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	4605      	mov	r5, r0
 8006f24:	460e      	mov	r6, r1
 8006f26:	4614      	mov	r4, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	bf18      	it	ne
 8006f2c:	2a04      	cmpne	r2, #4
 8006f2e:	d00f      	beq.n	8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006f30:	f1b2 030c 	subs.w	r3, r2, #12
 8006f34:	bf18      	it	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	2a08      	cmp	r2, #8
 8006f3a:	d009      	beq.n	8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006f3c:	b143      	cbz	r3, 8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006f3e:	f1b2 0314 	subs.w	r3, r2, #20
 8006f42:	bf18      	it	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2a10      	cmp	r2, #16
 8006f48:	d002      	beq.n	8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006f4a:	b10b      	cbz	r3, 8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006f4c:	2a3c      	cmp	r2, #60	@ 0x3c
 8006f4e:	d13f      	bne.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0xb0>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	2b60      	cmp	r3, #96	@ 0x60
 8006f54:	bf18      	it	ne
 8006f56:	2b70      	cmpne	r3, #112	@ 0x70
 8006f58:	d00e      	beq.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x58>
 8006f5a:	4a8e      	ldr	r2, [pc, #568]	@ (8007194 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00b      	beq.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x58>
 8006f60:	d83c      	bhi.n	8006fdc <HAL_TIM_PWM_ConfigChannel+0xbc>
 8006f62:	3a20      	subs	r2, #32
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d007      	beq.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x58>
 8006f68:	3210      	adds	r2, #16
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x58>
 8006f6e:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8006f72:	4889      	ldr	r0, [pc, #548]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006f74:	f7f9 fcfc 	bl	8000970 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006f78:	68b3      	ldr	r3, [r6, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bf18      	it	ne
 8006f7e:	2b02      	cmpne	r3, #2
 8006f80:	d130      	bne.n	8006fe4 <HAL_TIM_PWM_ConfigChannel+0xc4>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006f82:	6933      	ldr	r3, [r6, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf18      	it	ne
 8006f88:	2b04      	cmpne	r3, #4
 8006f8a:	d131      	bne.n	8006ff0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  __HAL_LOCK(htim);
 8006f8c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	f000 818b 	beq.w	80072ac <HAL_TIM_PWM_ConfigChannel+0x38c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  switch (Channel)
 8006f9c:	2c14      	cmp	r4, #20
 8006f9e:	f200 8180 	bhi.w	80072a2 <HAL_TIM_PWM_ConfigChannel+0x382>
 8006fa2:	e8df f014 	tbh	[pc, r4, lsl #1]
 8006fa6:	002b      	.short	0x002b
 8006fa8:	017e017e 	.word	0x017e017e
 8006fac:	007c017e 	.word	0x007c017e
 8006fb0:	017e017e 	.word	0x017e017e
 8006fb4:	00be017e 	.word	0x00be017e
 8006fb8:	017e017e 	.word	0x017e017e
 8006fbc:	00ff017e 	.word	0x00ff017e
 8006fc0:	017e017e 	.word	0x017e017e
 8006fc4:	0139017e 	.word	0x0139017e
 8006fc8:	017e017e 	.word	0x017e017e
 8006fcc:	015b017e 	.word	0x015b017e
  assert_param(IS_TIM_CHANNELS(Channel));
 8006fd0:	f241 01b3 	movw	r1, #4275	@ 0x10b3
 8006fd4:	4870      	ldr	r0, [pc, #448]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006fd6:	f7f9 fccb 	bl	8000970 <assert_failed>
 8006fda:	e7b9      	b.n	8006f50 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006fdc:	4a6f      	ldr	r2, [pc, #444]	@ (800719c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d0ca      	beq.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x58>
 8006fe2:	e7c4      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x4e>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006fe4:	f241 01b5 	movw	r1, #4277	@ 0x10b5
 8006fe8:	486b      	ldr	r0, [pc, #428]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006fea:	f7f9 fcc1 	bl	8000970 <assert_failed>
 8006fee:	e7c8      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x62>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006ff0:	f241 01b6 	movw	r1, #4278	@ 0x10b6
 8006ff4:	4868      	ldr	r0, [pc, #416]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006ff6:	f7f9 fcbb 	bl	8000970 <assert_failed>
 8006ffa:	e7c7      	b.n	8006f8c <HAL_TIM_PWM_ConfigChannel+0x6c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	4a68      	ldr	r2, [pc, #416]	@ (80071a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007000:	4293      	cmp	r3, r2
 8007002:	bf18      	it	ne
 8007004:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8007008:	d034      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800700a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800700e:	4293      	cmp	r3, r2
 8007010:	d030      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007012:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007016:	4293      	cmp	r3, r2
 8007018:	d02c      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800701a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800701e:	4293      	cmp	r3, r2
 8007020:	d028      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007022:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8007026:	4293      	cmp	r3, r2
 8007028:	d024      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800702a:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800702e:	4293      	cmp	r3, r2
 8007030:	d020      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007032:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007036:	4293      	cmp	r3, r2
 8007038:	d01c      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800703a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007042:	f502 3290 	add.w	r2, r2, #73728	@ 0x12000
 8007046:	4293      	cmp	r3, r2
 8007048:	d014      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800704a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800704e:	4293      	cmp	r3, r2
 8007050:	d010      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007052:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007056:	4293      	cmp	r3, r2
 8007058:	d00c      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800705a:	f5a2 42d0 	sub.w	r2, r2, #26624	@ 0x6800
 800705e:	4293      	cmp	r3, r2
 8007060:	d008      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 8007062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIM_PWM_ConfigChannel+0x154>
 800706a:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800706e:	484a      	ldr	r0, [pc, #296]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007070:	f7f9 fc7e 	bl	8000970 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007074:	4631      	mov	r1, r6
 8007076:	6828      	ldr	r0, [r5, #0]
 8007078:	f7ff fc36 	bl	80068e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800707c:	682a      	ldr	r2, [r5, #0]
 800707e:	6993      	ldr	r3, [r2, #24]
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007086:	682a      	ldr	r2, [r5, #0]
 8007088:	6993      	ldr	r3, [r2, #24]
 800708a:	f023 0304 	bic.w	r3, r3, #4
 800708e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007090:	682a      	ldr	r2, [r5, #0]
 8007092:	6993      	ldr	r3, [r2, #24]
 8007094:	6931      	ldr	r1, [r6, #16]
 8007096:	430b      	orrs	r3, r1
 8007098:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800709a:	2000      	movs	r0, #0
      break;
 800709c:	e102      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800709e:	682b      	ldr	r3, [r5, #0]
 80070a0:	4a3f      	ldr	r2, [pc, #252]	@ (80071a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bf18      	it	ne
 80070a6:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80070aa:	d024      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070ac:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d020      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d01c      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070c4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d014      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070cc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d010      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070d4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00c      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070dc:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d008      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070ec:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 80070f0:	4829      	ldr	r0, [pc, #164]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80070f2:	f7f9 fc3d 	bl	8000970 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f6:	4631      	mov	r1, r6
 80070f8:	6828      	ldr	r0, [r5, #0]
 80070fa:	f7ff fe99 	bl	8006e30 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070fe:	682a      	ldr	r2, [r5, #0]
 8007100:	6993      	ldr	r3, [r2, #24]
 8007102:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007106:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007108:	682a      	ldr	r2, [r5, #0]
 800710a:	6993      	ldr	r3, [r2, #24]
 800710c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007110:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007112:	682a      	ldr	r2, [r5, #0]
 8007114:	6993      	ldr	r3, [r2, #24]
 8007116:	6931      	ldr	r1, [r6, #16]
 8007118:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800711c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2000      	movs	r0, #0
      break;
 8007120:	e0c0      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007122:	682b      	ldr	r3, [r5, #0]
 8007124:	4a1e      	ldr	r2, [pc, #120]	@ (80071a0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007126:	4293      	cmp	r3, r2
 8007128:	bf18      	it	ne
 800712a:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 800712e:	d01c      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007130:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007134:	4293      	cmp	r3, r2
 8007136:	d018      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007138:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800713c:	4293      	cmp	r3, r2
 800713e:	d014      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007140:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007144:	4293      	cmp	r3, r2
 8007146:	d010      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007148:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800714c:	4293      	cmp	r3, r2
 800714e:	d00c      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007150:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 8007154:	4293      	cmp	r3, r2
 8007156:	d008      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007158:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_TIM_PWM_ConfigChannel+0x24a>
 8007160:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8007164:	480c      	ldr	r0, [pc, #48]	@ (8007198 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007166:	f7f9 fc03 	bl	8000970 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800716a:	4631      	mov	r1, r6
 800716c:	6828      	ldr	r0, [r5, #0]
 800716e:	f7ff fc3d 	bl	80069ec <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007172:	682a      	ldr	r2, [r5, #0]
 8007174:	69d3      	ldr	r3, [r2, #28]
 8007176:	f043 0308 	orr.w	r3, r3, #8
 800717a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800717c:	682a      	ldr	r2, [r5, #0]
 800717e:	69d3      	ldr	r3, [r2, #28]
 8007180:	f023 0304 	bic.w	r3, r3, #4
 8007184:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007186:	682a      	ldr	r2, [r5, #0]
 8007188:	69d3      	ldr	r3, [r2, #28]
 800718a:	6931      	ldr	r1, [r6, #16]
 800718c:	430b      	orrs	r3, r1
 800718e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	2000      	movs	r0, #0
      break;
 8007192:	e087      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
 8007194:	00010060 	.word	0x00010060
 8007198:	08009d2c 	.word	0x08009d2c
 800719c:	00010070 	.word	0x00010070
 80071a0:	40010000 	.word	0x40010000
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	4a42      	ldr	r2, [pc, #264]	@ (80072b0 <HAL_TIM_PWM_ConfigChannel+0x390>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bf18      	it	ne
 80071ac:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80071b0:	d01c      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071b2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d018      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071be:	4293      	cmp	r3, r2
 80071c0:	d014      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d010      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071ca:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00c      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071d2:	f5a2 5210 	sub.w	r2, r2, #9216	@ 0x2400
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d008      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_TIM_PWM_ConfigChannel+0x2cc>
 80071e2:	f241 01f3 	movw	r1, #4339	@ 0x10f3
 80071e6:	4833      	ldr	r0, [pc, #204]	@ (80072b4 <HAL_TIM_PWM_ConfigChannel+0x394>)
 80071e8:	f7f9 fbc2 	bl	8000970 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ec:	4631      	mov	r1, r6
 80071ee:	6828      	ldr	r0, [r5, #0]
 80071f0:	f7ff fc74 	bl	8006adc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071f4:	682a      	ldr	r2, [r5, #0]
 80071f6:	69d3      	ldr	r3, [r2, #28]
 80071f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80071fc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071fe:	682a      	ldr	r2, [r5, #0]
 8007200:	69d3      	ldr	r3, [r2, #28]
 8007202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007206:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007208:	682a      	ldr	r2, [r5, #0]
 800720a:	69d3      	ldr	r3, [r2, #28]
 800720c:	6931      	ldr	r1, [r6, #16]
 800720e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007212:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007214:	2000      	movs	r0, #0
      break;
 8007216:	e045      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	4925      	ldr	r1, [pc, #148]	@ (80072b0 <HAL_TIM_PWM_ConfigChannel+0x390>)
 800721c:	4a26      	ldr	r2, [pc, #152]	@ (80072b8 <HAL_TIM_PWM_ConfigChannel+0x398>)
 800721e:	428b      	cmp	r3, r1
 8007220:	bf18      	it	ne
 8007222:	4293      	cmpne	r3, r2
 8007224:	d114      	bne.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x330>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007226:	4631      	mov	r1, r6
 8007228:	6828      	ldr	r0, [r5, #0]
 800722a:	f7ff fae9 	bl	8006800 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800722e:	682a      	ldr	r2, [r5, #0]
 8007230:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007232:	f043 0308 	orr.w	r3, r3, #8
 8007236:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007238:	682a      	ldr	r2, [r5, #0]
 800723a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800723c:	f023 0304 	bic.w	r3, r3, #4
 8007240:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007242:	682a      	ldr	r2, [r5, #0]
 8007244:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007246:	6931      	ldr	r1, [r6, #16]
 8007248:	430b      	orrs	r3, r1
 800724a:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800724c:	2000      	movs	r0, #0
      break;
 800724e:	e029      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8007250:	f241 1104 	movw	r1, #4356	@ 0x1104
 8007254:	4817      	ldr	r0, [pc, #92]	@ (80072b4 <HAL_TIM_PWM_ConfigChannel+0x394>)
 8007256:	f7f9 fb8b 	bl	8000970 <assert_failed>
 800725a:	e7e4      	b.n	8007226 <HAL_TIM_PWM_ConfigChannel+0x306>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	4914      	ldr	r1, [pc, #80]	@ (80072b0 <HAL_TIM_PWM_ConfigChannel+0x390>)
 8007260:	4a15      	ldr	r2, [pc, #84]	@ (80072b8 <HAL_TIM_PWM_ConfigChannel+0x398>)
 8007262:	428b      	cmp	r3, r1
 8007264:	bf18      	it	ne
 8007266:	4293      	cmpne	r3, r2
 8007268:	d115      	bne.n	8007296 <HAL_TIM_PWM_ConfigChannel+0x376>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800726a:	4631      	mov	r1, r6
 800726c:	6828      	ldr	r0, [r5, #0]
 800726e:	f7ff fb01 	bl	8006874 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007272:	682a      	ldr	r2, [r5, #0]
 8007274:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007276:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800727a:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800727c:	682a      	ldr	r2, [r5, #0]
 800727e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8007280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007284:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007286:	682a      	ldr	r2, [r5, #0]
 8007288:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800728a:	6931      	ldr	r1, [r6, #16]
 800728c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007290:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2000      	movs	r0, #0
      break;
 8007294:	e006      	b.n	80072a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8007296:	f241 1115 	movw	r1, #4373	@ 0x1115
 800729a:	4806      	ldr	r0, [pc, #24]	@ (80072b4 <HAL_TIM_PWM_ConfigChannel+0x394>)
 800729c:	f7f9 fb68 	bl	8000970 <assert_failed>
 80072a0:	e7e3      	b.n	800726a <HAL_TIM_PWM_ConfigChannel+0x34a>
  switch (Channel)
 80072a2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80072a4:	2300      	movs	r3, #0
 80072a6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80072ac:	2002      	movs	r0, #2
 80072ae:	e7fc      	b.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x38a>
 80072b0:	40010000 	.word	0x40010000
 80072b4:	08009d2c 	.word	0x08009d2c
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	4604      	mov	r4, r0
 80072c0:	460d      	mov	r5, r1
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80072c2:	6803      	ldr	r3, [r0, #0]
 80072c4:	4a6f      	ldr	r2, [pc, #444]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bf18      	it	ne
 80072ca:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80072ce:	d02c      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072d0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d028      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072dc:	4293      	cmp	r3, r2
 80072de:	d024      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d020      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d01c      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80072f8:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d014      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007300:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8007304:	4293      	cmp	r3, r2
 8007306:	d010      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007308:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800730c:	4293      	cmp	r3, r2
 800730e:	d00c      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007310:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 8007314:	4293      	cmp	r3, r2
 8007316:	d008      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007318:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8007320:	f240 71cb 	movw	r1, #1995	@ 0x7cb
 8007324:	4858      	ldr	r0, [pc, #352]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8007326:	f7f9 fb23 	bl	8000970 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf18      	it	ne
 8007330:	2b10      	cmpne	r3, #16
 8007332:	d012      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007334:	2b50      	cmp	r3, #80	@ 0x50
 8007336:	d010      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007338:	d806      	bhi.n	8007348 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800733a:	2b30      	cmp	r3, #48	@ 0x30
 800733c:	d00d      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	d00b      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007342:	2b20      	cmp	r3, #32
 8007344:	d104      	bne.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007346:	e008      	b.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007348:	2b60      	cmp	r3, #96	@ 0x60
 800734a:	d006      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800734c:	2b70      	cmp	r3, #112	@ 0x70
 800734e:	d004      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8007350:	f240 71cc 	movw	r1, #1996	@ 0x7cc
 8007354:	484c      	ldr	r0, [pc, #304]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8007356:	f7f9 fb0b 	bl	8000970 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800735a:	68ab      	ldr	r3, [r5, #8]
 800735c:	2b80      	cmp	r3, #128	@ 0x80
 800735e:	bf18      	it	ne
 8007360:	2b00      	cmpne	r3, #0
 8007362:	f040 8081 	bne.w	8007468 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>

  /* Check input state */
  __HAL_LOCK(htim);
 8007366:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	f000 8088 	beq.w	8007480 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>
 8007370:	2301      	movs	r3, #1
 8007372:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007376:	2302      	movs	r3, #2
 8007378:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	685e      	ldr	r6, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007380:	689f      	ldr	r7, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007382:	4940      	ldr	r1, [pc, #256]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8007384:	4a41      	ldr	r2, [pc, #260]	@ (800748c <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	bf18      	it	ne
 800738a:	428b      	cmpne	r3, r1
 800738c:	d133      	bne.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800738e:	686b      	ldr	r3, [r5, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	bf18      	it	ne
 8007394:	f5b3 1f80 	cmpne.w	r3, #1048576	@ 0x100000
 8007398:	d029      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 800739a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800739e:	d026      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073a4:	d023      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073aa:	d020      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073ac:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80073b0:	d01d      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80073b6:	d01a      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073b8:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80073bc:	d017      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073c2:	d014      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073c4:	f5b3 0f10 	cmp.w	r3, #9437184	@ 0x900000
 80073c8:	d011      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80073ce:	d00e      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073d0:	f5b3 0f30 	cmp.w	r3, #11534336	@ 0xb00000
 80073d4:	d00b      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073da:	d008      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073dc:	f5b3 0f50 	cmp.w	r3, #13631488	@ 0xd00000
 80073e0:	d005      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073e2:	f5b3 0f60 	cmp.w	r3, #14680064	@ 0xe00000
 80073e6:	d002      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
 80073e8:	f5b3 0f70 	cmp.w	r3, #15728640	@ 0xf00000
 80073ec:	d142      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073ee:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073f2:	686b      	ldr	r3, [r5, #4]
 80073f4:	431e      	orrs	r6, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f6:	f026 0670 	bic.w	r6, r6, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	4a1f      	ldr	r2, [pc, #124]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	bf18      	it	ne
 800740c:	4293      	cmpne	r3, r2
 800740e:	d01f      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007410:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8007414:	4293      	cmp	r3, r2
 8007416:	d01b      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007418:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800741c:	4293      	cmp	r3, r2
 800741e:	d017      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007424:	4293      	cmp	r3, r2
 8007426:	d013      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007428:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800742c:	4293      	cmp	r3, r2
 800742e:	d00f      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007430:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8007434:	4293      	cmp	r3, r2
 8007436:	d00b      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007438:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007440:	f5a2 42c0 	sub.w	r2, r2, #24576	@ 0x6000
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8007448:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800744c:	4293      	cmp	r3, r2
 800744e:	d104      	bne.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x19e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007450:	f027 0780 	bic.w	r7, r7, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007454:	68aa      	ldr	r2, [r5, #8]
 8007456:	433a      	orrs	r2, r7

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745a:	2301      	movs	r3, #1
 800745c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007460:	2000      	movs	r0, #0
 8007462:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8007466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007468:	f240 71cd 	movw	r1, #1997	@ 0x7cd
 800746c:	4806      	ldr	r0, [pc, #24]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800746e:	f7f9 fa7f 	bl	8000970 <assert_failed>
 8007472:	e778      	b.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8007474:	f240 71df 	movw	r1, #2015	@ 0x7df
 8007478:	4803      	ldr	r0, [pc, #12]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800747a:	f7f9 fa79 	bl	8000970 <assert_failed>
 800747e:	e7b6      	b.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x132>
  __HAL_LOCK(htim);
 8007480:	2002      	movs	r0, #2
 8007482:	e7f0      	b.n	8007466 <HAL_TIMEx_MasterConfigSynchronization+0x1aa>
 8007484:	40010000 	.word	0x40010000
 8007488:	08009d64 	.word	0x08009d64
 800748c:	40010400 	.word	0x40010400

08007490 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007490:	e7fe      	b.n	8007490 <NMI_Handler>

08007492 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007492:	e7fe      	b.n	8007492 <HardFault_Handler>

08007494 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007494:	e7fe      	b.n	8007494 <MemManage_Handler>

08007496 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007496:	e7fe      	b.n	8007496 <BusFault_Handler>

08007498 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007498:	e7fe      	b.n	8007498 <UsageFault_Handler>

0800749a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800749a:	4770      	bx	lr

0800749c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800749c:	4770      	bx	lr

0800749e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800749e:	4770      	bx	lr

080074a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074a2:	f7f9 fb79 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074a6:	bd08      	pop	{r3, pc}

080074a8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80074a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80074aa:	4802      	ldr	r0, [pc, #8]	@ (80074b4 <OTG_HS_EP1_OUT_IRQHandler+0xc>)
 80074ac:	f7fb fe47 	bl	800313e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80074b0:	bd08      	pop	{r3, pc}
 80074b2:	bf00      	nop
 80074b4:	20001970 	.word	0x20001970

080074b8 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80074b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80074ba:	4802      	ldr	r0, [pc, #8]	@ (80074c4 <OTG_HS_EP1_IN_IRQHandler+0xc>)
 80074bc:	f7fb fe3f 	bl	800313e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80074c0:	bd08      	pop	{r3, pc}
 80074c2:	bf00      	nop
 80074c4:	20001970 	.word	0x20001970

080074c8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80074c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80074ca:	4802      	ldr	r0, [pc, #8]	@ (80074d4 <OTG_HS_IRQHandler+0xc>)
 80074cc:	f7fb fe37 	bl	800313e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80074d0:	bd08      	pop	{r3, pc}
 80074d2:	bf00      	nop
 80074d4:	20001970 	.word	0x20001970

080074d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074d8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074de:	9b01      	ldr	r3, [sp, #4]
 80074e0:	3301      	adds	r3, #1
 80074e2:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80074e4:	9b01      	ldr	r3, [sp, #4]
 80074e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ea:	d815      	bhi.n	8007518 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ec:	6903      	ldr	r3, [r0, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	daf5      	bge.n	80074de <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074f6:	6903      	ldr	r3, [r0, #16]
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 80074fe:	9b01      	ldr	r3, [sp, #4]
 8007500:	3301      	adds	r3, #1
 8007502:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8007504:	9b01      	ldr	r3, [sp, #4]
 8007506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800750a:	d808      	bhi.n	800751e <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800750c:	6903      	ldr	r3, [r0, #16]
 800750e:	f013 0f01 	tst.w	r3, #1
 8007512:	d1f4      	bne.n	80074fe <USB_CoreReset+0x26>

  return HAL_OK;
 8007514:	2000      	movs	r0, #0
 8007516:	e000      	b.n	800751a <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8007518:	2003      	movs	r0, #3
}
 800751a:	b002      	add	sp, #8
 800751c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800751e:	2003      	movs	r0, #3
 8007520:	e7fb      	b.n	800751a <USB_CoreReset+0x42>
	...

08007524 <USB_CoreInit>:
{
 8007524:	b084      	sub	sp, #16
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	a803      	add	r0, sp, #12
 800752c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007530:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d11f      	bne.n	8007578 <USB_CoreInit+0x54>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007538:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800753a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800753e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007540:	68e2      	ldr	r2, [r4, #12]
 8007542:	4b1f      	ldr	r3, [pc, #124]	@ (80075c0 <USB_CoreInit+0x9c>)
 8007544:	4013      	ands	r3, r2
 8007546:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007548:	68e3      	ldr	r3, [r4, #12]
 800754a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800754e:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8007550:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d00a      	beq.n	800756e <USB_CoreInit+0x4a>
    ret = USB_CoreReset(USBx);
 8007558:	4620      	mov	r0, r4
 800755a:	f7ff ffbd 	bl	80074d8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800755e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d01c      	beq.n	80075a0 <USB_CoreInit+0x7c>
}
 8007566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756a:	b004      	add	sp, #16
 800756c:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007574:	60e3      	str	r3, [r4, #12]
 8007576:	e7ef      	b.n	8007558 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007578:	68e3      	ldr	r3, [r4, #12]
 800757a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800757e:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff ffa9 	bl	80074d8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8007586:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800758a:	b923      	cbnz	r3, 8007596 <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800758c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800758e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007592:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007594:	e7e3      	b.n	800755e <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007596:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800759c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800759e:	e7de      	b.n	800755e <USB_CoreInit+0x3a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80075a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80075a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80075a8:	4b06      	ldr	r3, [pc, #24]	@ (80075c4 <USB_CoreInit+0xa0>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	65e3      	str	r3, [r4, #92]	@ 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	f043 0306 	orr.w	r3, r3, #6
 80075b4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	f043 0320 	orr.w	r3, r3, #32
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	e7d2      	b.n	8007566 <USB_CoreInit+0x42>
 80075c0:	ffbdffbf 	.word	0xffbdffbf
 80075c4:	03ee0000 	.word	0x03ee0000

080075c8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80075c8:	2a02      	cmp	r2, #2
 80075ca:	d00a      	beq.n	80075e2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075cc:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075ce:	68c3      	ldr	r3, [r0, #12]
 80075d0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80075d4:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075d6:	68c3      	ldr	r3, [r0, #12]
 80075d8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80075dc:	60c3      	str	r3, [r0, #12]
}
 80075de:	2000      	movs	r0, #0
 80075e0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075e2:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <USB_SetTurnaroundTime+0x9c>)
 80075e4:	440b      	add	r3, r1
 80075e6:	4a20      	ldr	r2, [pc, #128]	@ (8007668 <USB_SetTurnaroundTime+0xa0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d929      	bls.n	8007640 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075ec:	4b1f      	ldr	r3, [pc, #124]	@ (800766c <USB_SetTurnaroundTime+0xa4>)
 80075ee:	440b      	add	r3, r1
 80075f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007670 <USB_SetTurnaroundTime+0xa8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d926      	bls.n	8007644 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80075f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007674 <USB_SetTurnaroundTime+0xac>)
 80075f8:	440b      	add	r3, r1
 80075fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007678 <USB_SetTurnaroundTime+0xb0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d923      	bls.n	8007648 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007600:	4b1e      	ldr	r3, [pc, #120]	@ (800767c <USB_SetTurnaroundTime+0xb4>)
 8007602:	440b      	add	r3, r1
 8007604:	4a1e      	ldr	r2, [pc, #120]	@ (8007680 <USB_SetTurnaroundTime+0xb8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d320      	bcc.n	800764c <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800760a:	4b1e      	ldr	r3, [pc, #120]	@ (8007684 <USB_SetTurnaroundTime+0xbc>)
 800760c:	440b      	add	r3, r1
 800760e:	4a1e      	ldr	r2, [pc, #120]	@ (8007688 <USB_SetTurnaroundTime+0xc0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d91d      	bls.n	8007650 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007614:	4b1d      	ldr	r3, [pc, #116]	@ (800768c <USB_SetTurnaroundTime+0xc4>)
 8007616:	440b      	add	r3, r1
 8007618:	4a1d      	ldr	r2, [pc, #116]	@ (8007690 <USB_SetTurnaroundTime+0xc8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d31a      	bcc.n	8007654 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800761e:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <USB_SetTurnaroundTime+0xcc>)
 8007620:	440b      	add	r3, r1
 8007622:	4a1d      	ldr	r2, [pc, #116]	@ (8007698 <USB_SetTurnaroundTime+0xd0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d317      	bcc.n	8007658 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007628:	4b1c      	ldr	r3, [pc, #112]	@ (800769c <USB_SetTurnaroundTime+0xd4>)
 800762a:	440b      	add	r3, r1
 800762c:	4a1c      	ldr	r2, [pc, #112]	@ (80076a0 <USB_SetTurnaroundTime+0xd8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d314      	bcc.n	800765c <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007632:	4b1c      	ldr	r3, [pc, #112]	@ (80076a4 <USB_SetTurnaroundTime+0xdc>)
 8007634:	440b      	add	r3, r1
 8007636:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <USB_SetTurnaroundTime+0xe0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d211      	bcs.n	8007660 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 800763c:	2207      	movs	r2, #7
 800763e:	e7c6      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8007640:	220f      	movs	r2, #15
 8007642:	e7c4      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8007644:	220e      	movs	r2, #14
 8007646:	e7c2      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8007648:	220d      	movs	r2, #13
 800764a:	e7c0      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800764c:	220c      	movs	r2, #12
 800764e:	e7be      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8007650:	220b      	movs	r2, #11
 8007652:	e7bc      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8007654:	220a      	movs	r2, #10
 8007656:	e7ba      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8007658:	2209      	movs	r2, #9
 800765a:	e7b8      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800765c:	2208      	movs	r2, #8
 800765e:	e7b6      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8007660:	2206      	movs	r2, #6
 8007662:	e7b4      	b.n	80075ce <USB_SetTurnaroundTime+0x6>
 8007664:	ff275340 	.word	0xff275340
 8007668:	000c34ff 	.word	0x000c34ff
 800766c:	ff1b1e40 	.word	0xff1b1e40
 8007670:	000f423f 	.word	0x000f423f
 8007674:	ff0bdc00 	.word	0xff0bdc00
 8007678:	00124f7f 	.word	0x00124f7f
 800767c:	fef98c80 	.word	0xfef98c80
 8007680:	0013d620 	.word	0x0013d620
 8007684:	fee5b660 	.word	0xfee5b660
 8007688:	0016e35f 	.word	0x0016e35f
 800768c:	feced300 	.word	0xfeced300
 8007690:	001b7740 	.word	0x001b7740
 8007694:	feb35bc0 	.word	0xfeb35bc0
 8007698:	002191c0 	.word	0x002191c0
 800769c:	fe91ca00 	.word	0xfe91ca00
 80076a0:	00387520 	.word	0x00387520
 80076a4:	fe5954e0 	.word	0xfe5954e0
 80076a8:	00419ce0 	.word	0x00419ce0

080076ac <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076ac:	6883      	ldr	r3, [r0, #8]
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	6083      	str	r3, [r0, #8]
}
 80076b4:	2000      	movs	r0, #0
 80076b6:	4770      	bx	lr

080076b8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076b8:	6883      	ldr	r3, [r0, #8]
 80076ba:	f023 0301 	bic.w	r3, r3, #1
 80076be:	6083      	str	r3, [r0, #8]
}
 80076c0:	2000      	movs	r0, #0
 80076c2:	4770      	bx	lr

080076c4 <USB_FlushTxFifo>:
{
 80076c4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	9301      	str	r3, [sp, #4]
    count++;
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	3301      	adds	r3, #1
 80076ce:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d6:	d815      	bhi.n	8007704 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d8:	6903      	ldr	r3, [r0, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	daf5      	bge.n	80076ca <USB_FlushTxFifo+0x6>
  count = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076e2:	0189      	lsls	r1, r1, #6
 80076e4:	f041 0120 	orr.w	r1, r1, #32
 80076e8:	6101      	str	r1, [r0, #16]
    count++;
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	3301      	adds	r3, #1
 80076ee:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076f6:	d808      	bhi.n	800770a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076f8:	6903      	ldr	r3, [r0, #16]
 80076fa:	f013 0f20 	tst.w	r3, #32
 80076fe:	d1f4      	bne.n	80076ea <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8007700:	2000      	movs	r0, #0
 8007702:	e000      	b.n	8007706 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8007704:	2003      	movs	r0, #3
}
 8007706:	b002      	add	sp, #8
 8007708:	4770      	bx	lr
      return HAL_TIMEOUT;
 800770a:	2003      	movs	r0, #3
 800770c:	e7fb      	b.n	8007706 <USB_FlushTxFifo+0x42>

0800770e <USB_FlushRxFifo>:
{
 800770e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	9301      	str	r3, [sp, #4]
    count++;
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	3301      	adds	r3, #1
 8007718:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007720:	d813      	bhi.n	800774a <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007722:	6903      	ldr	r3, [r0, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	daf5      	bge.n	8007714 <USB_FlushRxFifo+0x6>
  count = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800772c:	2310      	movs	r3, #16
 800772e:	6103      	str	r3, [r0, #16]
    count++;
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	3301      	adds	r3, #1
 8007734:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800773c:	d808      	bhi.n	8007750 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800773e:	6903      	ldr	r3, [r0, #16]
 8007740:	f013 0f10 	tst.w	r3, #16
 8007744:	d1f4      	bne.n	8007730 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8007746:	2000      	movs	r0, #0
 8007748:	e000      	b.n	800774c <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 800774a:	2003      	movs	r0, #3
}
 800774c:	b002      	add	sp, #8
 800774e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007750:	2003      	movs	r0, #3
 8007752:	e7fb      	b.n	800774c <USB_FlushRxFifo+0x3e>

08007754 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007754:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007758:	4319      	orrs	r1, r3
 800775a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800775e:	2000      	movs	r0, #0
 8007760:	4770      	bx	lr
	...

08007764 <USB_DevInit>:
{
 8007764:	b084      	sub	sp, #16
 8007766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007768:	4604      	mov	r4, r0
 800776a:	a807      	add	r0, sp, #28
 800776c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007770:	2300      	movs	r3, #0
 8007772:	e006      	b.n	8007782 <USB_DevInit+0x1e>
    USBx->DIEPTXF[i] = 0U;
 8007774:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007778:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800777c:	2100      	movs	r1, #0
 800777e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007780:	3301      	adds	r3, #1
 8007782:	2b0e      	cmp	r3, #14
 8007784:	d9f6      	bls.n	8007774 <USB_DevInit+0x10>
  if (cfg.vbus_sensing_enable == 0U)
 8007786:	f89d 6026 	ldrb.w	r6, [sp, #38]	@ 0x26
 800778a:	bb06      	cbnz	r6, 80077ce <USB_DevInit+0x6a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	@ 0x804
 8007790:	f043 0302 	orr.w	r3, r3, #2
 8007794:	f8c4 3804 	str.w	r3, [r4, #2052]	@ 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007798:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800779a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800779e:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a6:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ae:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077b6:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d111      	bne.n	80077e2 <USB_DevInit+0x7e>
    if (cfg.speed == USBD_HS_SPEED)
 80077be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80077c2:	b94b      	cbnz	r3, 80077d8 <USB_DevInit+0x74>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077c4:	2100      	movs	r1, #0
 80077c6:	4620      	mov	r0, r4
 80077c8:	f7ff ffc4 	bl	8007754 <USB_SetDevSpeed>
 80077cc:	e00d      	b.n	80077ea <USB_DevInit+0x86>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077ce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80077d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80077d6:	e7eb      	b.n	80077b0 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077d8:	2101      	movs	r1, #1
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff ffba 	bl	8007754 <USB_SetDevSpeed>
 80077e0:	e003      	b.n	80077ea <USB_DevInit+0x86>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077e2:	2103      	movs	r1, #3
 80077e4:	4620      	mov	r0, r4
 80077e6:	f7ff ffb5 	bl	8007754 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ea:	2110      	movs	r1, #16
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff ff69 	bl	80076c4 <USB_FlushTxFifo>
 80077f2:	4605      	mov	r5, r0
 80077f4:	b100      	cbz	r0, 80077f8 <USB_DevInit+0x94>
    ret = HAL_ERROR;
 80077f6:	2501      	movs	r5, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7ff ff88 	bl	800770e <USB_FlushRxFifo>
 80077fe:	b100      	cbz	r0, 8007802 <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 8007800:	2501      	movs	r5, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8007802:	f504 6c00 	add.w	ip, r4, #2048	@ 0x800
 8007806:	2300      	movs	r3, #0
 8007808:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800780c:	f8cc 3014 	str.w	r3, [ip, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007810:	f8cc 301c 	str.w	r3, [ip, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007814:	e00d      	b.n	8007832 <USB_DevInit+0xce>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800781a:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 800781e:	e002      	b.n	8007826 <USB_DevInit+0xc2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007820:	2000      	movs	r0, #0
 8007822:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007826:	2200      	movs	r2, #0
 8007828:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800782a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800782e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007830:	3301      	adds	r3, #1
 8007832:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8007836:	4299      	cmp	r1, r3
 8007838:	d90e      	bls.n	8007858 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800783a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800783e:	f502 6110 	add.w	r1, r2, #2304	@ 0x900
 8007842:	f8d2 0900 	ldr.w	r0, [r2, #2304]	@ 0x900
 8007846:	2800      	cmp	r0, #0
 8007848:	daea      	bge.n	8007820 <USB_DevInit+0xbc>
      if (i == 0U)
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e3      	bne.n	8007816 <USB_DevInit+0xb2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800784e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8007852:	f8c2 0900 	str.w	r0, [r2, #2304]	@ 0x900
 8007856:	e7e6      	b.n	8007826 <USB_DevInit+0xc2>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007858:	2300      	movs	r3, #0
 800785a:	e00a      	b.n	8007872 <USB_DevInit+0x10e>
      if (i == 0U)
 800785c:	b1bb      	cbz	r3, 800788e <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800785e:	f04f 4790 	mov.w	r7, #1207959552	@ 0x48000000
 8007862:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007866:	2200      	movs	r2, #0
 8007868:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800786a:	f64f 327f 	movw	r2, #64383	@ 0xfb7f
 800786e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007870:	3301      	adds	r3, #1
 8007872:	4299      	cmp	r1, r3
 8007874:	d910      	bls.n	8007898 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007876:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800787a:	f502 6030 	add.w	r0, r2, #2816	@ 0xb00
 800787e:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	@ 0xb00
 8007882:	2f00      	cmp	r7, #0
 8007884:	dbea      	blt.n	800785c <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007886:	2700      	movs	r7, #0
 8007888:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 800788c:	e7eb      	b.n	8007866 <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800788e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
 8007892:	f8c2 7b00 	str.w	r7, [r2, #2816]	@ 0xb00
 8007896:	e7e6      	b.n	8007866 <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007898:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800789c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a0:	f8cc 3010 	str.w	r3, [ip, #16]
  USBx->GINTMSK = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078a8:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80078ac:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80078ae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80078b2:	b91b      	cbnz	r3, 80078bc <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078b4:	69a3      	ldr	r3, [r4, #24]
 80078b6:	f043 0310 	orr.w	r3, r3, #16
 80078ba:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078bc:	69a2      	ldr	r2, [r4, #24]
 80078be:	4b0b      	ldr	r3, [pc, #44]	@ (80078ec <USB_DevInit+0x188>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80078c4:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 80078c8:	b11b      	cbz	r3, 80078d2 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078ca:	69a3      	ldr	r3, [r4, #24]
 80078cc:	f043 0308 	orr.w	r3, r3, #8
 80078d0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80078d2:	2e01      	cmp	r6, #1
 80078d4:	d004      	beq.n	80078e0 <USB_DevInit+0x17c>
}
 80078d6:	4628      	mov	r0, r5
 80078d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078dc:	b004      	add	sp, #16
 80078de:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078e0:	69a2      	ldr	r2, [r4, #24]
 80078e2:	4b03      	ldr	r3, [pc, #12]	@ (80078f0 <USB_DevInit+0x18c>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	61a3      	str	r3, [r4, #24]
 80078e8:	e7f5      	b.n	80078d6 <USB_DevInit+0x172>
 80078ea:	bf00      	nop
 80078ec:	803c3800 	.word	0x803c3800
 80078f0:	40000004 	.word	0x40000004

080078f4 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078f4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 80078f8:	f003 0306 	and.w	r3, r3, #6
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d004      	beq.n	800790a <USB_GetDevSpeed+0x16>
 8007900:	2b06      	cmp	r3, #6
 8007902:	d004      	beq.n	800790e <USB_GetDevSpeed+0x1a>
 8007904:	b92b      	cbnz	r3, 8007912 <USB_GetDevSpeed+0x1e>
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007906:	2000      	movs	r0, #0
 8007908:	4770      	bx	lr
 800790a:	2002      	movs	r0, #2
 800790c:	4770      	bx	lr
 800790e:	2002      	movs	r0, #2
 8007910:	4770      	bx	lr
 8007912:	200f      	movs	r0, #15
}
 8007914:	4770      	bx	lr
	...

08007918 <USB_ActivateEndpoint>:
{
 8007918:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800791a:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800791e:	784b      	ldrb	r3, [r1, #1]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d021      	beq.n	8007968 <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007924:	f500 6e00 	add.w	lr, r0, #2048	@ 0x800
 8007928:	f8d0 381c 	ldr.w	r3, [r0, #2076]	@ 0x81c
 800792c:	f00c 040f 	and.w	r4, ip, #15
 8007930:	2201      	movs	r2, #1
 8007932:	40a2      	lsls	r2, r4
 8007934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007938:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800793c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8007940:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007944:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007948:	d10c      	bne.n	8007964 <USB_ActivateEndpoint+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800794a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 800794e:	688b      	ldr	r3, [r1, #8]
 8007950:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007954:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007956:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800795a:	431a      	orrs	r2, r3
 800795c:	4b13      	ldr	r3, [pc, #76]	@ (80079ac <USB_ActivateEndpoint+0x94>)
 800795e:	4313      	orrs	r3, r2
 8007960:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8007964:	2000      	movs	r0, #0
 8007966:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007968:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 800796c:	f00c 0e0f 	and.w	lr, ip, #15
 8007970:	fa03 f30e 	lsl.w	r3, r3, lr
 8007974:	b29b      	uxth	r3, r3
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c0 381c 	str.w	r3, [r0, #2076]	@ 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800797c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8007980:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007984:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007988:	d1ec      	bne.n	8007964 <USB_ActivateEndpoint+0x4c>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800798a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 800798e:	688b      	ldr	r3, [r1, #8]
 8007990:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007994:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007996:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800799a:	ea43 538c 	orr.w	r3, r3, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800799e:	431a      	orrs	r2, r3
 80079a0:	4b02      	ldr	r3, [pc, #8]	@ (80079ac <USB_ActivateEndpoint+0x94>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 80079a8:	e7dc      	b.n	8007964 <USB_ActivateEndpoint+0x4c>
 80079aa:	bf00      	nop
 80079ac:	10008000 	.word	0x10008000

080079b0 <USB_DeactivateEndpoint>:
{
 80079b0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80079b2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80079b4:	784a      	ldrb	r2, [r1, #1]
 80079b6:	2a01      	cmp	r2, #1
 80079b8:	d026      	beq.n	8007a08 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ba:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80079be:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	db52      	blt.n	8007a6c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079c6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	@ 0x83c
 80079ca:	780a      	ldrb	r2, [r1, #0]
 80079cc:	f002 020f 	and.w	r2, r2, #15
 80079d0:	f04f 0c01 	mov.w	ip, #1
 80079d4:	fa0c f202 	lsl.w	r2, ip, r2
 80079d8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80079dc:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079e0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 80079e4:	7809      	ldrb	r1, [r1, #0]
 80079e6:	f001 010f 	and.w	r1, r1, #15
 80079ea:	fa0c fc01 	lsl.w	ip, ip, r1
 80079ee:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 80079f2:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80079f6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 80079fa:	4a23      	ldr	r2, [pc, #140]	@ (8007a88 <USB_DeactivateEndpoint+0xd8>)
 80079fc:	400a      	ands	r2, r1
 80079fe:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
}
 8007a02:	2000      	movs	r0, #0
 8007a04:	bc30      	pop	{r4, r5}
 8007a06:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a08:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007a0c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	db1e      	blt.n	8007a52 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a14:	f8d0 583c 	ldr.w	r5, [r0, #2108]	@ 0x83c
 8007a18:	780a      	ldrb	r2, [r1, #0]
 8007a1a:	f002 020f 	and.w	r2, r2, #15
 8007a1e:	2401      	movs	r4, #1
 8007a20:	fa04 f202 	lsl.w	r2, r4, r2
 8007a24:	b292      	uxth	r2, r2
 8007a26:	ea25 0202 	bic.w	r2, r5, r2
 8007a2a:	f8c0 283c 	str.w	r2, [r0, #2108]	@ 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a2e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	@ 0x81c
 8007a32:	7809      	ldrb	r1, [r1, #0]
 8007a34:	f001 010f 	and.w	r1, r1, #15
 8007a38:	408c      	lsls	r4, r1
 8007a3a:	b2a4      	uxth	r4, r4
 8007a3c:	ea22 0204 	bic.w	r2, r2, r4
 8007a40:	f8c0 281c 	str.w	r2, [r0, #2076]	@ 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a44:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 8007a48:	4a10      	ldr	r2, [pc, #64]	@ (8007a8c <USB_DeactivateEndpoint+0xdc>)
 8007a4a:	400a      	ands	r2, r1
 8007a4c:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8007a50:	e7d7      	b.n	8007a02 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a52:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007a56:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007a5a:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a5e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
 8007a62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007a66:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
 8007a6a:	e7d3      	b.n	8007a14 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a6c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007a70:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007a74:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a78:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8007a7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007a80:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8007a84:	e79f      	b.n	80079c6 <USB_DeactivateEndpoint+0x16>
 8007a86:	bf00      	nop
 8007a88:	eff37800 	.word	0xeff37800
 8007a8c:	ec337800 	.word	0xec337800

08007a90 <USB_EPStopXfer>:
{
 8007a90:	b410      	push	{r4}
 8007a92:	b083      	sub	sp, #12
 8007a94:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8007a9a:	7848      	ldrb	r0, [r1, #1]
 8007a9c:	2801      	cmp	r0, #1
 8007a9e:	d00b      	beq.n	8007ab8 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007aa0:	780b      	ldrb	r3, [r1, #0]
 8007aa2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007aa6:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	db2d      	blt.n	8007b0a <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007aae:	2000      	movs	r0, #0
}
 8007ab0:	b003      	add	sp, #12
 8007ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ab6:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ab8:	780b      	ldrb	r3, [r1, #0]
 8007aba:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007abe:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	db01      	blt.n	8007aca <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e7f2      	b.n	8007ab0 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007aca:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007ace:	f044 6400 	orr.w	r4, r4, #134217728	@ 0x8000000
 8007ad2:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ad6:	780b      	ldrb	r3, [r1, #0]
 8007ad8:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007adc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	@ 0x900
 8007ae0:	f044 4480 	orr.w	r4, r4, #1073741824	@ 0x40000000
 8007ae4:	f8c3 4900 	str.w	r4, [r3, #2304]	@ 0x900
        count++;
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007aee:	9c01      	ldr	r4, [sp, #4]
 8007af0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d8db      	bhi.n	8007ab0 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007af8:	780b      	ldrb	r3, [r1, #0]
 8007afa:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007afe:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dbf0      	blt.n	8007ae8 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 8007b06:	2000      	movs	r0, #0
 8007b08:	e7d2      	b.n	8007ab0 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b0a:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007b0e:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 8007b12:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b16:	780b      	ldrb	r3, [r1, #0]
 8007b18:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007b1c:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	@ 0xb00
 8007b20:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8007b24:	f8c3 0b00 	str.w	r0, [r3, #2816]	@ 0xb00
        count++;
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8007b2e:	9801      	ldr	r0, [sp, #4]
 8007b30:	f242 7310 	movw	r3, #10000	@ 0x2710
 8007b34:	4298      	cmp	r0, r3
 8007b36:	d808      	bhi.n	8007b4a <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b38:	780b      	ldrb	r3, [r1, #0]
 8007b3a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8007b3e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dbf0      	blt.n	8007b28 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7b2      	b.n	8007ab0 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	e7b0      	b.n	8007ab0 <USB_EPStopXfer+0x20>

08007b4e <USB_WritePacket>:
{
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8007b54:	b984      	cbnz	r4, 8007b78 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b56:	3303      	adds	r3, #3
 8007b58:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 8007b5c:	f04f 0c00 	mov.w	ip, #0
 8007b60:	e008      	b.n	8007b74 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b62:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8007b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b6a:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b6e:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8007b70:	f10c 0c01 	add.w	ip, ip, #1
 8007b74:	45f4      	cmp	ip, lr
 8007b76:	d3f4      	bcc.n	8007b62 <USB_WritePacket+0x14>
}
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd10      	pop	{r4, pc}

08007b7c <USB_EPStartXfer>:
{
 8007b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7e:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8007b80:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8007b82:	784b      	ldrb	r3, [r1, #1]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d02d      	beq.n	8007be4 <USB_EPStartXfer+0x68>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b88:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8007b8c:	f50c 6330 	add.w	r3, ip, #2816	@ 0xb00
 8007b90:	691d      	ldr	r5, [r3, #16]
 8007b92:	f36f 0512 	bfc	r5, #0, #19
 8007b96:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b98:	691d      	ldr	r5, [r3, #16]
 8007b9a:	f36f 45dc 	bfc	r5, #19, #10
 8007b9e:	611d      	str	r5, [r3, #16]
    if (epnum == 0U)
 8007ba0:	2c00      	cmp	r4, #0
 8007ba2:	f040 80ce 	bne.w	8007d42 <USB_EPStartXfer+0x1c6>
      if (ep->xfer_len > 0U)
 8007ba6:	690c      	ldr	r4, [r1, #16]
 8007ba8:	b10c      	cbz	r4, 8007bae <USB_EPStartXfer+0x32>
        ep->xfer_len = ep->maxpacket;
 8007baa:	688c      	ldr	r4, [r1, #8]
 8007bac:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 8007bae:	688c      	ldr	r4, [r1, #8]
 8007bb0:	620c      	str	r4, [r1, #32]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007bb2:	691d      	ldr	r5, [r3, #16]
 8007bb4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007bb8:	432c      	orrs	r4, r5
 8007bba:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bbc:	691c      	ldr	r4, [r3, #16]
 8007bbe:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007bc2:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8007bc4:	2a01      	cmp	r2, #1
 8007bc6:	f000 80df 	beq.w	8007d88 <USB_EPStartXfer+0x20c>
    if (ep->type == EP_TYPE_ISOC)
 8007bca:	790b      	ldrb	r3, [r1, #4]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	f000 80e1 	beq.w	8007d94 <USB_EPStartXfer+0x218>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bd2:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007bd6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007bda:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
}
 8007bde:	2000      	movs	r0, #0
 8007be0:	b003      	add	sp, #12
 8007be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	bb73      	cbnz	r3, 8007c46 <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be8:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007bec:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007bf0:	f36f 45dc 	bfc	r5, #19, #10
 8007bf4:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bf8:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007bfc:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007c00:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c04:	f8d3 5910 	ldr.w	r5, [r3, #2320]	@ 0x910
 8007c08:	f36f 0512 	bfc	r5, #0, #19
 8007c0c:	f8c3 5910 	str.w	r5, [r3, #2320]	@ 0x910
    if (dma == 1U)
 8007c10:	2a01      	cmp	r2, #1
 8007c12:	d054      	beq.n	8007cbe <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c14:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007c18:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007c1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c20:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
      if (ep->type != EP_TYPE_ISOC)
 8007c24:	790b      	ldrb	r3, [r1, #4]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d072      	beq.n	8007d10 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 8007c2a:	690b      	ldr	r3, [r1, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0d6      	beq.n	8007bde <USB_EPStartXfer+0x62>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c30:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
 8007c34:	7809      	ldrb	r1, [r1, #0]
 8007c36:	f001 010f 	and.w	r1, r1, #15
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	408a      	lsls	r2, r1
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
 8007c44:	e7cb      	b.n	8007bde <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c46:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4e:	691d      	ldr	r5, [r3, #16]
 8007c50:	f36f 0512 	bfc	r5, #0, #19
 8007c54:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c56:	691d      	ldr	r5, [r3, #16]
 8007c58:	f36f 45dc 	bfc	r5, #19, #10
 8007c5c:	611d      	str	r5, [r3, #16]
      if (epnum == 0U)
 8007c5e:	b984      	cbnz	r4, 8007c82 <USB_EPStartXfer+0x106>
        if (ep->xfer_len > ep->maxpacket)
 8007c60:	690e      	ldr	r6, [r1, #16]
 8007c62:	688d      	ldr	r5, [r1, #8]
 8007c64:	42ae      	cmp	r6, r5
 8007c66:	d900      	bls.n	8007c6a <USB_EPStartXfer+0xee>
          ep->xfer_len = ep->maxpacket;
 8007c68:	610d      	str	r5, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c6a:	691d      	ldr	r5, [r3, #16]
 8007c6c:	f445 2500 	orr.w	r5, r5, #524288	@ 0x80000
 8007c70:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c72:	691d      	ldr	r5, [r3, #16]
 8007c74:	690e      	ldr	r6, [r1, #16]
 8007c76:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 8007c7a:	ea45 050c 	orr.w	r5, r5, ip
 8007c7e:	611d      	str	r5, [r3, #16]
 8007c80:	e7c6      	b.n	8007c10 <USB_EPStartXfer+0x94>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c82:	690d      	ldr	r5, [r1, #16]
 8007c84:	688e      	ldr	r6, [r1, #8]
 8007c86:	4435      	add	r5, r6
 8007c88:	3d01      	subs	r5, #1
 8007c8a:	fbb5 f5f6 	udiv	r5, r5, r6
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007c8e:	691e      	ldr	r6, [r3, #16]
 8007c90:	fa1f fc85 	uxth.w	ip, r5
 8007c94:	4f49      	ldr	r7, [pc, #292]	@ (8007dbc <USB_EPStartXfer+0x240>)
 8007c96:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8007c9a:	4335      	orrs	r5, r6
 8007c9c:	611d      	str	r5, [r3, #16]
        if (ep->type == EP_TYPE_ISOC)
 8007c9e:	790d      	ldrb	r5, [r1, #4]
 8007ca0:	2d01      	cmp	r5, #1
 8007ca2:	d1e6      	bne.n	8007c72 <USB_EPStartXfer+0xf6>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ca4:	691d      	ldr	r5, [r3, #16]
 8007ca6:	f025 45c0 	bic.w	r5, r5, #1610612736	@ 0x60000000
 8007caa:	611d      	str	r5, [r3, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007cac:	691d      	ldr	r5, [r3, #16]
 8007cae:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8007cb2:	f00c 4cc0 	and.w	ip, ip, #1610612736	@ 0x60000000
 8007cb6:	ea45 050c 	orr.w	r5, r5, ip
 8007cba:	611d      	str	r5, [r3, #16]
 8007cbc:	e7d9      	b.n	8007c72 <USB_EPStartXfer+0xf6>
      if ((uint32_t)ep->dma_addr != 0U)
 8007cbe:	69cb      	ldr	r3, [r1, #28]
 8007cc0:	b11b      	cbz	r3, 8007cca <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cc2:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007cc6:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
      if (ep->type == EP_TYPE_ISOC)
 8007cca:	790b      	ldrb	r3, [r1, #4]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d008      	beq.n	8007ce2 <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cd0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8007cd4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007cd8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007cdc:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007ce0:	e77d      	b.n	8007bde <USB_EPStartXfer+0x62>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ce2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007ce6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007cea:	d108      	bne.n	8007cfe <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cec:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007cf0:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007cf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cf8:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007cfc:	e7e8      	b.n	8007cd0 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cfe:	eb00 1244 	add.w	r2, r0, r4, lsl #5
 8007d02:	f8d2 3900 	ldr.w	r3, [r2, #2304]	@ 0x900
 8007d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d0a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
 8007d0e:	e7df      	b.n	8007cd0 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d10:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007d14:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007d18:	d10c      	bne.n	8007d34 <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d1a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007d1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d22:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	8a0b      	ldrh	r3, [r1, #16]
 8007d2a:	780a      	ldrb	r2, [r1, #0]
 8007d2c:	68c9      	ldr	r1, [r1, #12]
 8007d2e:	f7ff ff0e 	bl	8007b4e <USB_WritePacket>
 8007d32:	e754      	b.n	8007bde <USB_EPStartXfer+0x62>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d34:	f8d4 3900 	ldr.w	r3, [r4, #2304]	@ 0x900
 8007d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d3c:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
 8007d40:	e7f1      	b.n	8007d26 <USB_EPStartXfer+0x1aa>
      if (ep->xfer_len == 0U)
 8007d42:	690c      	ldr	r4, [r1, #16]
 8007d44:	b954      	cbnz	r4, 8007d5c <USB_EPStartXfer+0x1e0>
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d46:	691c      	ldr	r4, [r3, #16]
 8007d48:	688d      	ldr	r5, [r1, #8]
 8007d4a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007d4e:	432c      	orrs	r4, r5
 8007d50:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d52:	691c      	ldr	r4, [r3, #16]
 8007d54:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8007d58:	611c      	str	r4, [r3, #16]
 8007d5a:	e733      	b.n	8007bc4 <USB_EPStartXfer+0x48>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d5c:	688d      	ldr	r5, [r1, #8]
 8007d5e:	442c      	add	r4, r5
 8007d60:	3c01      	subs	r4, #1
 8007d62:	fbb4 f4f5 	udiv	r4, r4, r5
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007d66:	b2a4      	uxth	r4, r4
 8007d68:	fb04 f505 	mul.w	r5, r4, r5
 8007d6c:	620d      	str	r5, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d6e:	691d      	ldr	r5, [r3, #16]
 8007d70:	4e12      	ldr	r6, [pc, #72]	@ (8007dbc <USB_EPStartXfer+0x240>)
 8007d72:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8007d76:	432c      	orrs	r4, r5
 8007d78:	611c      	str	r4, [r3, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d7a:	691c      	ldr	r4, [r3, #16]
 8007d7c:	6a0d      	ldr	r5, [r1, #32]
 8007d7e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8007d82:	432c      	orrs	r4, r5
 8007d84:	611c      	str	r4, [r3, #16]
 8007d86:	e71d      	b.n	8007bc4 <USB_EPStartXfer+0x48>
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d88:	68ca      	ldr	r2, [r1, #12]
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	f43f af1d 	beq.w	8007bca <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d90:	615a      	str	r2, [r3, #20]
 8007d92:	e71a      	b.n	8007bca <USB_EPStartXfer+0x4e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d94:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 8007d98:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8007d9c:	d106      	bne.n	8007dac <USB_EPStartXfer+0x230>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d9e:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007da2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007da6:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007daa:	e712      	b.n	8007bd2 <USB_EPStartXfer+0x56>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007dac:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	@ 0xb00
 8007db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db4:	f8cc 3b00 	str.w	r3, [ip, #2816]	@ 0xb00
 8007db8:	e70b      	b.n	8007bd2 <USB_EPStartXfer+0x56>
 8007dba:	bf00      	nop
 8007dbc:	1ff80000 	.word	0x1ff80000

08007dc0 <USB_ReadPacket>:
{
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4684      	mov	ip, r0
 8007dc4:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8007dc6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8007dca:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e005      	b.n	8007dde <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dd2:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 8007dd6:	6809      	ldr	r1, [r1, #0]
 8007dd8:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8007ddc:	3301      	adds	r3, #1
 8007dde:	4573      	cmp	r3, lr
 8007de0:	d3f7      	bcc.n	8007dd2 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8007de2:	b17a      	cbz	r2, 8007e04 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007de4:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 8007de8:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8007dec:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dee:	b2cb      	uxtb	r3, r1
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	fa24 f303 	lsr.w	r3, r4, r3
 8007df6:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8007dfa:	3101      	adds	r1, #1
      remaining_bytes--;
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	d1f4      	bne.n	8007dee <USB_ReadPacket+0x2e>
}
 8007e04:	bd10      	pop	{r4, pc}

08007e06 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007e06:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007e08:	784a      	ldrb	r2, [r1, #1]
 8007e0a:	2a01      	cmp	r2, #1
 8007e0c:	d014      	beq.n	8007e38 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007e12:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	db06      	blt.n	8007e28 <USB_EPSetStall+0x22>
 8007e1a:	b12b      	cbz	r3, 8007e28 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e1c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007e20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e24:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007e2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e30:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
}
 8007e34:	2000      	movs	r0, #0
 8007e36:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007e3c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	db06      	blt.n	8007e52 <USB_EPSetStall+0x4c>
 8007e44:	b12b      	cbz	r3, 8007e52 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e46:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007e4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e4e:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e5a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007e5e:	e7e9      	b.n	8007e34 <USB_EPSetStall+0x2e>

08007e60 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8007e60:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8007e62:	784a      	ldrb	r2, [r1, #1]
 8007e64:	2a01      	cmp	r2, #1
 8007e66:	d00e      	beq.n	8007e86 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e68:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007e6c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e74:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e78:	790b      	ldrb	r3, [r1, #4]
 8007e7a:	3b02      	subs	r3, #2
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d915      	bls.n	8007eae <USB_EPClearStall+0x4e>
}
 8007e82:	2000      	movs	r0, #0
 8007e84:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e86:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007e8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007e8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e92:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e96:	790b      	ldrb	r3, [r1, #4]
 8007e98:	3b02      	subs	r3, #2
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d8f0      	bhi.n	8007e82 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ea0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ea8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
 8007eac:	e7e9      	b.n	8007e82 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007eae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8007eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eb6:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8007eba:	e7e2      	b.n	8007e82 <USB_EPClearStall+0x22>

08007ebc <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ebc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007ec0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007ec4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ec8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8007ecc:	0109      	lsls	r1, r1, #4
 8007ece:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
}
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4770      	bx	lr

08007edc <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007edc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ee8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007eec:	f023 0302 	bic.w	r3, r3, #2
 8007ef0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4770      	bx	lr

08007ef8 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ef8:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8007efc:	f023 0303 	bic.w	r3, r3, #3
 8007f00:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f04:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007f08:	f043 0302 	orr.w	r3, r3, #2
 8007f0c:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007f10:	2000      	movs	r0, #0
 8007f12:	4770      	bx	lr

08007f14 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007f14:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007f16:	6980      	ldr	r0, [r0, #24]
}
 8007f18:	4010      	ands	r0, r2
 8007f1a:	4770      	bx	lr

08007f1c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007f1c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007f20:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f24:	69c0      	ldr	r0, [r0, #28]
 8007f26:	4018      	ands	r0, r3
}
 8007f28:	0c00      	lsrs	r0, r0, #16
 8007f2a:	4770      	bx	lr

08007f2c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007f2c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 8007f30:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f34:	69c0      	ldr	r0, [r0, #28]
 8007f36:	4018      	ands	r0, r3
}
 8007f38:	b280      	uxth	r0, r0
 8007f3a:	4770      	bx	lr

08007f3c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f3c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007f40:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f44:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8007f48:	6940      	ldr	r0, [r0, #20]
}
 8007f4a:	4010      	ands	r0, r2
 8007f4c:	4770      	bx	lr

08007f4e <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8007f4e:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f52:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f56:	f001 0c0f 	and.w	ip, r1, #15
 8007f5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f5e:	01db      	lsls	r3, r3, #7
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f64:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8007f68:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 8007f6c:	6880      	ldr	r0, [r0, #8]
}
 8007f6e:	4018      	ands	r0, r3
 8007f70:	4770      	bx	lr

08007f72 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007f72:	6940      	ldr	r0, [r0, #20]
}
 8007f74:	f000 0001 	and.w	r0, r0, #1
 8007f78:	4770      	bx	lr

08007f7a <USB_SetCurrentMode>:
{
 8007f7a:	b538      	push	{r3, r4, r5, lr}
 8007f7c:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f7e:	68c3      	ldr	r3, [r0, #12]
 8007f80:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007f84:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007f86:	2901      	cmp	r1, #1
 8007f88:	d013      	beq.n	8007fb2 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8007f8a:	bb19      	cbnz	r1, 8007fd4 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f8c:	68c3      	ldr	r3, [r0, #12]
 8007f8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f92:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007f94:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007f96:	200a      	movs	r0, #10
 8007f98:	f7f8 fe10 	bl	8000bbc <HAL_Delay>
      ms += 10U;
 8007f9c:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f7ff ffe7 	bl	8007f72 <USB_GetMode>
 8007fa4:	b108      	cbz	r0, 8007faa <USB_SetCurrentMode+0x30>
 8007fa6:	2cc7      	cmp	r4, #199	@ 0xc7
 8007fa8:	d9f5      	bls.n	8007f96 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007faa:	2cc8      	cmp	r4, #200	@ 0xc8
 8007fac:	d014      	beq.n	8007fd8 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8007fae:	2000      	movs	r0, #0
}
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fb2:	68c3      	ldr	r3, [r0, #12]
 8007fb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fb8:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8007fba:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8007fbc:	200a      	movs	r0, #10
 8007fbe:	f7f8 fdfd 	bl	8000bbc <HAL_Delay>
      ms += 10U;
 8007fc2:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff ffd4 	bl	8007f72 <USB_GetMode>
 8007fca:	2801      	cmp	r0, #1
 8007fcc:	d0ed      	beq.n	8007faa <USB_SetCurrentMode+0x30>
 8007fce:	2cc7      	cmp	r4, #199	@ 0xc7
 8007fd0:	d9f4      	bls.n	8007fbc <USB_SetCurrentMode+0x42>
 8007fd2:	e7ea      	b.n	8007faa <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	e7eb      	b.n	8007fb0 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7e9      	b.n	8007fb0 <USB_SetCurrentMode+0x36>

08007fdc <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fdc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 8007fe0:	f36f 030a 	bfc	r3, #0, #11
 8007fe4:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fe8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8007fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ff0:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	4770      	bx	lr

08007ff8 <USB_EP0_OutStart>:
{
 8007ff8:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ffa:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ffc:	4b15      	ldr	r3, [pc, #84]	@ (8008054 <USB_EP0_OutStart+0x5c>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	d903      	bls.n	800800a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008002:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008006:	2b00      	cmp	r3, #0
 8008008:	db16      	blt.n	8008038 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800800a:	2400      	movs	r4, #0
 800800c:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008010:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008014:	f444 2400 	orr.w	r4, r4, #524288	@ 0x80000
 8008018:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800801c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 8008020:	f044 0418 	orr.w	r4, r4, #24
 8008024:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008028:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	@ 0xb10
 800802c:	f044 44c0 	orr.w	r4, r4, #1610612736	@ 0x60000000
 8008030:	f8c0 4b10 	str.w	r4, [r0, #2832]	@ 0xb10
  if (dma == 1U)
 8008034:	2901      	cmp	r1, #1
 8008036:	d003      	beq.n	8008040 <USB_EP0_OutStart+0x48>
}
 8008038:	2000      	movs	r0, #0
 800803a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803e:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008040:	f8c0 2b14 	str.w	r2, [r0, #2836]	@ 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008044:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 8008048:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800804c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 8008050:	e7f2      	b.n	8008038 <USB_EP0_OutStart+0x40>
 8008052:	bf00      	nop
 8008054:	4f54300a 	.word	0x4f54300a

08008058 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008058:	4a2b      	ldr	r2, [pc, #172]	@ (8008108 <SystemInit+0xb0>)
 800805a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800805e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008062:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008066:	4b29      	ldr	r3, [pc, #164]	@ (800810c <SystemInit+0xb4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	2b06      	cmp	r3, #6
 8008070:	d806      	bhi.n	8008080 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008072:	4a26      	ldr	r2, [pc, #152]	@ (800810c <SystemInit+0xb4>)
 8008074:	6813      	ldr	r3, [r2, #0]
 8008076:	f023 030f 	bic.w	r3, r3, #15
 800807a:	f043 0307 	orr.w	r3, r3, #7
 800807e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008080:	4b23      	ldr	r3, [pc, #140]	@ (8008110 <SystemInit+0xb8>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	f042 0201 	orr.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	4a20      	ldr	r2, [pc, #128]	@ (8008114 <SystemInit+0xbc>)
 8008092:	400a      	ands	r2, r1
 8008094:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008096:	4b1d      	ldr	r3, [pc, #116]	@ (800810c <SystemInit+0xb4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f013 0f08 	tst.w	r3, #8
 800809e:	d006      	beq.n	80080ae <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80080a0:	4a1a      	ldr	r2, [pc, #104]	@ (800810c <SystemInit+0xb4>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	f023 030f 	bic.w	r3, r3, #15
 80080a8:	f043 0307 	orr.w	r3, r3, #7
 80080ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <SystemInit+0xb8>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80080b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80080b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80080b8:	4917      	ldr	r1, [pc, #92]	@ (8008118 <SystemInit+0xc0>)
 80080ba:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80080bc:	4917      	ldr	r1, [pc, #92]	@ (800811c <SystemInit+0xc4>)
 80080be:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80080c0:	4917      	ldr	r1, [pc, #92]	@ (8008120 <SystemInit+0xc8>)
 80080c2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80080c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80080c6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80080c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80080ca:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80080cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80080ce:	6819      	ldr	r1, [r3, #0]
 80080d0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80080d4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80080d6:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80080d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80080dc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80080e0:	d110      	bne.n	8008104 <SystemInit+0xac>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80080e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <SystemInit+0xb8>)
 80080e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80080e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080ec:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80080f0:	4a0c      	ldr	r2, [pc, #48]	@ (8008124 <SystemInit+0xcc>)
 80080f2:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 80080f6:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80080f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80080fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008100:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	e000ed00 	.word	0xe000ed00
 800810c:	52002000 	.word	0x52002000
 8008110:	58024400 	.word	0x58024400
 8008114:	eaf6ed7f 	.word	0xeaf6ed7f
 8008118:	02020200 	.word	0x02020200
 800811c:	01ff0000 	.word	0x01ff0000
 8008120:	01010280 	.word	0x01010280
 8008124:	52004000 	.word	0x52004000

08008128 <ExitRun0Mode>:
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8008128:	4a05      	ldr	r2, [pc, #20]	@ (8008140 <ExitRun0Mode+0x18>)
 800812a:	68d3      	ldr	r3, [r2, #12]
 800812c:	f023 0302 	bic.w	r3, r3, #2
 8008130:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <ExitRun0Mode+0x18>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800813a:	d0fa      	beq.n	8008132 <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	58024800 	.word	0x58024800

08008144 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008144:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM2)
 8008146:	6803      	ldr	r3, [r0, #0]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800814c:	d004      	beq.n	8008158 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 800814e:	4a10      	ldr	r2, [pc, #64]	@ (8008190 <HAL_TIM_PWM_MspInit+0x4c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00f      	beq.n	8008174 <HAL_TIM_PWM_MspInit+0x30>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008154:	b002      	add	sp, #8
 8008156:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008158:	4b0e      	ldr	r3, [pc, #56]	@ (8008194 <HAL_TIM_PWM_MspInit+0x50>)
 800815a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8008166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	e7ef      	b.n	8008154 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008174:	4b07      	ldr	r3, [pc, #28]	@ (8008194 <HAL_TIM_PWM_MspInit+0x50>)
 8008176:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800817a:	f042 0204 	orr.w	r2, r2, #4
 800817e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8008182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	9b01      	ldr	r3, [sp, #4]
}
 800818e:	e7e1      	b.n	8008154 <HAL_TIM_PWM_MspInit+0x10>
 8008190:	40000800 	.word	0x40000800
 8008194:	58024400 	.word	0x58024400

08008198 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008198:	b500      	push	{lr}
 800819a:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800819c:	2300      	movs	r3, #0
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	9304      	str	r3, [sp, #16]
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	9306      	str	r3, [sp, #24]
 80081a6:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM2)
 80081a8:	6803      	ldr	r3, [r0, #0]
 80081aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ae:	d005      	beq.n	80081bc <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 80081b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008220 <HAL_TIM_MspPostInit+0x88>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01b      	beq.n	80081ee <HAL_TIM_MspPostInit+0x56>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80081b6:	b009      	add	sp, #36	@ 0x24
 80081b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081bc:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <HAL_TIM_MspPostInit+0x8c>)
 80081be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80081ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80081d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081dc:	2302      	movs	r3, #2
 80081de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80081e0:	2301      	movs	r3, #1
 80081e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e4:	a903      	add	r1, sp, #12
 80081e6:	4810      	ldr	r0, [pc, #64]	@ (8008228 <HAL_TIM_MspPostInit+0x90>)
 80081e8:	f7fa f902 	bl	80023f0 <HAL_GPIO_Init>
 80081ec:	e7e3      	b.n	80081b6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <HAL_TIM_MspPostInit+0x8c>)
 80081f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80081f4:	f042 0202 	orr.w	r2, r2, #2
 80081f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80081fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO4_Pin|SERVO3_Pin|SERVO2_Pin|SERVO1_Pin;
 8008208:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800820c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800820e:	2302      	movs	r3, #2
 8008210:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008212:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008214:	a903      	add	r1, sp, #12
 8008216:	4805      	ldr	r0, [pc, #20]	@ (800822c <HAL_TIM_MspPostInit+0x94>)
 8008218:	f7fa f8ea 	bl	80023f0 <HAL_GPIO_Init>
}
 800821c:	e7cb      	b.n	80081b6 <HAL_TIM_MspPostInit+0x1e>
 800821e:	bf00      	nop
 8008220:	40000800 	.word	0x40000800
 8008224:	58024400 	.word	0x58024400
 8008228:	58020000 	.word	0x58020000
 800822c:	58020400 	.word	0x58020400

08008230 <MX_TIM2_Init>:
{
 8008230:	b500      	push	{lr}
 8008232:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008234:	2300      	movs	r3, #0
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	9302      	str	r3, [sp, #8]
 8008242:	9303      	str	r3, [sp, #12]
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	9305      	str	r3, [sp, #20]
 8008248:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800824a:	4818      	ldr	r0, [pc, #96]	@ (80082ac <MX_TIM2_Init+0x7c>)
 800824c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008250:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8008252:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008254:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800825c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800825e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008260:	f7fe fd1a 	bl	8006c98 <HAL_TIM_PWM_Init>
 8008264:	b9c0      	cbnz	r0, 8008298 <MX_TIM2_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008266:	2300      	movs	r3, #0
 8008268:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800826a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800826c:	a907      	add	r1, sp, #28
 800826e:	480f      	ldr	r0, [pc, #60]	@ (80082ac <MX_TIM2_Init+0x7c>)
 8008270:	f7ff f824 	bl	80072bc <HAL_TIMEx_MasterConfigSynchronization>
 8008274:	b998      	cbnz	r0, 800829e <MX_TIM2_Init+0x6e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008276:	2360      	movs	r3, #96	@ 0x60
 8008278:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800827a:	2200      	movs	r2, #0
 800827c:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800827e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008280:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008282:	4669      	mov	r1, sp
 8008284:	4809      	ldr	r0, [pc, #36]	@ (80082ac <MX_TIM2_Init+0x7c>)
 8008286:	f7fe fe4b 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 800828a:	b958      	cbnz	r0, 80082a4 <MX_TIM2_Init+0x74>
  HAL_TIM_MspPostInit(&htim2);
 800828c:	4807      	ldr	r0, [pc, #28]	@ (80082ac <MX_TIM2_Init+0x7c>)
 800828e:	f7ff ff83 	bl	8008198 <HAL_TIM_MspPostInit>
}
 8008292:	b00b      	add	sp, #44	@ 0x2c
 8008294:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8008298:	f7f8 fab6 	bl	8000808 <Error_Handler>
 800829c:	e7e3      	b.n	8008266 <MX_TIM2_Init+0x36>
    Error_Handler();
 800829e:	f7f8 fab3 	bl	8000808 <Error_Handler>
 80082a2:	e7e8      	b.n	8008276 <MX_TIM2_Init+0x46>
    Error_Handler();
 80082a4:	f7f8 fab0 	bl	8000808 <Error_Handler>
 80082a8:	e7f0      	b.n	800828c <MX_TIM2_Init+0x5c>
 80082aa:	bf00      	nop
 80082ac:	20000428 	.word	0x20000428

080082b0 <MX_TIM4_Init>:
{
 80082b0:	b500      	push	{lr}
 80082b2:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082b4:	2300      	movs	r3, #0
 80082b6:	9307      	str	r3, [sp, #28]
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	9302      	str	r3, [sp, #8]
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	9305      	str	r3, [sp, #20]
 80082c8:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 80082ca:	4825      	ldr	r0, [pc, #148]	@ (8008360 <MX_TIM4_Init+0xb0>)
 80082cc:	4a25      	ldr	r2, [pc, #148]	@ (8008364 <MX_TIM4_Init+0xb4>)
 80082ce:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80082d0:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082d2:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80082d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082d8:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082da:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082dc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80082de:	f7fe fcdb 	bl	8006c98 <HAL_TIM_PWM_Init>
 80082e2:	bb50      	cbnz	r0, 800833a <MX_TIM4_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082e4:	2300      	movs	r3, #0
 80082e6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082e8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082ea:	a907      	add	r1, sp, #28
 80082ec:	481c      	ldr	r0, [pc, #112]	@ (8008360 <MX_TIM4_Init+0xb0>)
 80082ee:	f7fe ffe5 	bl	80072bc <HAL_TIMEx_MasterConfigSynchronization>
 80082f2:	bb28      	cbnz	r0, 8008340 <MX_TIM4_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082f4:	2360      	movs	r3, #96	@ 0x60
 80082f6:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80082f8:	2200      	movs	r2, #0
 80082fa:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082fc:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082fe:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008300:	4669      	mov	r1, sp
 8008302:	4817      	ldr	r0, [pc, #92]	@ (8008360 <MX_TIM4_Init+0xb0>)
 8008304:	f7fe fe0c 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 8008308:	b9e8      	cbnz	r0, 8008346 <MX_TIM4_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800830a:	2204      	movs	r2, #4
 800830c:	4669      	mov	r1, sp
 800830e:	4814      	ldr	r0, [pc, #80]	@ (8008360 <MX_TIM4_Init+0xb0>)
 8008310:	f7fe fe06 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 8008314:	b9d0      	cbnz	r0, 800834c <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008316:	2208      	movs	r2, #8
 8008318:	4669      	mov	r1, sp
 800831a:	4811      	ldr	r0, [pc, #68]	@ (8008360 <MX_TIM4_Init+0xb0>)
 800831c:	f7fe fe00 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 8008320:	b9b8      	cbnz	r0, 8008352 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008322:	220c      	movs	r2, #12
 8008324:	4669      	mov	r1, sp
 8008326:	480e      	ldr	r0, [pc, #56]	@ (8008360 <MX_TIM4_Init+0xb0>)
 8008328:	f7fe fdfa 	bl	8006f20 <HAL_TIM_PWM_ConfigChannel>
 800832c:	b9a0      	cbnz	r0, 8008358 <MX_TIM4_Init+0xa8>
  HAL_TIM_MspPostInit(&htim4);
 800832e:	480c      	ldr	r0, [pc, #48]	@ (8008360 <MX_TIM4_Init+0xb0>)
 8008330:	f7ff ff32 	bl	8008198 <HAL_TIM_MspPostInit>
}
 8008334:	b00b      	add	sp, #44	@ 0x2c
 8008336:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800833a:	f7f8 fa65 	bl	8000808 <Error_Handler>
 800833e:	e7d1      	b.n	80082e4 <MX_TIM4_Init+0x34>
    Error_Handler();
 8008340:	f7f8 fa62 	bl	8000808 <Error_Handler>
 8008344:	e7d6      	b.n	80082f4 <MX_TIM4_Init+0x44>
    Error_Handler();
 8008346:	f7f8 fa5f 	bl	8000808 <Error_Handler>
 800834a:	e7de      	b.n	800830a <MX_TIM4_Init+0x5a>
    Error_Handler();
 800834c:	f7f8 fa5c 	bl	8000808 <Error_Handler>
 8008350:	e7e1      	b.n	8008316 <MX_TIM4_Init+0x66>
    Error_Handler();
 8008352:	f7f8 fa59 	bl	8000808 <Error_Handler>
 8008356:	e7e4      	b.n	8008322 <MX_TIM4_Init+0x72>
    Error_Handler();
 8008358:	f7f8 fa56 	bl	8000808 <Error_Handler>
 800835c:	e7e7      	b.n	800832e <MX_TIM4_Init+0x7e>
 800835e:	bf00      	nop
 8008360:	200003dc 	.word	0x200003dc
 8008364:	40000800 	.word	0x40000800

08008368 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800836a:	2201      	movs	r2, #1
 800836c:	4910      	ldr	r1, [pc, #64]	@ (80083b0 <MX_USB_DEVICE_Init+0x48>)
 800836e:	4811      	ldr	r0, [pc, #68]	@ (80083b4 <MX_USB_DEVICE_Init+0x4c>)
 8008370:	f000 fc68 	bl	8008c44 <USBD_Init>
 8008374:	b980      	cbnz	r0, 8008398 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008376:	4910      	ldr	r1, [pc, #64]	@ (80083b8 <MX_USB_DEVICE_Init+0x50>)
 8008378:	480e      	ldr	r0, [pc, #56]	@ (80083b4 <MX_USB_DEVICE_Init+0x4c>)
 800837a:	f000 fc7a 	bl	8008c72 <USBD_RegisterClass>
 800837e:	b970      	cbnz	r0, 800839e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008380:	490e      	ldr	r1, [pc, #56]	@ (80083bc <MX_USB_DEVICE_Init+0x54>)
 8008382:	480c      	ldr	r0, [pc, #48]	@ (80083b4 <MX_USB_DEVICE_Init+0x4c>)
 8008384:	f000 fa3b 	bl	80087fe <USBD_CDC_RegisterInterface>
 8008388:	b960      	cbnz	r0, 80083a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800838a:	480a      	ldr	r0, [pc, #40]	@ (80083b4 <MX_USB_DEVICE_Init+0x4c>)
 800838c:	f000 fc91 	bl	8008cb2 <USBD_Start>
 8008390:	b958      	cbnz	r0, 80083aa <MX_USB_DEVICE_Init+0x42>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008392:	f7fb fa83 	bl	800389c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008396:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008398:	f7f8 fa36 	bl	8000808 <Error_Handler>
 800839c:	e7eb      	b.n	8008376 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800839e:	f7f8 fa33 	bl	8000808 <Error_Handler>
 80083a2:	e7ed      	b.n	8008380 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80083a4:	f7f8 fa30 	bl	8000808 <Error_Handler>
 80083a8:	e7ef      	b.n	800838a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80083aa:	f7f8 fa2d 	bl	8000808 <Error_Handler>
 80083ae:	e7f0      	b.n	8008392 <MX_USB_DEVICE_Init+0x2a>
 80083b0:	200000e8 	.word	0x200000e8
 80083b4:	20000474 	.word	0x20000474
 80083b8:	20000054 	.word	0x20000054
 80083bc:	20000098 	.word	0x20000098

080083c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083c0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083c2:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80083c6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80083ca:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 80083ce:	b18c      	cbz	r4, 80083f4 <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80083d4:	6843      	ldr	r3, [r0, #4]
 80083d6:	b17b      	cbz	r3, 80083f8 <USBD_CDC_EP0_RxReady+0x38>
 80083d8:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80083dc:	28ff      	cmp	r0, #255	@ 0xff
 80083de:	d00d      	beq.n	80083fc <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80083e6:	4621      	mov	r1, r4
 80083e8:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80083ea:	23ff      	movs	r3, #255	@ 0xff
 80083ec:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80083f0:	2000      	movs	r0, #0
}
 80083f2:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 80083f4:	2003      	movs	r0, #3
 80083f6:	e7fc      	b.n	80083f2 <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7fa      	b.n	80083f2 <USBD_CDC_EP0_RxReady+0x32>
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7f8      	b.n	80083f2 <USBD_CDC_EP0_RxReady+0x32>

08008400 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008400:	230a      	movs	r3, #10
 8008402:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8008404:	4800      	ldr	r0, [pc, #0]	@ (8008408 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008406:	4770      	bx	lr
 8008408:	2000008c 	.word	0x2000008c

0800840c <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008410:	4f0f      	ldr	r7, [pc, #60]	@ (8008450 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8008412:	2182      	movs	r1, #130	@ 0x82
 8008414:	4638      	mov	r0, r7
 8008416:	f000 fdff 	bl	8009018 <USBD_GetEpDesc>
 800841a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800841c:	2101      	movs	r1, #1
 800841e:	4638      	mov	r0, r7
 8008420:	f000 fdfa 	bl	8009018 <USBD_GetEpDesc>
 8008424:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008426:	2181      	movs	r1, #129	@ 0x81
 8008428:	4638      	mov	r0, r7
 800842a:	f000 fdf5 	bl	8009018 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 800842e:	b10d      	cbz	r5, 8008434 <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008430:	2210      	movs	r2, #16
 8008432:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8008434:	b11c      	cbz	r4, 800843e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008436:	2240      	movs	r2, #64	@ 0x40
 8008438:	7122      	strb	r2, [r4, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 800843e:	b118      	cbz	r0, 8008448 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008440:	2240      	movs	r2, #64	@ 0x40
 8008442:	7102      	strb	r2, [r0, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008448:	2343      	movs	r3, #67	@ 0x43
 800844a:	8033      	strh	r3, [r6, #0]
}
 800844c:	4800      	ldr	r0, [pc, #0]	@ (8008450 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 800844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008450:	20000010 	.word	0x20000010

08008454 <USBD_CDC_GetFSCfgDesc>:
{
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008458:	4f0f      	ldr	r7, [pc, #60]	@ (8008498 <USBD_CDC_GetFSCfgDesc+0x44>)
 800845a:	2182      	movs	r1, #130	@ 0x82
 800845c:	4638      	mov	r0, r7
 800845e:	f000 fddb 	bl	8009018 <USBD_GetEpDesc>
 8008462:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008464:	2101      	movs	r1, #1
 8008466:	4638      	mov	r0, r7
 8008468:	f000 fdd6 	bl	8009018 <USBD_GetEpDesc>
 800846c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800846e:	2181      	movs	r1, #129	@ 0x81
 8008470:	4638      	mov	r0, r7
 8008472:	f000 fdd1 	bl	8009018 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8008476:	b10d      	cbz	r5, 800847c <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008478:	2210      	movs	r2, #16
 800847a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 800847c:	b11c      	cbz	r4, 8008486 <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800847e:	2240      	movs	r2, #64	@ 0x40
 8008480:	7122      	strb	r2, [r4, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8008486:	b118      	cbz	r0, 8008490 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008488:	2240      	movs	r2, #64	@ 0x40
 800848a:	7102      	strb	r2, [r0, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008490:	2343      	movs	r3, #67	@ 0x43
 8008492:	8033      	strh	r3, [r6, #0]
}
 8008494:	4800      	ldr	r0, [pc, #0]	@ (8008498 <USBD_CDC_GetFSCfgDesc+0x44>)
 8008496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008498:	20000010 	.word	0x20000010

0800849c <USBD_CDC_GetHSCfgDesc>:
{
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084a0:	4f0f      	ldr	r7, [pc, #60]	@ (80084e0 <USBD_CDC_GetHSCfgDesc+0x44>)
 80084a2:	2182      	movs	r1, #130	@ 0x82
 80084a4:	4638      	mov	r0, r7
 80084a6:	f000 fdb7 	bl	8009018 <USBD_GetEpDesc>
 80084aa:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ac:	2101      	movs	r1, #1
 80084ae:	4638      	mov	r0, r7
 80084b0:	f000 fdb2 	bl	8009018 <USBD_GetEpDesc>
 80084b4:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084b6:	2181      	movs	r1, #129	@ 0x81
 80084b8:	4638      	mov	r0, r7
 80084ba:	f000 fdad 	bl	8009018 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 80084be:	b10d      	cbz	r5, 80084c4 <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80084c0:	2210      	movs	r2, #16
 80084c2:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 80084c4:	b11c      	cbz	r4, 80084ce <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084c6:	2200      	movs	r2, #0
 80084c8:	7122      	strb	r2, [r4, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 80084ce:	b118      	cbz	r0, 80084d8 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084d0:	2200      	movs	r2, #0
 80084d2:	7102      	strb	r2, [r0, #4]
 80084d4:	2202      	movs	r2, #2
 80084d6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084d8:	2343      	movs	r3, #67	@ 0x43
 80084da:	8033      	strh	r3, [r6, #0]
}
 80084dc:	4800      	ldr	r0, [pc, #0]	@ (80084e0 <USBD_CDC_GetHSCfgDesc+0x44>)
 80084de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e0:	20000010 	.word	0x20000010

080084e4 <USBD_CDC_DataOut>:
{
 80084e4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80084ea:	33b0      	adds	r3, #176	@ 0xb0
 80084ec:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084f0:	b195      	cbz	r5, 8008518 <USBD_CDC_DataOut+0x34>
 80084f2:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084f4:	f000 fb4e 	bl	8008b94 <USBD_LL_GetRxDataSize>
 80084f8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084fc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008500:	33b0      	adds	r3, #176	@ 0xb0
 8008502:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008506:	6863      	ldr	r3, [r4, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800850e:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8008512:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008514:	2000      	movs	r0, #0
}
 8008516:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8008518:	2003      	movs	r0, #3
 800851a:	e7fc      	b.n	8008516 <USBD_CDC_DataOut+0x32>

0800851c <USBD_CDC_DataIn>:
{
 800851c:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800851e:	f8d0 52c8 	ldr.w	r5, [r0, #712]	@ 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008522:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008526:	33b0      	adds	r3, #176	@ 0xb0
 8008528:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800852c:	b384      	cbz	r4, 8008590 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800852e:	f001 030f 	and.w	r3, r1, #15
 8008532:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008536:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800853a:	6992      	ldr	r2, [r2, #24]
 800853c:	b14a      	cbz	r2, 8008552 <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800853e:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8008542:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8008546:	69ed      	ldr	r5, [r5, #28]
 8008548:	fbb2 fcf5 	udiv	ip, r2, r5
 800854c:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008550:	b192      	cbz	r2, 8008578 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008558:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800855c:	33b0      	adds	r3, #176	@ 0xb0
 800855e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008562:	6843      	ldr	r3, [r0, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	b1ab      	cbz	r3, 8008594 <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008568:	460a      	mov	r2, r1
 800856a:	f504 7104 	add.w	r1, r4, #528	@ 0x210
 800856e:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
 8008572:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8008574:	2000      	movs	r0, #0
}
 8008576:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800857c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008580:	2400      	movs	r4, #0
 8008582:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008584:	4623      	mov	r3, r4
 8008586:	4622      	mov	r2, r4
 8008588:	f000 fb4c 	bl	8008c24 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800858c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800858e:	e7f2      	b.n	8008576 <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8008590:	2003      	movs	r0, #3
 8008592:	e7f0      	b.n	8008576 <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8008594:	2000      	movs	r0, #0
 8008596:	e7ee      	b.n	8008576 <USBD_CDC_DataIn+0x5a>

08008598 <USBD_CDC_Setup>:
{
 8008598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800859c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80085a0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80085a4:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 80085a8:	2200      	movs	r2, #0
 80085aa:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 80085ae:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 80085b2:	2f00      	cmp	r7, #0
 80085b4:	d078      	beq.n	80086a8 <USBD_CDC_Setup+0x110>
 80085b6:	4604      	mov	r4, r0
 80085b8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ba:	7809      	ldrb	r1, [r1, #0]
 80085bc:	f011 0660 	ands.w	r6, r1, #96	@ 0x60
 80085c0:	d034      	beq.n	800862c <USBD_CDC_Setup+0x94>
 80085c2:	2e20      	cmp	r6, #32
 80085c4:	d169      	bne.n	800869a <USBD_CDC_Setup+0x102>
      if (req->wLength != 0U)
 80085c6:	88ea      	ldrh	r2, [r5, #6]
 80085c8:	b32a      	cbz	r2, 8008616 <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 80085ca:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80085ce:	d10e      	bne.n	80085ee <USBD_CDC_Setup+0x56>
          hcdc->CmdOpCode = req->bRequest;
 80085d0:	786b      	ldrb	r3, [r5, #1]
 80085d2:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085d6:	88ea      	ldrh	r2, [r5, #6]
 80085d8:	2a3f      	cmp	r2, #63	@ 0x3f
 80085da:	d81a      	bhi.n	8008612 <USBD_CDC_Setup+0x7a>
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	f887 2201 	strb.w	r2, [r7, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80085e2:	4639      	mov	r1, r7
 80085e4:	4620      	mov	r0, r4
 80085e6:	f001 f982 	bl	80098ee <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80085ea:	2600      	movs	r6, #0
 80085ec:	e059      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085ee:	33b0      	adds	r3, #176	@ 0xb0
 80085f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	4639      	mov	r1, r7
 80085fa:	7868      	ldrb	r0, [r5, #1]
 80085fc:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085fe:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008600:	2a07      	cmp	r2, #7
 8008602:	bf28      	it	cs
 8008604:	2207      	movcs	r2, #7
 8008606:	4639      	mov	r1, r7
 8008608:	4620      	mov	r0, r4
 800860a:	f001 f95b 	bl	80098c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800860e:	2600      	movs	r6, #0
 8008610:	e047      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008612:	2240      	movs	r2, #64	@ 0x40
 8008614:	e7e3      	b.n	80085de <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008616:	33b0      	adds	r3, #176	@ 0xb0
 8008618:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2200      	movs	r2, #0
 8008622:	4629      	mov	r1, r5
 8008624:	7868      	ldrb	r0, [r5, #1]
 8008626:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8008628:	2600      	movs	r6, #0
 800862a:	e03a      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
      switch (req->bRequest)
 800862c:	786f      	ldrb	r7, [r5, #1]
 800862e:	2f0b      	cmp	r7, #11
 8008630:	d82e      	bhi.n	8008690 <USBD_CDC_Setup+0xf8>
 8008632:	e8df f007 	tbb	[pc, r7]
 8008636:	3606      	.short	0x3606
 8008638:	2d2d2d2d 	.word	0x2d2d2d2d
 800863c:	2d2d2d2d 	.word	0x2d2d2d2d
 8008640:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008646:	2b03      	cmp	r3, #3
 8008648:	d004      	beq.n	8008654 <USBD_CDC_Setup+0xbc>
            USBD_CtlError(pdev, req);
 800864a:	4629      	mov	r1, r5
 800864c:	f000 fd21 	bl	8009092 <USBD_CtlError>
            ret = USBD_FAIL;
 8008650:	2603      	movs	r6, #3
 8008652:	e026      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008654:	2202      	movs	r2, #2
 8008656:	a901      	add	r1, sp, #4
 8008658:	f001 f934 	bl	80098c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800865c:	463e      	mov	r6, r7
 800865e:	e020      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008660:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008664:	2b03      	cmp	r3, #3
 8008666:	d004      	beq.n	8008672 <USBD_CDC_Setup+0xda>
            USBD_CtlError(pdev, req);
 8008668:	4629      	mov	r1, r5
 800866a:	f000 fd12 	bl	8009092 <USBD_CtlError>
            ret = USBD_FAIL;
 800866e:	2603      	movs	r6, #3
 8008670:	e017      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008672:	2201      	movs	r2, #1
 8008674:	f10d 0107 	add.w	r1, sp, #7
 8008678:	f001 f924 	bl	80098c4 <USBD_CtlSendData>
 800867c:	e011      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800867e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008682:	2b03      	cmp	r3, #3
 8008684:	d00d      	beq.n	80086a2 <USBD_CDC_Setup+0x10a>
            USBD_CtlError(pdev, req);
 8008686:	4629      	mov	r1, r5
 8008688:	f000 fd03 	bl	8009092 <USBD_CtlError>
            ret = USBD_FAIL;
 800868c:	2603      	movs	r6, #3
 800868e:	e008      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
          USBD_CtlError(pdev, req);
 8008690:	4629      	mov	r1, r5
 8008692:	f000 fcfe 	bl	8009092 <USBD_CtlError>
          ret = USBD_FAIL;
 8008696:	2603      	movs	r6, #3
          break;
 8008698:	e003      	b.n	80086a2 <USBD_CDC_Setup+0x10a>
      USBD_CtlError(pdev, req);
 800869a:	4629      	mov	r1, r5
 800869c:	f000 fcf9 	bl	8009092 <USBD_CtlError>
      ret = USBD_FAIL;
 80086a0:	2603      	movs	r6, #3
}
 80086a2:	4630      	mov	r0, r6
 80086a4:	b003      	add	sp, #12
 80086a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 80086a8:	2603      	movs	r6, #3
 80086aa:	e7fa      	b.n	80086a2 <USBD_CDC_Setup+0x10a>

080086ac <USBD_CDC_DeInit>:
{
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086b0:	2181      	movs	r1, #129	@ 0x81
 80086b2:	f000 fa97 	bl	8008be4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086b6:	2500      	movs	r5, #0
 80086b8:	8725      	strh	r5, [r4, #56]	@ 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086ba:	2101      	movs	r1, #1
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fa91 	bl	8008be4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086c2:	f8a4 5178 	strh.w	r5, [r4, #376]	@ 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086c6:	2182      	movs	r1, #130	@ 0x82
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fa8b 	bl	8008be4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086ce:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086d2:	f8a4 504e 	strh.w	r5, [r4, #78]	@ 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80086d6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80086da:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80086de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086e2:	b19a      	cbz	r2, 800870c <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80086e4:	33b0      	adds	r3, #176	@ 0xb0
 80086e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80086f0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80086f4:	33b0      	adds	r3, #176	@ 0xb0
 80086f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80086fa:	f000 fa55 	bl	8008ba8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086fe:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008702:	33b0      	adds	r3, #176	@ 0xb0
 8008704:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8008708:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 800870c:	2000      	movs	r0, #0
 800870e:	bd38      	pop	{r3, r4, r5, pc}

08008710 <USBD_CDC_Init>:
{
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008714:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008718:	f000 fa42 	bl	8008ba0 <USBD_static_malloc>
  if (hcdc == NULL)
 800871c:	2800      	cmp	r0, #0
 800871e:	d049      	beq.n	80087b4 <USBD_CDC_Init+0xa4>
 8008720:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008722:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008726:	2100      	movs	r1, #0
 8008728:	f001 f939 	bl	800999e <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800872c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008730:	33b0      	adds	r3, #176	@ 0xb0
 8008732:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008736:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	7c23      	ldrb	r3, [r4, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d141      	bne.n	80087c4 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008744:	2202      	movs	r2, #2
 8008746:	2181      	movs	r1, #129	@ 0x81
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fa40 	bl	8008bce <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800874e:	2601      	movs	r6, #1
 8008750:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008756:	2202      	movs	r2, #2
 8008758:	4631      	mov	r1, r6
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fa37 	bl	8008bce <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008760:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008764:	2310      	movs	r3, #16
 8008766:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800876a:	2308      	movs	r3, #8
 800876c:	2203      	movs	r2, #3
 800876e:	2182      	movs	r1, #130	@ 0x82
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fa2c 	bl	8008bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008776:	2301      	movs	r3, #1
 8008778:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
  hcdc->RxBuffer = NULL;
 800877c:	2600      	movs	r6, #0
 800877e:	f8c5 6204 	str.w	r6, [r5, #516]	@ 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008782:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 8008786:	33b0      	adds	r3, #176	@ 0xb0
 8008788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4798      	blx	r3
  hcdc->TxState = 0U;
 8008792:	f8c5 6214 	str.w	r6, [r5, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008796:	f8c5 6218 	str.w	r6, [r5, #536]	@ 0x218
  if (hcdc->RxBuffer == NULL)
 800879a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800879e:	b362      	cbz	r2, 80087fa <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a0:	7c25      	ldrb	r5, [r4, #16]
 80087a2:	bb1d      	cbnz	r5, 80087ec <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087a8:	2101      	movs	r1, #1
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fa42 	bl	8008c34 <USBD_LL_PrepareReceive>
}
 80087b0:	4628      	mov	r0, r5
 80087b2:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087b4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 80087b8:	33b0      	adds	r3, #176	@ 0xb0
 80087ba:	2200      	movs	r2, #0
 80087bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087c0:	2502      	movs	r5, #2
 80087c2:	e7f5      	b.n	80087b0 <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087c4:	2340      	movs	r3, #64	@ 0x40
 80087c6:	2202      	movs	r2, #2
 80087c8:	2181      	movs	r1, #129	@ 0x81
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 f9ff 	bl	8008bce <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087d0:	2601      	movs	r6, #1
 80087d2:	8726      	strh	r6, [r4, #56]	@ 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087d4:	2340      	movs	r3, #64	@ 0x40
 80087d6:	2202      	movs	r2, #2
 80087d8:	4631      	mov	r1, r6
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 f9f7 	bl	8008bce <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087e0:	f8a4 6178 	strh.w	r6, [r4, #376]	@ 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80087e4:	2310      	movs	r3, #16
 80087e6:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 80087ea:	e7be      	b.n	800876a <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087ec:	2340      	movs	r3, #64	@ 0x40
 80087ee:	2101      	movs	r1, #1
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fa1f 	bl	8008c34 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80087f6:	2500      	movs	r5, #0
 80087f8:	e7da      	b.n	80087b0 <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 80087fa:	2502      	movs	r5, #2
 80087fc:	e7d8      	b.n	80087b0 <USBD_CDC_Init+0xa0>

080087fe <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 80087fe:	b139      	cbz	r1, 8008810 <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8008800:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008804:	33b0      	adds	r3, #176	@ 0xb0
 8008806:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800880a:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 800880c:	2000      	movs	r0, #0
 800880e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008810:	2003      	movs	r0, #3
}
 8008812:	4770      	bx	lr

08008814 <USBD_CDC_SetTxBuffer>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008814:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008818:	33b0      	adds	r3, #176	@ 0xb0
 800881a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800881e:	b12b      	cbz	r3, 800882c <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8008820:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008824:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008828:	2000      	movs	r0, #0
 800882a:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800882c:	2003      	movs	r0, #3
}
 800882e:	4770      	bx	lr

08008830 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008830:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008834:	33b0      	adds	r3, #176	@ 0xb0
 8008836:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 800883a:	b11b      	cbz	r3, 8008844 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800883c:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008840:	2000      	movs	r0, #0
 8008842:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8008844:	2003      	movs	r0, #3
}
 8008846:	4770      	bx	lr

08008848 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008848:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800884a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 800884e:	33b0      	adds	r3, #176	@ 0xb0
 8008850:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008854:	b18a      	cbz	r2, 800887a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8008856:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 800885a:	b10b      	cbz	r3, 8008860 <USBD_CDC_TransmitPacket+0x18>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800885c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800885e:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8008860:	2301      	movs	r3, #1
 8008862:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008866:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800886a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800886c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8008870:	2181      	movs	r1, #129	@ 0x81
 8008872:	f000 f9d7 	bl	8008c24 <USBD_LL_Transmit>
    ret = USBD_OK;
 8008876:	2000      	movs	r0, #0
 8008878:	e7f1      	b.n	800885e <USBD_CDC_TransmitPacket+0x16>
    return (uint8_t)USBD_FAIL;
 800887a:	2003      	movs	r0, #3
 800887c:	e7ef      	b.n	800885e <USBD_CDC_TransmitPacket+0x16>

0800887e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800887e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008880:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008884:	33b0      	adds	r3, #176	@ 0xb0
 8008886:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800888a:	b192      	cbz	r2, 80088b2 <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888c:	7c04      	ldrb	r4, [r0, #16]
 800888e:	b944      	cbnz	r4, 80088a2 <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008894:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8008898:	2101      	movs	r1, #1
 800889a:	f000 f9cb 	bl	8008c34 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800889e:	4620      	mov	r0, r4
 80088a0:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088a2:	2340      	movs	r3, #64	@ 0x40
 80088a4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80088a8:	2101      	movs	r1, #1
 80088aa:	f000 f9c3 	bl	8008c34 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80088ae:	2400      	movs	r4, #0
 80088b0:	e7f5      	b.n	800889e <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 80088b2:	2403      	movs	r4, #3
 80088b4:	e7f3      	b.n	800889e <USBD_CDC_ReceivePacket+0x20>

080088b6 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 80088b6:	2000      	movs	r0, #0
 80088b8:	4770      	bx	lr
	...

080088bc <CDC_Control_HS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80088bc:	2820      	cmp	r0, #32
 80088be:	d011      	beq.n	80088e4 <CDC_Control_HS+0x28>
 80088c0:	2821      	cmp	r0, #33	@ 0x21
 80088c2:	d121      	bne.n	8008908 <CDC_Control_HS+0x4c>
    LineCoding.paritytype = pbuf[5];
    LineCoding.datatype = pbuf[6];
    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t) (LineCoding.bitrate);
 80088c4:	4b11      	ldr	r3, [pc, #68]	@ (800890c <CDC_Control_HS+0x50>)
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 80088ca:	785a      	ldrb	r2, [r3, #1]
 80088cc:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 80088ce:	789a      	ldrb	r2, [r3, #2]
 80088d0:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 80088d2:	78da      	ldrb	r2, [r3, #3]
 80088d4:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80088d6:	791a      	ldrb	r2, [r3, #4]
 80088d8:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80088da:	795a      	ldrb	r2, [r3, #5]
 80088dc:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 80088de:	799b      	ldrb	r3, [r3, #6]
 80088e0:	718b      	strb	r3, [r1, #6]
    break;
 80088e2:	e011      	b.n	8008908 <CDC_Control_HS+0x4c>
    LineCoding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80088e4:	780b      	ldrb	r3, [r1, #0]
 80088e6:	784a      	ldrb	r2, [r1, #1]
 80088e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80088ec:	788a      	ldrb	r2, [r1, #2]
 80088ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088f2:	78ca      	ldrb	r2, [r1, #3]
 80088f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80088f8:	4a04      	ldr	r2, [pc, #16]	@ (800890c <CDC_Control_HS+0x50>)
 80088fa:	6013      	str	r3, [r2, #0]
    LineCoding.format = pbuf[4];
 80088fc:	790b      	ldrb	r3, [r1, #4]
 80088fe:	7113      	strb	r3, [r2, #4]
    LineCoding.paritytype = pbuf[5];
 8008900:	794b      	ldrb	r3, [r1, #5]
 8008902:	7153      	strb	r3, [r2, #5]
    LineCoding.datatype = pbuf[6];
 8008904:	798b      	ldrb	r3, [r1, #6]
 8008906:	7193      	strb	r3, [r2, #6]
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8008908:	2000      	movs	r0, #0
 800890a:	4770      	bx	lr
 800890c:	200000ac 	.word	0x200000ac

08008910 <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8008910:	2000      	movs	r0, #0
 8008912:	4770      	bx	lr

08008914 <CDC_Receive_HS>:
{
 8008914:	b510      	push	{r4, lr}
 8008916:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008918:	4c04      	ldr	r4, [pc, #16]	@ (800892c <CDC_Receive_HS+0x18>)
 800891a:	4620      	mov	r0, r4
 800891c:	f7ff ff88 	bl	8008830 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008920:	4620      	mov	r0, r4
 8008922:	f7ff ffac 	bl	800887e <USBD_CDC_ReceivePacket>
}
 8008926:	2000      	movs	r0, #0
 8008928:	bd10      	pop	{r4, pc}
 800892a:	bf00      	nop
 800892c:	20000474 	.word	0x20000474

08008930 <CDC_Init_HS>:
{
 8008930:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008932:	4c06      	ldr	r4, [pc, #24]	@ (800894c <CDC_Init_HS+0x1c>)
 8008934:	2200      	movs	r2, #0
 8008936:	4906      	ldr	r1, [pc, #24]	@ (8008950 <CDC_Init_HS+0x20>)
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff ff6b 	bl	8008814 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800893e:	4905      	ldr	r1, [pc, #20]	@ (8008954 <CDC_Init_HS+0x24>)
 8008940:	4620      	mov	r0, r4
 8008942:	f7ff ff75 	bl	8008830 <USBD_CDC_SetRxBuffer>
}
 8008946:	2000      	movs	r0, #0
 8008948:	bd10      	pop	{r4, pc}
 800894a:	bf00      	nop
 800894c:	20000474 	.word	0x20000474
 8008950:	20000750 	.word	0x20000750
 8008954:	20000f50 	.word	0x20000f50

08008958 <CDC_Transmit_HS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008958:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <CDC_Transmit_HS+0x28>)
 800895a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
  if (hcdc->TxState != 0){
 800895e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008962:	b10b      	cbz	r3, 8008968 <CDC_Transmit_HS+0x10>
    return USBD_BUSY;
 8008964:	2001      	movs	r0, #1
}
 8008966:	4770      	bx	lr
{
 8008968:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800896a:	4c05      	ldr	r4, [pc, #20]	@ (8008980 <CDC_Transmit_HS+0x28>)
 800896c:	460a      	mov	r2, r1
 800896e:	4601      	mov	r1, r0
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ff4f 	bl	8008814 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff ff66 	bl	8008848 <USBD_CDC_TransmitPacket>
}
 800897c:	bd10      	pop	{r4, pc}
 800897e:	bf00      	nop
 8008980:	20000474 	.word	0x20000474

08008984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008984:	b510      	push	{r4, lr}
 8008986:	b0b0      	sub	sp, #192	@ 0xc0
 8008988:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800898a:	22b8      	movs	r2, #184	@ 0xb8
 800898c:	2100      	movs	r1, #0
 800898e:	a802      	add	r0, sp, #8
 8008990:	f001 f805 	bl	800999e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	4b1e      	ldr	r3, [pc, #120]	@ (8008a10 <HAL_PCD_MspInit+0x8c>)
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800899c:	b030      	add	sp, #192	@ 0xc0
 800899e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80089a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80089a4:	2300      	movs	r3, #0
 80089a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80089aa:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80089ae:	9323      	str	r3, [sp, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80089b0:	a802      	add	r0, sp, #8
 80089b2:	f7fc f881 	bl	8004ab8 <HAL_RCCEx_PeriphCLKConfig>
 80089b6:	bb38      	cbnz	r0, 8008a08 <HAL_PCD_MspInit+0x84>
    HAL_PWREx_EnableUSBVoltageDetector();
 80089b8:	f7fa ff70 	bl	800389c <HAL_PWREx_EnableUSBVoltageDetector>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80089bc:	4b15      	ldr	r3, [pc, #84]	@ (8008a14 <HAL_PCD_MspInit+0x90>)
 80089be:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80089c2:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80089c6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80089ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80089ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	4611      	mov	r1, r2
 80089da:	204a      	movs	r0, #74	@ 0x4a
 80089dc:	f7f9 fc56 	bl	800228c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 80089e0:	204a      	movs	r0, #74	@ 0x4a
 80089e2:	f7f9 fc77 	bl	80022d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 80089e6:	2200      	movs	r2, #0
 80089e8:	4611      	mov	r1, r2
 80089ea:	204b      	movs	r0, #75	@ 0x4b
 80089ec:	f7f9 fc4e 	bl	800228c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 80089f0:	204b      	movs	r0, #75	@ 0x4b
 80089f2:	f7f9 fc6f 	bl	80022d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80089f6:	2200      	movs	r2, #0
 80089f8:	4611      	mov	r1, r2
 80089fa:	204d      	movs	r0, #77	@ 0x4d
 80089fc:	f7f9 fc46 	bl	800228c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008a00:	204d      	movs	r0, #77	@ 0x4d
 8008a02:	f7f9 fc67 	bl	80022d4 <HAL_NVIC_EnableIRQ>
}
 8008a06:	e7c9      	b.n	800899c <HAL_PCD_MspInit+0x18>
      Error_Handler();
 8008a08:	f7f7 fefe 	bl	8000808 <Error_Handler>
 8008a0c:	e7d4      	b.n	80089b8 <HAL_PCD_MspInit+0x34>
 8008a0e:	bf00      	nop
 8008a10:	40040000 	.word	0x40040000
 8008a14:	58024400 	.word	0x58024400

08008a18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a1a:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 8008a1e:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008a22:	f000 f95c 	bl	8008cde <USBD_LL_SetupStage>
}
 8008a26:	bd08      	pop	{r3, pc}

08008a28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a28:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a2a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8008a2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008a32:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 8008a36:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008a3a:	f000 fa1d 	bl	8008e78 <USBD_LL_DataOutStage>
}
 8008a3e:	bd08      	pop	{r3, pc}

08008a40 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a42:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8008a46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008a50:	f000 fa72 	bl	8008f38 <USBD_LL_DataInStage>
}
 8008a54:	bd08      	pop	{r3, pc}

08008a56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a56:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a58:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008a5c:	f000 f9ba 	bl	8008dd4 <USBD_LL_SOF>
}
 8008a60:	bd08      	pop	{r3, pc}

08008a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a62:	b510      	push	{r4, lr}
 8008a64:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008a66:	79c1      	ldrb	r1, [r0, #7]
 8008a68:	b111      	cbz	r1, 8008a70 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008a6a:	2902      	cmp	r1, #2
 8008a6c:	d109      	bne.n	8008a82 <HAL_PCD_ResetCallback+0x20>
  {
    speed = USBD_SPEED_FULL;
 8008a6e:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a70:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8008a74:	f000 f991 	bl	8008d9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a78:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8008a7c:	f000 f95b 	bl	8008d36 <USBD_LL_Reset>
}
 8008a80:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008a82:	f7f7 fec1 	bl	8000808 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a86:	2101      	movs	r1, #1
 8008a88:	e7f2      	b.n	8008a70 <HAL_PCD_ResetCallback+0xe>
	...

08008a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a90:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008a94:	f000 f984 	bl	8008da0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a98:	6822      	ldr	r2, [r4, #0]
 8008a9a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008aa6:	7ae3      	ldrb	r3, [r4, #11]
 8008aa8:	b123      	cbz	r3, 8008ab4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008aaa:	4a03      	ldr	r2, [pc, #12]	@ (8008ab8 <HAL_PCD_SuspendCallback+0x2c>)
 8008aac:	6913      	ldr	r3, [r2, #16]
 8008aae:	f043 0306 	orr.w	r3, r3, #6
 8008ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008abe:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008ac2:	f000 f97b 	bl	8008dbc <USBD_LL_Resume>
}
 8008ac6:	bd08      	pop	{r3, pc}

08008ac8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008aca:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008ace:	f000 f9a7 	bl	8008e20 <USBD_LL_IsoOUTIncomplete>
}
 8008ad2:	bd08      	pop	{r3, pc}

08008ad4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad4:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ad6:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008ada:	f000 f98b 	bl	8008df4 <USBD_LL_IsoINIncomplete>
}
 8008ade:	bd08      	pop	{r3, pc}

08008ae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ae2:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008ae6:	f000 f9b1 	bl	8008e4c <USBD_LL_DevConnected>
}
 8008aea:	bd08      	pop	{r3, pc}

08008aec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aec:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aee:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8008af2:	f000 f9ad 	bl	8008e50 <USBD_LL_DevDisconnected>
}
 8008af6:	bd08      	pop	{r3, pc}

08008af8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008af8:	7803      	ldrb	r3, [r0, #0]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d001      	beq.n	8008b02 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
}
 8008afe:	2000      	movs	r0, #0
 8008b00:	4770      	bx	lr
{
 8008b02:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 8008b04:	4b16      	ldr	r3, [pc, #88]	@ (8008b60 <USBD_LL_Init+0x68>)
 8008b06:	f8c3 04e0 	str.w	r0, [r3, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008b0a:	f8c0 32c8 	str.w	r3, [r0, #712]	@ 0x2c8
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008b0e:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <USBD_LL_Init+0x6c>)
 8008b10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008b12:	2209      	movs	r2, #9
 8008b14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008b16:	2102      	movs	r1, #2
 8008b18:	71d9      	strb	r1, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008b1e:	7259      	strb	r1, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008b20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008b22:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008b24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008b26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008b28:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008b2a:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fa f82f 	bl	8002b90 <HAL_PCD_Init>
 8008b32:	b990      	cbnz	r0, 8008b5a <USBD_LL_Init+0x62>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008b34:	4c0a      	ldr	r4, [pc, #40]	@ (8008b60 <USBD_LL_Init+0x68>)
 8008b36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7fa fe25 	bl	800378a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008b40:	2280      	movs	r2, #128	@ 0x80
 8008b42:	2100      	movs	r1, #0
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7fa fdfa 	bl	800373e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008b4a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008b4e:	2101      	movs	r1, #1
 8008b50:	4620      	mov	r0, r4
 8008b52:	f7fa fdf4 	bl	800373e <HAL_PCDEx_SetTxFiFo>
}
 8008b56:	2000      	movs	r0, #0
 8008b58:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008b5a:	f7f7 fe55 	bl	8000808 <Error_Handler>
 8008b5e:	e7e9      	b.n	8008b34 <USBD_LL_Init+0x3c>
 8008b60:	20001970 	.word	0x20001970
 8008b64:	40040000 	.word	0x40040000

08008b68 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b68:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8008b6c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008b70:	d108      	bne.n	8008b84 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b72:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008b76:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008b7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008b7e:	f893 0256 	ldrb.w	r0, [r3, #598]	@ 0x256
  }
}
 8008b82:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b84:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008b88:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8008b8c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008b90:	7d98      	ldrb	r0, [r3, #22]
 8008b92:	4770      	bx	lr

08008b94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b94:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008b9a:	f7fa fa0b 	bl	8002fb4 <HAL_PCD_EP_GetRxCount>
}
 8008b9e:	bd08      	pop	{r3, pc}

08008ba0 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8008ba0:	4800      	ldr	r0, [pc, #0]	@ (8008ba4 <USBD_static_malloc+0x4>)
 8008ba2:	4770      	bx	lr
 8008ba4:	20001750 	.word	0x20001750

08008ba8 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{
  UNUSED(p);
}
 8008ba8:	4770      	bx	lr

08008baa <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008baa:	2803      	cmp	r0, #3
 8008bac:	d805      	bhi.n	8008bba <USBD_Get_USB_Status+0x10>
 8008bae:	e8df f000 	tbb	[pc, r0]
 8008bb2:	0405      	.short	0x0405
 8008bb4:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bb6:	2001      	movs	r0, #1
    break;
 8008bb8:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8008bba:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008bbc:	4770      	bx	lr

08008bbe <USBD_LL_Start>:
{
 8008bbe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8008bc0:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008bc4:	f7fa f874 	bl	8002cb0 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc8:	f7ff ffef 	bl	8008baa <USBD_Get_USB_Status>
}
 8008bcc:	bd08      	pop	{r3, pc}

08008bce <USBD_LL_OpenEP>:
{
 8008bce:	b508      	push	{r3, lr}
 8008bd0:	4694      	mov	ip, r2
 8008bd2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bd4:	4663      	mov	r3, ip
 8008bd6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008bda:	f7fa f948 	bl	8002e6e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bde:	f7ff ffe4 	bl	8008baa <USBD_Get_USB_Status>
}
 8008be2:	bd08      	pop	{r3, pc}

08008be4 <USBD_LL_CloseEP>:
{
 8008be4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008be6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008bea:	f7fa f986 	bl	8002efa <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bee:	f7ff ffdc 	bl	8008baa <USBD_Get_USB_Status>
}
 8008bf2:	bd08      	pop	{r3, pc}

08008bf4 <USBD_LL_StallEP>:
{
 8008bf4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bf6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008bfa:	f7fa fa09 	bl	8003010 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bfe:	f7ff ffd4 	bl	8008baa <USBD_Get_USB_Status>
}
 8008c02:	bd08      	pop	{r3, pc}

08008c04 <USBD_LL_ClearStallEP>:
{
 8008c04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c06:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008c0a:	f7fa fa44 	bl	8003096 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0e:	f7ff ffcc 	bl	8008baa <USBD_Get_USB_Status>
}
 8008c12:	bd08      	pop	{r3, pc}

08008c14 <USBD_LL_SetUSBAddress>:
{
 8008c14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c16:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008c1a:	f7fa f915 	bl	8002e48 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1e:	f7ff ffc4 	bl	8008baa <USBD_Get_USB_Status>
}
 8008c22:	bd08      	pop	{r3, pc}

08008c24 <USBD_LL_Transmit>:
{
 8008c24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c26:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008c2a:	f7fa f9cc 	bl	8002fc6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2e:	f7ff ffbc 	bl	8008baa <USBD_Get_USB_Status>
}
 8008c32:	bd08      	pop	{r3, pc}

08008c34 <USBD_LL_PrepareReceive>:
{
 8008c34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c36:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8008c3a:	f7fa f996 	bl	8002f6a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c3e:	f7ff ffb4 	bl	8008baa <USBD_Get_USB_Status>
}
 8008c42:	bd08      	pop	{r3, pc}

08008c44 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c44:	b198      	cbz	r0, 8008c6e <USBD_Init+0x2a>
{
 8008c46:	b508      	push	{r3, lr}
 8008c48:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	f8c3 02b8 	str.w	r0, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c50:	f8c3 02c4 	str.w	r0, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c54:	f8c3 02d0 	str.w	r0, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c58:	b109      	cbz	r1, 8008c5e <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8008c5a:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c5e:	2101      	movs	r1, #1
 8008c60:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c64:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff ff46 	bl	8008af8 <USBD_LL_Init>

  return ret;
}
 8008c6c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008c6e:	2003      	movs	r0, #3
}
 8008c70:	4770      	bx	lr

08008c72 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c72:	b510      	push	{r4, lr}
 8008c74:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8008c7c:	b1b9      	cbz	r1, 8008cae <USBD_RegisterClass+0x3c>
 8008c7e:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c80:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c84:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 8008c88:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008c8a:	b143      	cbz	r3, 8008c9e <USBD_RegisterClass+0x2c>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c8c:	32ae      	adds	r2, #174	@ 0xae
 8008c8e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	f10d 0006 	add.w	r0, sp, #6
 8008c98:	4798      	blx	r3
 8008c9a:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c9e:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8008ca8:	2000      	movs	r0, #0
}
 8008caa:	b002      	add	sp, #8
 8008cac:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008cae:	2003      	movs	r0, #3
 8008cb0:	e7fb      	b.n	8008caa <USBD_RegisterClass+0x38>

08008cb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cb2:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cb4:	f7ff ff83 	bl	8008bbe <USBD_LL_Start>
}
 8008cb8:	bd08      	pop	{r3, pc}

08008cba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cba:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cbc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008cc0:	b113      	cbz	r3, 8008cc8 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008cc6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7fc      	b.n	8008cc6 <USBD_SetClassConfig+0xc>

08008ccc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ccc:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cce:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	4798      	blx	r3
 8008cd6:	b900      	cbnz	r0, 8008cda <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008cd8:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8008cda:	2003      	movs	r0, #3
 8008cdc:	e7fc      	b.n	8008cd8 <USBD_ClrClassConfig+0xc>

08008cde <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cde:	b538      	push	{r3, r4, r5, lr}
 8008ce0:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ce2:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 f9bf 	bl	800906a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cf2:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 8008cf6:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cfa:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
 8008cfe:	f001 031f 	and.w	r3, r1, #31
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d007      	beq.n	8008d16 <USBD_LL_SetupStage+0x38>
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d00a      	beq.n	8008d20 <USBD_LL_SetupStage+0x42>
 8008d0a:	b973      	cbnz	r3, 8008d2a <USBD_LL_SetupStage+0x4c>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fb80 	bl	8009414 <USBD_StdDevReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d16:	4629      	mov	r1, r5
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f000 fbb6 	bl	800948a <USBD_StdItfReq>
      break;
 8008d1e:	e7f9      	b.n	8008d14 <USBD_LL_SetupStage+0x36>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 fbf3 	bl	800950e <USBD_StdEPReq>
      break;
 8008d28:	e7f4      	b.n	8008d14 <USBD_LL_SetupStage+0x36>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d2a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff ff60 	bl	8008bf4 <USBD_LL_StallEP>
      break;
 8008d34:	e7ee      	b.n	8008d14 <USBD_LL_SetupStage+0x36>

08008d36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d38:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d46:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d48:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d4c:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008d54:	b1db      	cbz	r3, 8008d8e <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	b1db      	cbz	r3, 8008d92 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4798      	blx	r3
 8008d5e:	4607      	mov	r7, r0
 8008d60:	b9c8      	cbnz	r0, 8008d96 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d62:	2340      	movs	r3, #64	@ 0x40
 8008d64:	2200      	movs	r2, #0
 8008d66:	4611      	mov	r1, r2
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f7ff ff30 	bl	8008bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d6e:	2601      	movs	r6, #1
 8008d70:	f8a4 6164 	strh.w	r6, [r4, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d74:	2540      	movs	r5, #64	@ 0x40
 8008d76:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2180      	movs	r1, #128	@ 0x80
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7ff ff24 	bl	8008bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d86:	84a6      	strh	r6, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d88:	6225      	str	r5, [r4, #32]

  return ret;
}
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8008d8e:	2700      	movs	r7, #0
 8008d90:	e7e7      	b.n	8008d62 <USBD_LL_Reset+0x2c>
 8008d92:	2700      	movs	r7, #0
 8008d94:	e7e5      	b.n	8008d62 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 8008d96:	2703      	movs	r7, #3
 8008d98:	e7e3      	b.n	8008d62 <USBD_LL_Reset+0x2c>

08008d9a <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008d9a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	4770      	bx	lr

08008da0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008da0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d004      	beq.n	8008db2 <USBD_LL_Suspend+0x12>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008da8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008db2:	2304      	movs	r3, #4
 8008db4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8008db8:	2000      	movs	r0, #0
 8008dba:	4770      	bx	lr

08008dbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dbc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d001      	beq.n	8008dc8 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8008dc8:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8008dd2:	e7f7      	b.n	8008dc4 <USBD_LL_Resume+0x8>

08008dd4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d001      	beq.n	8008de2 <USBD_LL_SOF+0xe>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8008dde:	2000      	movs	r0, #0
 8008de0:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 8008de2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0f9      	beq.n	8008dde <USBD_LL_SOF+0xa>
      if (pdev->pClass[0]->SOF != NULL)
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0f6      	beq.n	8008dde <USBD_LL_SOF+0xa>
        (void)pdev->pClass[0]->SOF(pdev);
 8008df0:	4798      	blx	r3
 8008df2:	e7f4      	b.n	8008dde <USBD_LL_SOF+0xa>

08008df4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008df4:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8008df6:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008dfa:	33ae      	adds	r3, #174	@ 0xae
 8008dfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008e00:	b153      	cbz	r3, 8008e18 <USBD_LL_IsoINIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e02:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008e06:	2a03      	cmp	r2, #3
 8008e08:	d001      	beq.n	8008e0e <USBD_LL_IsoINIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008e0a:	2000      	movs	r0, #0
}
 8008e0c:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	b123      	cbz	r3, 8008e1c <USBD_LL_IsoINIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e12:	4798      	blx	r3
  return USBD_OK;
 8008e14:	2000      	movs	r0, #0
 8008e16:	e7f9      	b.n	8008e0c <USBD_LL_IsoINIncomplete+0x18>
    return USBD_FAIL;
 8008e18:	2003      	movs	r0, #3
 8008e1a:	e7f7      	b.n	8008e0c <USBD_LL_IsoINIncomplete+0x18>
  return USBD_OK;
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e7f5      	b.n	8008e0c <USBD_LL_IsoINIncomplete+0x18>

08008e20 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e20:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8008e22:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8008e26:	33ae      	adds	r3, #174	@ 0xae
 8008e28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008e2c:	b153      	cbz	r3, 8008e44 <USBD_LL_IsoOUTIncomplete+0x24>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2e:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008e32:	2a03      	cmp	r2, #3
 8008e34:	d001      	beq.n	8008e3a <USBD_LL_IsoOUTIncomplete+0x1a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8008e36:	2000      	movs	r0, #0
}
 8008e38:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3c:	b123      	cbz	r3, 8008e48 <USBD_LL_IsoOUTIncomplete+0x28>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e3e:	4798      	blx	r3
  return USBD_OK;
 8008e40:	2000      	movs	r0, #0
 8008e42:	e7f9      	b.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x18>
    return USBD_FAIL;
 8008e44:	2003      	movs	r0, #3
 8008e46:	e7f7      	b.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x18>
  return USBD_OK;
 8008e48:	2000      	movs	r0, #0
 8008e4a:	e7f5      	b.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x18>

08008e4c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr

08008e50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e50:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8008e5c:	b123      	cbz	r3, 8008e68 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	7901      	ldrb	r1, [r0, #4]
 8008e62:	4798      	blx	r3
 8008e64:	b910      	cbnz	r0, 8008e6c <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8008e66:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e68:	2000      	movs	r0, #0
 8008e6a:	e7fc      	b.n	8008e66 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 8008e6c:	2003      	movs	r0, #3
 8008e6e:	e7fa      	b.n	8008e66 <USBD_LL_DevDisconnected+0x16>

08008e70 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008e70:	2000      	movs	r0, #0
 8008e72:	4770      	bx	lr

08008e74 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8008e74:	2000      	movs	r0, #0
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_DataOutStage>:
{
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d141      	bne.n	8008f06 <USBD_LL_DataOutStage+0x8e>
 8008e82:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e84:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008e88:	2a03      	cmp	r2, #3
 8008e8a:	d001      	beq.n	8008e90 <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 8008e8c:	4608      	mov	r0, r1
}
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008e90:	f8d0 115c 	ldr.w	r1, [r0, #348]	@ 0x15c
 8008e94:	f8d0 2160 	ldr.w	r2, [r0, #352]	@ 0x160
 8008e98:	4291      	cmp	r1, r2
 8008e9a:	d809      	bhi.n	8008eb0 <USBD_LL_DataOutStage+0x38>
        switch (pdev->request.bmRequest & 0x1FU)
 8008e9c:	f890 32aa 	ldrb.w	r3, [r0, #682]	@ 0x2aa
 8008ea0:	f003 031f 	and.w	r3, r3, #31
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d00e      	beq.n	8008ec6 <USBD_LL_DataOutStage+0x4e>
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d01a      	beq.n	8008ee2 <USBD_LL_DataOutStage+0x6a>
 8008eac:	4628      	mov	r0, r5
 8008eae:	e00f      	b.n	8008ed0 <USBD_LL_DataOutStage+0x58>
        pep->rem_length -= pep->maxpacket;
 8008eb0:	1a89      	subs	r1, r1, r2
 8008eb2:	f8c0 115c 	str.w	r1, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008eb6:	428a      	cmp	r2, r1
 8008eb8:	bf28      	it	cs
 8008eba:	460a      	movcs	r2, r1
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	f000 fd25 	bl	800990c <USBD_CtlContinueRx>
  return USBD_OK;
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	e7e3      	b.n	8008e8e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ec6:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8008eca:	f7ff ffd1 	bl	8008e70 <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ece:	b918      	cbnz	r0, 8008ed8 <USBD_LL_DataOutStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d009      	beq.n	8008eec <USBD_LL_DataOutStage+0x74>
        (void)USBD_CtlSendStatus(pdev);
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fd1f 	bl	800991c <USBD_CtlSendStatus>
  return USBD_OK;
 8008ede:	4628      	mov	r0, r5
 8008ee0:	e7d5      	b.n	8008e8e <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ee2:	f890 12ae 	ldrb.w	r1, [r0, #686]	@ 0x2ae
 8008ee6:	f7ff ffc5 	bl	8008e74 <USBD_CoreFindEP>
            break;
 8008eea:	e7f0      	b.n	8008ece <USBD_LL_DataOutStage+0x56>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eec:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008ef0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	2a00      	cmp	r2, #0
 8008ef8:	d0ee      	beq.n	8008ed8 <USBD_LL_DataOutStage+0x60>
              pdev->classId = idx;
 8008efa:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	4620      	mov	r0, r4
 8008f02:	4798      	blx	r3
 8008f04:	e7e8      	b.n	8008ed8 <USBD_LL_DataOutStage+0x60>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f06:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8008f0a:	f7ff ffb3 	bl	8008e74 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f0e:	b988      	cbnz	r0, 8008f34 <USBD_LL_DataOutStage+0xbc>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d1ba      	bne.n	8008e8e <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f18:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008f1c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d0b3      	beq.n	8008e8e <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 8008f26:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4798      	blx	r3
      if (ret != USBD_OK)
 8008f32:	e7ac      	b.n	8008e8e <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8008f34:	2000      	movs	r0, #0
 8008f36:	e7aa      	b.n	8008e8e <USBD_LL_DataOutStage+0x16>

08008f38 <USBD_LL_DataInStage>:
{
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4604      	mov	r4, r0
  if (epnum == 0U)
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d14a      	bne.n	8008fd8 <USBD_LL_DataInStage+0xa0>
 8008f42:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f44:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008f48:	2a02      	cmp	r2, #2
 8008f4a:	d007      	beq.n	8008f5c <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 8008f4c:	f894 02a0 	ldrb.w	r0, [r4, #672]	@ 0x2a0
 8008f50:	b118      	cbz	r0, 8008f5a <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 8008f58:	4628      	mov	r0, r5
}
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008f5c:	69c2      	ldr	r2, [r0, #28]
 8008f5e:	6a01      	ldr	r1, [r0, #32]
 8008f60:	428a      	cmp	r2, r1
 8008f62:	d80d      	bhi.n	8008f80 <USBD_LL_DataInStage+0x48>
        if ((pep->maxpacket == pep->rem_length) &&
 8008f64:	428a      	cmp	r2, r1
 8008f66:	d017      	beq.n	8008f98 <USBD_LL_DataInStage+0x60>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f68:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d027      	beq.n	8008fc0 <USBD_LL_DataInStage+0x88>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f70:	2180      	movs	r1, #128	@ 0x80
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fe3e 	bl	8008bf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fcda 	bl	8009932 <USBD_CtlReceiveStatus>
 8008f7e:	e7e5      	b.n	8008f4c <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8008f80:	1a52      	subs	r2, r2, r1
 8008f82:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f84:	4619      	mov	r1, r3
 8008f86:	f000 fcaa 	bl	80098de <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7ff fe4f 	bl	8008c34 <USBD_LL_PrepareReceive>
 8008f96:	e7d9      	b.n	8008f4c <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 8008f98:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d8e4      	bhi.n	8008f68 <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 8008f9e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d2e0      	bcs.n	8008f68 <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4611      	mov	r1, r2
 8008faa:	f000 fc98 	bl	80098de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fae:	2100      	movs	r1, #0
 8008fb0:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	460a      	mov	r2, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f7ff fe3b 	bl	8008c34 <USBD_LL_PrepareReceive>
 8008fbe:	e7c5      	b.n	8008f4c <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fc0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d0d2      	beq.n	8008f70 <USBD_LL_DataInStage+0x38>
              pdev->classId = 0U;
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4798      	blx	r3
 8008fd6:	e7cb      	b.n	8008f70 <USBD_LL_DataInStage+0x38>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008fd8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8008fdc:	f7ff ff4a 	bl	8008e74 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fe0:	b988      	cbnz	r0, 8009006 <USBD_LL_DataInStage+0xce>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d1b7      	bne.n	8008f5a <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8008fea:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 8008fee:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008ff2:	695a      	ldr	r2, [r3, #20]
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	d0b0      	beq.n	8008f5a <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8008ff8:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	4629      	mov	r1, r5
 8009000:	4620      	mov	r0, r4
 8009002:	4798      	blx	r3
          if (ret != USBD_OK)
 8009004:	e7a9      	b.n	8008f5a <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 8009006:	2000      	movs	r0, #0
 8009008:	e7a7      	b.n	8008f5a <USBD_LL_DataInStage+0x22>

0800900a <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 800900a:	880b      	ldrh	r3, [r1, #0]
 800900c:	7802      	ldrb	r2, [r0, #0]
 800900e:	4413      	add	r3, r2
 8009010:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009012:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 8009014:	4418      	add	r0, r3
 8009016:	4770      	bx	lr

08009018 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8009018:	8842      	ldrh	r2, [r0, #2]
 800901a:	7803      	ldrb	r3, [r0, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d918      	bls.n	8009052 <USBD_GetEpDesc+0x3a>
{
 8009020:	b530      	push	{r4, r5, lr}
 8009022:	b083      	sub	sp, #12
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8009028:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 800902c:	8863      	ldrh	r3, [r4, #2]
 800902e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009032:	429a      	cmp	r2, r3
 8009034:	d20a      	bcs.n	800904c <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009036:	f10d 0106 	add.w	r1, sp, #6
 800903a:	f7ff ffe6 	bl	800900a <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800903e:	7843      	ldrb	r3, [r0, #1]
 8009040:	2b05      	cmp	r3, #5
 8009042:	d1f3      	bne.n	800902c <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8009044:	7883      	ldrb	r3, [r0, #2]
 8009046:	42ab      	cmp	r3, r5
 8009048:	d1f0      	bne.n	800902c <USBD_GetEpDesc+0x14>
 800904a:	e000      	b.n	800904e <USBD_GetEpDesc+0x36>
 800904c:	2000      	movs	r0, #0
}
 800904e:	b003      	add	sp, #12
 8009050:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009052:	2000      	movs	r0, #0
}
 8009054:	4770      	bx	lr

08009056 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009056:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8009058:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800905a:	e002      	b.n	8009062 <USBD_GetLen+0xc>
  {
    len++;
 800905c:	3001      	adds	r0, #1
 800905e:	b2c0      	uxtb	r0, r0
    pbuff++;
 8009060:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	2a00      	cmp	r2, #0
 8009066:	d1f9      	bne.n	800905c <USBD_GetLen+0x6>
  }

  return len;
}
 8009068:	4770      	bx	lr

0800906a <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800906a:	780b      	ldrb	r3, [r1, #0]
 800906c:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800906e:	784b      	ldrb	r3, [r1, #1]
 8009070:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8009072:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8009074:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009076:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800907a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800907c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800907e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009080:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8009084:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8009086:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8009088:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800908a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800908e:	80c3      	strh	r3, [r0, #6]
}
 8009090:	4770      	bx	lr

08009092 <USBD_CtlError>:
{
 8009092:	b510      	push	{r4, lr}
 8009094:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009096:	2180      	movs	r1, #128	@ 0x80
 8009098:	f7ff fdac 	bl	8008bf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800909c:	2100      	movs	r1, #0
 800909e:	4620      	mov	r0, r4
 80090a0:	f7ff fda8 	bl	8008bf4 <USBD_LL_StallEP>
}
 80090a4:	bd10      	pop	{r4, pc}

080090a6 <USBD_GetDescriptor>:
{
 80090a6:	b530      	push	{r4, r5, lr}
 80090a8:	b083      	sub	sp, #12
 80090aa:	4604      	mov	r4, r0
 80090ac:	460d      	mov	r5, r1
  uint16_t len = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80090b4:	884a      	ldrh	r2, [r1, #2]
 80090b6:	0a13      	lsrs	r3, r2, #8
 80090b8:	3b01      	subs	r3, #1
 80090ba:	2b06      	cmp	r3, #6
 80090bc:	f200 80aa 	bhi.w	8009214 <USBD_GetDescriptor+0x16e>
 80090c0:	e8df f003 	tbb	[pc, r3]
 80090c4:	a8321e04 	.word	0xa8321e04
 80090c8:	8ca8      	.short	0x8ca8
 80090ca:	99          	.byte	0x99
 80090cb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090cc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f10d 0106 	add.w	r1, sp, #6
 80090d6:	7c00      	ldrb	r0, [r0, #16]
 80090d8:	4798      	blx	r3
  if (req->wLength != 0U)
 80090da:	88ea      	ldrh	r2, [r5, #6]
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 80a3 	beq.w	8009228 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 80090e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8099 	beq.w	800921e <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 80090ec:	429a      	cmp	r2, r3
 80090ee:	bf28      	it	cs
 80090f0:	461a      	movcs	r2, r3
 80090f2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090f6:	4601      	mov	r1, r0
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 fbe3 	bl	80098c4 <USBD_CtlSendData>
 80090fe:	e08c      	b.n	800921a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009100:	7c03      	ldrb	r3, [r0, #16]
 8009102:	b943      	cbnz	r3, 8009116 <USBD_GetDescriptor+0x70>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009104:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	f10d 0006 	add.w	r0, sp, #6
 800910e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009110:	2302      	movs	r3, #2
 8009112:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009114:	e7e1      	b.n	80090da <USBD_GetDescriptor+0x34>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009116:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 800911a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911c:	f10d 0006 	add.w	r0, sp, #6
 8009120:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009122:	2302      	movs	r3, #2
 8009124:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8009126:	e7d8      	b.n	80090da <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	2a05      	cmp	r2, #5
 800912c:	d852      	bhi.n	80091d4 <USBD_GetDescriptor+0x12e>
 800912e:	e8df f002 	tbb	[pc, r2]
 8009132:	1003      	.short	0x1003
 8009134:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009138:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b123      	cbz	r3, 800914a <USBD_GetDescriptor+0xa4>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009140:	f10d 0106 	add.w	r1, sp, #6
 8009144:	7c00      	ldrb	r0, [r0, #16]
 8009146:	4798      	blx	r3
  if (err != 0U)
 8009148:	e7c7      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800914a:	4629      	mov	r1, r5
 800914c:	f7ff ffa1 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 8009150:	e063      	b.n	800921a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009152:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	b123      	cbz	r3, 8009164 <USBD_GetDescriptor+0xbe>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800915a:	f10d 0106 	add.w	r1, sp, #6
 800915e:	7c00      	ldrb	r0, [r0, #16]
 8009160:	4798      	blx	r3
  if (err != 0U)
 8009162:	e7ba      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8009164:	4629      	mov	r1, r5
 8009166:	f7ff ff94 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 800916a:	e056      	b.n	800921a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800916c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	b123      	cbz	r3, 800917e <USBD_GetDescriptor+0xd8>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009174:	f10d 0106 	add.w	r1, sp, #6
 8009178:	7c00      	ldrb	r0, [r0, #16]
 800917a:	4798      	blx	r3
  if (err != 0U)
 800917c:	e7ad      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800917e:	4629      	mov	r1, r5
 8009180:	f7ff ff87 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 8009184:	e049      	b.n	800921a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009186:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	b123      	cbz	r3, 8009198 <USBD_GetDescriptor+0xf2>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800918e:	f10d 0106 	add.w	r1, sp, #6
 8009192:	7c00      	ldrb	r0, [r0, #16]
 8009194:	4798      	blx	r3
  if (err != 0U)
 8009196:	e7a0      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8009198:	4629      	mov	r1, r5
 800919a:	f7ff ff7a 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 800919e:	e03c      	b.n	800921a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	b123      	cbz	r3, 80091b2 <USBD_GetDescriptor+0x10c>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091a8:	f10d 0106 	add.w	r1, sp, #6
 80091ac:	7c00      	ldrb	r0, [r0, #16]
 80091ae:	4798      	blx	r3
  if (err != 0U)
 80091b0:	e793      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80091b2:	4629      	mov	r1, r5
 80091b4:	f7ff ff6d 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 80091b8:	e02f      	b.n	800921a <USBD_GetDescriptor+0x174>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	b123      	cbz	r3, 80091cc <USBD_GetDescriptor+0x126>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091c2:	f10d 0106 	add.w	r1, sp, #6
 80091c6:	7c00      	ldrb	r0, [r0, #16]
 80091c8:	4798      	blx	r3
  if (err != 0U)
 80091ca:	e786      	b.n	80090da <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80091cc:	4629      	mov	r1, r5
 80091ce:	f7ff ff60 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 80091d2:	e022      	b.n	800921a <USBD_GetDescriptor+0x174>
          USBD_CtlError(pdev, req);
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7ff ff5c 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 80091da:	e01e      	b.n	800921a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091dc:	7c03      	ldrb	r3, [r0, #16]
 80091de:	b933      	cbnz	r3, 80091ee <USBD_GetDescriptor+0x148>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80091e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e6:	f10d 0006 	add.w	r0, sp, #6
 80091ea:	4798      	blx	r3
  if (err != 0U)
 80091ec:	e775      	b.n	80090da <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7ff ff4f 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 80091f4:	e011      	b.n	800921a <USBD_GetDescriptor+0x174>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f6:	7c03      	ldrb	r3, [r0, #16]
 80091f8:	b943      	cbnz	r3, 800920c <USBD_GetDescriptor+0x166>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80091fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009200:	f10d 0006 	add.w	r0, sp, #6
 8009204:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009206:	2307      	movs	r3, #7
 8009208:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800920a:	e766      	b.n	80090da <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800920c:	4629      	mov	r1, r5
 800920e:	f7ff ff40 	bl	8009092 <USBD_CtlError>
  if (err != 0U)
 8009212:	e002      	b.n	800921a <USBD_GetDescriptor+0x174>
      USBD_CtlError(pdev, req);
 8009214:	4629      	mov	r1, r5
 8009216:	f7ff ff3c 	bl	8009092 <USBD_CtlError>
}
 800921a:	b003      	add	sp, #12
 800921c:	bd30      	pop	{r4, r5, pc}
      USBD_CtlError(pdev, req);
 800921e:	4629      	mov	r1, r5
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff ff36 	bl	8009092 <USBD_CtlError>
 8009226:	e7f8      	b.n	800921a <USBD_GetDescriptor+0x174>
    (void)USBD_CtlSendStatus(pdev);
 8009228:	4620      	mov	r0, r4
 800922a:	f000 fb77 	bl	800991c <USBD_CtlSendStatus>
 800922e:	e7f4      	b.n	800921a <USBD_GetDescriptor+0x174>

08009230 <USBD_SetAddress>:
{
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009234:	888b      	ldrh	r3, [r1, #4]
 8009236:	b9f3      	cbnz	r3, 8009276 <USBD_SetAddress+0x46>
 8009238:	88cb      	ldrh	r3, [r1, #6]
 800923a:	b9e3      	cbnz	r3, 8009276 <USBD_SetAddress+0x46>
 800923c:	884b      	ldrh	r3, [r1, #2]
 800923e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009240:	d819      	bhi.n	8009276 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009242:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009246:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800924a:	2b03      	cmp	r3, #3
 800924c:	d00c      	beq.n	8009268 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 800924e:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009252:	4629      	mov	r1, r5
 8009254:	f7ff fcde 	bl	8008c14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fb5f 	bl	800991c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800925e:	b135      	cbz	r5, 800926e <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009260:	2302      	movs	r3, #2
 8009262:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009266:	e009      	b.n	800927c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8009268:	f7ff ff13 	bl	8009092 <USBD_CtlError>
 800926c:	e006      	b.n	800927c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800926e:	2301      	movs	r3, #1
 8009270:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009274:	e002      	b.n	800927c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8009276:	4620      	mov	r0, r4
 8009278:	f7ff ff0b 	bl	8009092 <USBD_CtlError>
}
 800927c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009280 <USBD_SetConfig>:
{
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4604      	mov	r4, r0
 8009284:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8009286:	788d      	ldrb	r5, [r1, #2]
 8009288:	4b2f      	ldr	r3, [pc, #188]	@ (8009348 <USBD_SetConfig+0xc8>)
 800928a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800928c:	2d01      	cmp	r5, #1
 800928e:	d810      	bhi.n	80092b2 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 8009290:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009294:	b2da      	uxtb	r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d00f      	beq.n	80092ba <USBD_SetConfig+0x3a>
 800929a:	2a03      	cmp	r2, #3
 800929c:	d026      	beq.n	80092ec <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 800929e:	f7ff fef8 	bl	8009092 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092a2:	4b29      	ldr	r3, [pc, #164]	@ (8009348 <USBD_SetConfig+0xc8>)
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fd10 	bl	8008ccc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092ac:	2503      	movs	r5, #3
}
 80092ae:	4628      	mov	r0, r5
 80092b0:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 80092b2:	f7ff feee 	bl	8009092 <USBD_CtlError>
    return USBD_FAIL;
 80092b6:	2503      	movs	r5, #3
 80092b8:	e7f9      	b.n	80092ae <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 80092ba:	b1a5      	cbz	r5, 80092e6 <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 80092bc:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092be:	4629      	mov	r1, r5
 80092c0:	f7ff fcfb 	bl	8008cba <USBD_SetClassConfig>
        if (ret != USBD_OK)
 80092c4:	4605      	mov	r5, r0
 80092c6:	b138      	cbz	r0, 80092d8 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 80092c8:	4631      	mov	r1, r6
 80092ca:	4620      	mov	r0, r4
 80092cc:	f7ff fee1 	bl	8009092 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d0:	2302      	movs	r3, #2
 80092d2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80092d6:	e7ea      	b.n	80092ae <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fb1f 	bl	800991c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092de:	2303      	movs	r3, #3
 80092e0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80092e4:	e7e3      	b.n	80092ae <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80092e6:	f000 fb19 	bl	800991c <USBD_CtlSendStatus>
 80092ea:	e7e0      	b.n	80092ae <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 80092ec:	b1cd      	cbz	r5, 8009322 <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 80092ee:	6841      	ldr	r1, [r0, #4]
 80092f0:	428d      	cmp	r5, r1
 80092f2:	d025      	beq.n	8009340 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092f4:	b2c9      	uxtb	r1, r1
 80092f6:	f7ff fce9 	bl	8008ccc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092fa:	4b13      	ldr	r3, [pc, #76]	@ (8009348 <USBD_SetConfig+0xc8>)
 80092fc:	7819      	ldrb	r1, [r3, #0]
 80092fe:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff fcda 	bl	8008cba <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8009306:	4605      	mov	r5, r0
 8009308:	b1b0      	cbz	r0, 8009338 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 800930a:	4631      	mov	r1, r6
 800930c:	4620      	mov	r0, r4
 800930e:	f7ff fec0 	bl	8009092 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009312:	7921      	ldrb	r1, [r4, #4]
 8009314:	4620      	mov	r0, r4
 8009316:	f7ff fcd9 	bl	8008ccc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800931a:	2302      	movs	r3, #2
 800931c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8009320:	e7c5      	b.n	80092ae <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009322:	2302      	movs	r3, #2
 8009324:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009328:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800932a:	4629      	mov	r1, r5
 800932c:	f7ff fcce 	bl	8008ccc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009330:	4620      	mov	r0, r4
 8009332:	f000 faf3 	bl	800991c <USBD_CtlSendStatus>
 8009336:	e7ba      	b.n	80092ae <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8009338:	4620      	mov	r0, r4
 800933a:	f000 faef 	bl	800991c <USBD_CtlSendStatus>
 800933e:	e7b6      	b.n	80092ae <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8009340:	f000 faec 	bl	800991c <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009344:	2500      	movs	r5, #0
 8009346:	e7b2      	b.n	80092ae <USBD_SetConfig+0x2e>
 8009348:	20001e54 	.word	0x20001e54

0800934c <USBD_GetConfig>:
{
 800934c:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800934e:	88cb      	ldrh	r3, [r1, #6]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d10b      	bne.n	800936c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 8009354:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009358:	b2da      	uxtb	r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d909      	bls.n	8009372 <USBD_GetConfig+0x26>
 800935e:	2a03      	cmp	r2, #3
 8009360:	d111      	bne.n	8009386 <USBD_GetConfig+0x3a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009362:	2201      	movs	r2, #1
 8009364:	1d01      	adds	r1, r0, #4
 8009366:	f000 faad 	bl	80098c4 <USBD_CtlSendData>
        break;
 800936a:	e001      	b.n	8009370 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800936c:	f7ff fe91 	bl	8009092 <USBD_CtlError>
}
 8009370:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8009372:	b252      	sxtb	r2, r2
 8009374:	b13a      	cbz	r2, 8009386 <USBD_GetConfig+0x3a>
        pdev->dev_default_config = 0U;
 8009376:	4601      	mov	r1, r0
 8009378:	2300      	movs	r3, #0
 800937a:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800937e:	2201      	movs	r2, #1
 8009380:	f000 faa0 	bl	80098c4 <USBD_CtlSendData>
        break;
 8009384:	e7f4      	b.n	8009370 <USBD_GetConfig+0x24>
        USBD_CtlError(pdev, req);
 8009386:	f7ff fe84 	bl	8009092 <USBD_CtlError>
}
 800938a:	e7f1      	b.n	8009370 <USBD_GetConfig+0x24>

0800938c <USBD_GetStatus>:
{
 800938c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800938e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009392:	3b01      	subs	r3, #1
 8009394:	2b02      	cmp	r3, #2
 8009396:	d812      	bhi.n	80093be <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8009398:	88cb      	ldrh	r3, [r1, #6]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d10c      	bne.n	80093b8 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80093a2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80093a6:	b10b      	cbz	r3, 80093ac <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093a8:	2302      	movs	r3, #2
 80093aa:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093ac:	2202      	movs	r2, #2
 80093ae:	f100 010c 	add.w	r1, r0, #12
 80093b2:	f000 fa87 	bl	80098c4 <USBD_CtlSendData>
}
 80093b6:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 80093b8:	f7ff fe6b 	bl	8009092 <USBD_CtlError>
        break;
 80093bc:	e7fb      	b.n	80093b6 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 80093be:	f7ff fe68 	bl	8009092 <USBD_CtlError>
}
 80093c2:	e7f8      	b.n	80093b6 <USBD_GetStatus+0x2a>

080093c4 <USBD_SetFeature>:
{
 80093c4:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c6:	884b      	ldrh	r3, [r1, #2]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d004      	beq.n	80093d6 <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d007      	beq.n	80093e0 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 80093d0:	f7ff fe5f 	bl	8009092 <USBD_CtlError>
}
 80093d4:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80093d6:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093da:	f000 fa9f 	bl	800991c <USBD_CtlSendStatus>
 80093de:	e7f9      	b.n	80093d4 <USBD_SetFeature+0x10>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80093e0:	888b      	ldrh	r3, [r1, #4]
 80093e2:	0a1b      	lsrs	r3, r3, #8
 80093e4:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80093e8:	f000 fa98 	bl	800991c <USBD_CtlSendStatus>
 80093ec:	e7f2      	b.n	80093d4 <USBD_SetFeature+0x10>

080093ee <USBD_ClrFeature>:
{
 80093ee:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80093f0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d809      	bhi.n	800940e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093fa:	884b      	ldrh	r3, [r1, #2]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d000      	beq.n	8009402 <USBD_ClrFeature+0x14>
}
 8009400:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009408:	f000 fa88 	bl	800991c <USBD_CtlSendStatus>
 800940c:	e7f8      	b.n	8009400 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800940e:	f7ff fe40 	bl	8009092 <USBD_CtlError>
}
 8009412:	e7f5      	b.n	8009400 <USBD_ClrFeature+0x12>

08009414 <USBD_StdDevReq>:
{
 8009414:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009416:	780c      	ldrb	r4, [r1, #0]
 8009418:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 800941c:	2c20      	cmp	r4, #32
 800941e:	d006      	beq.n	800942e <USBD_StdDevReq+0x1a>
 8009420:	2c40      	cmp	r4, #64	@ 0x40
 8009422:	d004      	beq.n	800942e <USBD_StdDevReq+0x1a>
 8009424:	b16c      	cbz	r4, 8009442 <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 8009426:	f7ff fe34 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2400      	movs	r4, #0
      break;
 800942c:	e007      	b.n	800943e <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800942e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 8009432:	33ae      	adds	r3, #174	@ 0xae
 8009434:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	4798      	blx	r3
 800943c:	4604      	mov	r4, r0
}
 800943e:	4620      	mov	r0, r4
 8009440:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8009442:	784d      	ldrb	r5, [r1, #1]
 8009444:	2d09      	cmp	r5, #9
 8009446:	d81d      	bhi.n	8009484 <USBD_StdDevReq+0x70>
 8009448:	e8df f005 	tbb	[pc, r5]
 800944c:	161c1912 	.word	0x161c1912
 8009450:	1c05081c 	.word	0x1c05081c
 8009454:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 8009456:	f7ff fe26 	bl	80090a6 <USBD_GetDescriptor>
          break;
 800945a:	e7f0      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 800945c:	f7ff fee8 	bl	8009230 <USBD_SetAddress>
          break;
 8009460:	e7ed      	b.n	800943e <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 8009462:	f7ff ff0d 	bl	8009280 <USBD_SetConfig>
 8009466:	4604      	mov	r4, r0
          break;
 8009468:	e7e9      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 800946a:	f7ff ff6f 	bl	800934c <USBD_GetConfig>
          break;
 800946e:	e7e6      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 8009470:	f7ff ff8c 	bl	800938c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8009474:	462c      	mov	r4, r5
          break;
 8009476:	e7e2      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 8009478:	f7ff ffa4 	bl	80093c4 <USBD_SetFeature>
          break;
 800947c:	e7df      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 800947e:	f7ff ffb6 	bl	80093ee <USBD_ClrFeature>
          break;
 8009482:	e7dc      	b.n	800943e <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8009484:	f7ff fe05 	bl	8009092 <USBD_CtlError>
          break;
 8009488:	e7d9      	b.n	800943e <USBD_StdDevReq+0x2a>

0800948a <USBD_StdItfReq>:
{
 800948a:	b570      	push	{r4, r5, r6, lr}
 800948c:	4605      	mov	r5, r0
 800948e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009490:	780b      	ldrb	r3, [r1, #0]
 8009492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009496:	2b20      	cmp	r3, #32
 8009498:	d007      	beq.n	80094aa <USBD_StdItfReq+0x20>
 800949a:	2b40      	cmp	r3, #64	@ 0x40
 800949c:	d005      	beq.n	80094aa <USBD_StdItfReq+0x20>
 800949e:	b123      	cbz	r3, 80094aa <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80094a0:	f7ff fdf7 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80094a4:	2600      	movs	r6, #0
}
 80094a6:	4630      	mov	r0, r6
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80094aa:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 80094ae:	3b01      	subs	r3, #1
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d826      	bhi.n	8009502 <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094b4:	7921      	ldrb	r1, [r4, #4]
 80094b6:	2901      	cmp	r1, #1
 80094b8:	d905      	bls.n	80094c6 <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff fde8 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80094c2:	2600      	movs	r6, #0
 80094c4:	e7ef      	b.n	80094a6 <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7ff fcd2 	bl	8008e70 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094cc:	b968      	cbnz	r0, 80094ea <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 80094ce:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 80094d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80094d6:	6891      	ldr	r1, [r2, #8]
 80094d8:	b189      	cbz	r1, 80094fe <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 80094da:	f8c5 02d4 	str.w	r0, [r5, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094de:	6893      	ldr	r3, [r2, #8]
 80094e0:	4621      	mov	r1, r4
 80094e2:	4628      	mov	r0, r5
 80094e4:	4798      	blx	r3
 80094e6:	4606      	mov	r6, r0
 80094e8:	e000      	b.n	80094ec <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 80094ea:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094ec:	88e3      	ldrh	r3, [r4, #6]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1d9      	bne.n	80094a6 <USBD_StdItfReq+0x1c>
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d1d7      	bne.n	80094a6 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 fa10 	bl	800991c <USBD_CtlSendStatus>
 80094fc:	e7d3      	b.n	80094a6 <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 80094fe:	2603      	movs	r6, #3
 8009500:	e7f4      	b.n	80094ec <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fdc4 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2600      	movs	r6, #0
          break;
 800950c:	e7cb      	b.n	80094a6 <USBD_StdItfReq+0x1c>

0800950e <USBD_StdEPReq>:
{
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	4606      	mov	r6, r0
 8009514:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8009516:	888b      	ldrh	r3, [r1, #4]
 8009518:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800951a:	780c      	ldrb	r4, [r1, #0]
 800951c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8009520:	2c20      	cmp	r4, #32
 8009522:	d008      	beq.n	8009536 <USBD_StdEPReq+0x28>
 8009524:	2c40      	cmp	r4, #64	@ 0x40
 8009526:	d006      	beq.n	8009536 <USBD_StdEPReq+0x28>
 8009528:	b1dc      	cbz	r4, 8009562 <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 800952a:	f7ff fdb2 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800952e:	2400      	movs	r4, #0
}
 8009530:	4620      	mov	r0, r4
 8009532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009536:	4639      	mov	r1, r7
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff fc9b 	bl	8008e74 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800953e:	4604      	mov	r4, r0
 8009540:	2800      	cmp	r0, #0
 8009542:	f040 80fd 	bne.w	8009740 <USBD_StdEPReq+0x232>
        pdev->classId = idx;
 8009546:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 800954a:	f100 03ae 	add.w	r3, r0, #174	@ 0xae
 800954e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0eb      	beq.n	8009530 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009558:	4629      	mov	r1, r5
 800955a:	4630      	mov	r0, r6
 800955c:	4798      	blx	r3
 800955e:	4604      	mov	r4, r0
 8009560:	e7e6      	b.n	8009530 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 8009562:	f891 8001 	ldrb.w	r8, [r1, #1]
 8009566:	f1b8 0f01 	cmp.w	r8, #1
 800956a:	d031      	beq.n	80095d0 <USBD_StdEPReq+0xc2>
 800956c:	f1b8 0f03 	cmp.w	r8, #3
 8009570:	d005      	beq.n	800957e <USBD_StdEPReq+0x70>
 8009572:	f1b8 0f00 	cmp.w	r8, #0
 8009576:	d066      	beq.n	8009646 <USBD_StdEPReq+0x138>
          USBD_CtlError(pdev, req);
 8009578:	f7ff fd8b 	bl	8009092 <USBD_CtlError>
          break;
 800957c:	e7d8      	b.n	8009530 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 800957e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8009582:	b2da      	uxtb	r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d004      	beq.n	8009592 <USBD_StdEPReq+0x84>
 8009588:	2a03      	cmp	r2, #3
 800958a:	d011      	beq.n	80095b0 <USBD_StdEPReq+0xa2>
              USBD_CtlError(pdev, req);
 800958c:	f7ff fd81 	bl	8009092 <USBD_CtlError>
              break;
 8009590:	e7ce      	b.n	8009530 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009592:	2f00      	cmp	r7, #0
 8009594:	bf18      	it	ne
 8009596:	2f80      	cmpne	r7, #128	@ 0x80
 8009598:	d007      	beq.n	80095aa <USBD_StdEPReq+0x9c>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800959a:	4639      	mov	r1, r7
 800959c:	f7ff fb2a 	bl	8008bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a0:	2180      	movs	r1, #128	@ 0x80
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff fb26 	bl	8008bf4 <USBD_LL_StallEP>
 80095a8:	e7c2      	b.n	8009530 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80095aa:	f7ff fd72 	bl	8009092 <USBD_CtlError>
 80095ae:	e7bf      	b.n	8009530 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095b0:	884b      	ldrh	r3, [r1, #2]
 80095b2:	b92b      	cbnz	r3, 80095c0 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095b4:	2f00      	cmp	r7, #0
 80095b6:	bf18      	it	ne
 80095b8:	2f80      	cmpne	r7, #128	@ 0x80
 80095ba:	d001      	beq.n	80095c0 <USBD_StdEPReq+0xb2>
 80095bc:	88cb      	ldrh	r3, [r1, #6]
 80095be:	b11b      	cbz	r3, 80095c8 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 f9ab 	bl	800991c <USBD_CtlSendStatus>
              break;
 80095c6:	e7b3      	b.n	8009530 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7ff fb13 	bl	8008bf4 <USBD_LL_StallEP>
 80095ce:	e7f7      	b.n	80095c0 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 80095d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d004      	beq.n	80095e4 <USBD_StdEPReq+0xd6>
 80095da:	2a03      	cmp	r2, #3
 80095dc:	d011      	beq.n	8009602 <USBD_StdEPReq+0xf4>
              USBD_CtlError(pdev, req);
 80095de:	f7ff fd58 	bl	8009092 <USBD_CtlError>
              break;
 80095e2:	e7a5      	b.n	8009530 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095e4:	2f00      	cmp	r7, #0
 80095e6:	bf18      	it	ne
 80095e8:	2f80      	cmpne	r7, #128	@ 0x80
 80095ea:	d007      	beq.n	80095fc <USBD_StdEPReq+0xee>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7ff fb01 	bl	8008bf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095f2:	2180      	movs	r1, #128	@ 0x80
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff fafd 	bl	8008bf4 <USBD_LL_StallEP>
 80095fa:	e799      	b.n	8009530 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80095fc:	f7ff fd49 	bl	8009092 <USBD_CtlError>
 8009600:	e796      	b.n	8009530 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009602:	884b      	ldrh	r3, [r1, #2]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d193      	bne.n	8009530 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8009608:	f017 0f7f 	tst.w	r7, #127	@ 0x7f
 800960c:	d117      	bne.n	800963e <USBD_StdEPReq+0x130>
                (void)USBD_CtlSendStatus(pdev);
 800960e:	4630      	mov	r0, r6
 8009610:	f000 f984 	bl	800991c <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	f7ff fc2c 	bl	8008e74 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800961c:	2800      	cmp	r0, #0
 800961e:	d187      	bne.n	8009530 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 8009620:	f8c6 02d4 	str.w	r0, [r6, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8009624:	f100 02ae 	add.w	r2, r0, #174	@ 0xae
 8009628:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800962c:	6892      	ldr	r2, [r2, #8]
 800962e:	2a00      	cmp	r2, #0
 8009630:	f000 8088 	beq.w	8009744 <USBD_StdEPReq+0x236>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	4790      	blx	r2
 800963a:	4604      	mov	r4, r0
 800963c:	e778      	b.n	8009530 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800963e:	4639      	mov	r1, r7
 8009640:	f7ff fae0 	bl	8008c04 <USBD_LL_ClearStallEP>
 8009644:	e7e3      	b.n	800960e <USBD_StdEPReq+0x100>
          switch (pdev->dev_state)
 8009646:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800964a:	b2d1      	uxtb	r1, r2
 800964c:	2a02      	cmp	r2, #2
 800964e:	d006      	beq.n	800965e <USBD_StdEPReq+0x150>
 8009650:	2903      	cmp	r1, #3
 8009652:	d02a      	beq.n	80096aa <USBD_StdEPReq+0x19c>
              USBD_CtlError(pdev, req);
 8009654:	4629      	mov	r1, r5
 8009656:	f7ff fd1c 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	4644      	mov	r4, r8
              break;
 800965c:	e768      	b.n	8009530 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800965e:	2f00      	cmp	r7, #0
 8009660:	bf18      	it	ne
 8009662:	2f80      	cmpne	r7, #128	@ 0x80
 8009664:	d113      	bne.n	800968e <USBD_StdEPReq+0x180>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009666:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800966a:	d115      	bne.n	8009698 <USBD_StdEPReq+0x18a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800966c:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009670:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009674:	00b9      	lsls	r1, r7, #2
 8009676:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 800967a:	4401      	add	r1, r0
 800967c:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800967e:	2300      	movs	r3, #0
 8009680:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009682:	2202      	movs	r2, #2
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f91d 	bl	80098c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	4644      	mov	r4, r8
              break;
 800968c:	e750      	b.n	8009530 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 800968e:	4629      	mov	r1, r5
 8009690:	f7ff fcff 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009694:	4644      	mov	r4, r8
                break;
 8009696:	e74b      	b.n	8009530 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009698:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 800969c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80096a0:	00b9      	lsls	r1, r7, #2
 80096a2:	3110      	adds	r1, #16
 80096a4:	4401      	add	r1, r0
 80096a6:	3104      	adds	r1, #4
 80096a8:	e7e9      	b.n	800967e <USBD_StdEPReq+0x170>
              if ((ep_addr & 0x80U) == 0x80U)
 80096aa:	b25b      	sxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	db20      	blt.n	80096f2 <USBD_StdEPReq+0x1e4>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096b0:	f007 020f 	and.w	r2, r7, #15
 80096b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80096b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80096bc:	f8b2 2164 	ldrh.w	r2, [r2, #356]	@ 0x164
 80096c0:	b32a      	cbz	r2, 800970e <USBD_StdEPReq+0x200>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	db28      	blt.n	8009718 <USBD_StdEPReq+0x20a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096c6:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80096ce:	009c      	lsls	r4, r3, #2
 80096d0:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 80096d4:	4434      	add	r4, r6
 80096d6:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096d8:	2f80      	cmp	r7, #128	@ 0x80
 80096da:	bf18      	it	ne
 80096dc:	2f00      	cmpne	r7, #0
 80096de:	d124      	bne.n	800972a <USBD_StdEPReq+0x21c>
                pep->status = 0x0000U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096e4:	2202      	movs	r2, #2
 80096e6:	4621      	mov	r1, r4
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 f8eb 	bl	80098c4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80096ee:	4644      	mov	r4, r8
              break;
 80096f0:	e71e      	b.n	8009530 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096f2:	f007 020f 	and.w	r2, r7, #15
 80096f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80096fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80096fe:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8009700:	2a00      	cmp	r2, #0
 8009702:	d1de      	bne.n	80096c2 <USBD_StdEPReq+0x1b4>
                  USBD_CtlError(pdev, req);
 8009704:	4629      	mov	r1, r5
 8009706:	f7ff fcc4 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800970a:	4644      	mov	r4, r8
                  break;
 800970c:	e710      	b.n	8009530 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 800970e:	4629      	mov	r1, r5
 8009710:	f7ff fcbf 	bl	8009092 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8009714:	4644      	mov	r4, r8
                  break;
 8009716:	e70b      	b.n	8009530 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009718:	f007 037f 	and.w	r3, r7, #127	@ 0x7f
 800971c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009720:	009c      	lsls	r4, r3, #2
 8009722:	3410      	adds	r4, #16
 8009724:	4434      	add	r4, r6
 8009726:	3404      	adds	r4, #4
 8009728:	e7d6      	b.n	80096d8 <USBD_StdEPReq+0x1ca>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800972a:	4639      	mov	r1, r7
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff fa1b 	bl	8008b68 <USBD_LL_IsStallEP>
 8009732:	b110      	cbz	r0, 800973a <USBD_StdEPReq+0x22c>
                pep->status = 0x0001U;
 8009734:	2301      	movs	r3, #1
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	e7d4      	b.n	80096e4 <USBD_StdEPReq+0x1d6>
                pep->status = 0x0000U;
 800973a:	2300      	movs	r3, #0
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	e7d1      	b.n	80096e4 <USBD_StdEPReq+0x1d6>
  USBD_StatusTypeDef ret = USBD_OK;
 8009740:	2400      	movs	r4, #0
 8009742:	e6f5      	b.n	8009530 <USBD_StdEPReq+0x22>
 8009744:	4604      	mov	r4, r0
 8009746:	e6f3      	b.n	8009530 <USBD_StdEPReq+0x22>

08009748 <USBD_GetString>:
  if (desc == NULL)
 8009748:	b300      	cbz	r0, 800978c <USBD_GetString+0x44>
{
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	460d      	mov	r5, r1
 800974e:	4616      	mov	r6, r2
 8009750:	4604      	mov	r4, r0
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009752:	f7ff fc80 	bl	8009056 <USBD_GetLen>
 8009756:	3001      	adds	r0, #1
 8009758:	0043      	lsls	r3, r0, #1
 800975a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975e:	d806      	bhi.n	800976e <USBD_GetString+0x26>
 8009760:	b29b      	uxth	r3, r3
 8009762:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8009764:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009766:	2303      	movs	r3, #3
 8009768:	706b      	strb	r3, [r5, #1]
  idx++;
 800976a:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800976c:	e00a      	b.n	8009784 <USBD_GetString+0x3c>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800976e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009772:	e7f6      	b.n	8009762 <USBD_GetString+0x1a>
    unicode[idx] = *pdesc;
 8009774:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8009776:	3401      	adds	r4, #1
    idx++;
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800977c:	2100      	movs	r1, #0
 800977e:	54a9      	strb	r1, [r5, r2]
    idx++;
 8009780:	3302      	adds	r3, #2
 8009782:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8009784:	7822      	ldrb	r2, [r4, #0]
 8009786:	2a00      	cmp	r2, #0
 8009788:	d1f4      	bne.n	8009774 <USBD_GetString+0x2c>
}
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	4770      	bx	lr
	...

08009790 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009790:	2312      	movs	r3, #18
 8009792:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8009794:	4800      	ldr	r0, [pc, #0]	@ (8009798 <USBD_HS_DeviceDescriptor+0x8>)
 8009796:	4770      	bx	lr
 8009798:	200000d4 	.word	0x200000d4

0800979c <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800979c:	2304      	movs	r3, #4
 800979e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 80097a0:	4800      	ldr	r0, [pc, #0]	@ (80097a4 <USBD_HS_LangIDStrDescriptor+0x8>)
 80097a2:	4770      	bx	lr
 80097a4:	200000d0 	.word	0x200000d0

080097a8 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d21e      	bcs.n	80097ec <IntToUnicode+0x44>
{
 80097ae:	b500      	push	{lr}
 80097b0:	e010      	b.n	80097d4 <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097b2:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 80097b6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 80097ba:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80097bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80097c0:	f10c 0c01 	add.w	ip, ip, #1
 80097c4:	f04f 0e00 	mov.w	lr, #0
 80097c8:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 80097cc:	3301      	adds	r3, #1
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d209      	bcs.n	80097e8 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 80097d4:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 80097d8:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 80097dc:	d2e9      	bcs.n	80097b2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80097de:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 80097e2:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 80097e6:	e7e8      	b.n	80097ba <IntToUnicode+0x12>
  }
}
 80097e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <Get_SerialNum>:
{
 80097f0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <Get_SerialNum+0x30>)
 80097f4:	f8d3 0800 	ldr.w	r0, [r3, #2048]	@ 0x800
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097f8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	@ 0x804
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
  if (deviceserial0 != 0)
 8009800:	18c0      	adds	r0, r0, r3
 8009802:	d100      	bne.n	8009806 <Get_SerialNum+0x16>
}
 8009804:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009806:	4d07      	ldr	r5, [pc, #28]	@ (8009824 <Get_SerialNum+0x34>)
 8009808:	2208      	movs	r2, #8
 800980a:	4629      	mov	r1, r5
 800980c:	f7ff ffcc 	bl	80097a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009810:	2204      	movs	r2, #4
 8009812:	f105 0110 	add.w	r1, r5, #16
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff ffc6 	bl	80097a8 <IntToUnicode>
}
 800981c:	e7f2      	b.n	8009804 <Get_SerialNum+0x14>
 800981e:	bf00      	nop
 8009820:	1ff1e000 	.word	0x1ff1e000
 8009824:	200000b6 	.word	0x200000b6

08009828 <USBD_HS_SerialStrDescriptor>:
{
 8009828:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800982a:	231a      	movs	r3, #26
 800982c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800982e:	f7ff ffdf 	bl	80097f0 <Get_SerialNum>
}
 8009832:	4801      	ldr	r0, [pc, #4]	@ (8009838 <USBD_HS_SerialStrDescriptor+0x10>)
 8009834:	bd08      	pop	{r3, pc}
 8009836:	bf00      	nop
 8009838:	200000b4 	.word	0x200000b4

0800983c <USBD_HS_ProductStrDescriptor>:
{
 800983c:	b508      	push	{r3, lr}
 800983e:	460a      	mov	r2, r1
  if(speed == 0)
 8009840:	b928      	cbnz	r0, 800984e <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009842:	4905      	ldr	r1, [pc, #20]	@ (8009858 <USBD_HS_ProductStrDescriptor+0x1c>)
 8009844:	4805      	ldr	r0, [pc, #20]	@ (800985c <USBD_HS_ProductStrDescriptor+0x20>)
 8009846:	f7ff ff7f 	bl	8009748 <USBD_GetString>
}
 800984a:	4803      	ldr	r0, [pc, #12]	@ (8009858 <USBD_HS_ProductStrDescriptor+0x1c>)
 800984c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800984e:	4902      	ldr	r1, [pc, #8]	@ (8009858 <USBD_HS_ProductStrDescriptor+0x1c>)
 8009850:	4802      	ldr	r0, [pc, #8]	@ (800985c <USBD_HS_ProductStrDescriptor+0x20>)
 8009852:	f7ff ff79 	bl	8009748 <USBD_GetString>
 8009856:	e7f8      	b.n	800984a <USBD_HS_ProductStrDescriptor+0xe>
 8009858:	20001e58 	.word	0x20001e58
 800985c:	08009d9c 	.word	0x08009d9c

08009860 <USBD_HS_ManufacturerStrDescriptor>:
{
 8009860:	b510      	push	{r4, lr}
 8009862:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009864:	4c03      	ldr	r4, [pc, #12]	@ (8009874 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 8009866:	4621      	mov	r1, r4
 8009868:	4803      	ldr	r0, [pc, #12]	@ (8009878 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 800986a:	f7ff ff6d 	bl	8009748 <USBD_GetString>
}
 800986e:	4620      	mov	r0, r4
 8009870:	bd10      	pop	{r4, pc}
 8009872:	bf00      	nop
 8009874:	20001e58 	.word	0x20001e58
 8009878:	08009db4 	.word	0x08009db4

0800987c <USBD_HS_ConfigStrDescriptor>:
{
 800987c:	b508      	push	{r3, lr}
 800987e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8009880:	b928      	cbnz	r0, 800988e <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009882:	4905      	ldr	r1, [pc, #20]	@ (8009898 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8009884:	4805      	ldr	r0, [pc, #20]	@ (800989c <USBD_HS_ConfigStrDescriptor+0x20>)
 8009886:	f7ff ff5f 	bl	8009748 <USBD_GetString>
}
 800988a:	4803      	ldr	r0, [pc, #12]	@ (8009898 <USBD_HS_ConfigStrDescriptor+0x1c>)
 800988c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800988e:	4902      	ldr	r1, [pc, #8]	@ (8009898 <USBD_HS_ConfigStrDescriptor+0x1c>)
 8009890:	4802      	ldr	r0, [pc, #8]	@ (800989c <USBD_HS_ConfigStrDescriptor+0x20>)
 8009892:	f7ff ff59 	bl	8009748 <USBD_GetString>
 8009896:	e7f8      	b.n	800988a <USBD_HS_ConfigStrDescriptor+0xe>
 8009898:	20001e58 	.word	0x20001e58
 800989c:	08009dc8 	.word	0x08009dc8

080098a0 <USBD_HS_InterfaceStrDescriptor>:
{
 80098a0:	b508      	push	{r3, lr}
 80098a2:	460a      	mov	r2, r1
  if(speed == 0)
 80098a4:	b928      	cbnz	r0, 80098b2 <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80098a6:	4905      	ldr	r1, [pc, #20]	@ (80098bc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 80098a8:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <USBD_HS_InterfaceStrDescriptor+0x20>)
 80098aa:	f7ff ff4d 	bl	8009748 <USBD_GetString>
}
 80098ae:	4803      	ldr	r0, [pc, #12]	@ (80098bc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 80098b0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80098b2:	4902      	ldr	r1, [pc, #8]	@ (80098bc <USBD_HS_InterfaceStrDescriptor+0x1c>)
 80098b4:	4802      	ldr	r0, [pc, #8]	@ (80098c0 <USBD_HS_InterfaceStrDescriptor+0x20>)
 80098b6:	f7ff ff47 	bl	8009748 <USBD_GetString>
 80098ba:	e7f8      	b.n	80098ae <USBD_HS_InterfaceStrDescriptor+0xe>
 80098bc:	20001e58 	.word	0x20001e58
 80098c0:	08009dd4 	.word	0x08009dd4

080098c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098c4:	b508      	push	{r3, lr}
 80098c6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098c8:	2202      	movs	r2, #2
 80098ca:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098ce:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098d0:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098d2:	460a      	mov	r2, r1
 80098d4:	2100      	movs	r1, #0
 80098d6:	f7ff f9a5 	bl	8008c24 <USBD_LL_Transmit>

  return USBD_OK;
}
 80098da:	2000      	movs	r0, #0
 80098dc:	bd08      	pop	{r3, pc}

080098de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098de:	b508      	push	{r3, lr}
 80098e0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098e2:	460a      	mov	r2, r1
 80098e4:	2100      	movs	r1, #0
 80098e6:	f7ff f99d 	bl	8008c24 <USBD_LL_Transmit>

  return USBD_OK;
}
 80098ea:	2000      	movs	r0, #0
 80098ec:	bd08      	pop	{r3, pc}

080098ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098ee:	b508      	push	{r3, lr}
 80098f0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098f2:	2203      	movs	r2, #3
 80098f4:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098f8:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098fc:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009900:	460a      	mov	r2, r1
 8009902:	2100      	movs	r1, #0
 8009904:	f7ff f996 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009908:	2000      	movs	r0, #0
 800990a:	bd08      	pop	{r3, pc}

0800990c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800990c:	b508      	push	{r3, lr}
 800990e:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009910:	460a      	mov	r2, r1
 8009912:	2100      	movs	r1, #0
 8009914:	f7ff f98e 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009918:	2000      	movs	r0, #0
 800991a:	bd08      	pop	{r3, pc}

0800991c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800991c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800991e:	2204      	movs	r2, #4
 8009920:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009924:	2300      	movs	r3, #0
 8009926:	461a      	mov	r2, r3
 8009928:	4619      	mov	r1, r3
 800992a:	f7ff f97b 	bl	8008c24 <USBD_LL_Transmit>

  return USBD_OK;
}
 800992e:	2000      	movs	r0, #0
 8009930:	bd08      	pop	{r3, pc}

08009932 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009932:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009934:	2205      	movs	r2, #5
 8009936:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800993a:	2300      	movs	r3, #0
 800993c:	461a      	mov	r2, r3
 800993e:	4619      	mov	r1, r3
 8009940:	f7ff f978 	bl	8008c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009944:	2000      	movs	r0, #0
 8009946:	bd08      	pop	{r3, pc}

08009948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009948:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8009984 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800994c:	f7fe fbec 	bl	8008128 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009950:	f7fe fb82 	bl	8008058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009954:	480c      	ldr	r0, [pc, #48]	@ (8009988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009956:	490d      	ldr	r1, [pc, #52]	@ (800998c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009958:	4a0d      	ldr	r2, [pc, #52]	@ (8009990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800995a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800995c:	e002      	b.n	8009964 <LoopCopyDataInit>

0800995e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800995e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009962:	3304      	adds	r3, #4

08009964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009968:	d3f9      	bcc.n	800995e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800996a:	4a0a      	ldr	r2, [pc, #40]	@ (8009994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800996c:	4c0a      	ldr	r4, [pc, #40]	@ (8009998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800996e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009970:	e001      	b.n	8009976 <LoopFillZerobss>

08009972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009974:	3204      	adds	r2, #4

08009976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009978:	d3fb      	bcc.n	8009972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800997a:	f000 f819 	bl	80099b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800997e:	f7f6 ffbf 	bl	8000900 <main>
  bx  lr
 8009982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800998c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8009990:	08009dfc 	.word	0x08009dfc
  ldr r2, =_sbss
 8009994:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8009998:	20002058 	.word	0x20002058

0800999c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800999c:	e7fe      	b.n	800999c <ADC3_IRQHandler>

0800999e <memset>:
 800999e:	4402      	add	r2, r0
 80099a0:	4603      	mov	r3, r0
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d100      	bne.n	80099a8 <memset+0xa>
 80099a6:	4770      	bx	lr
 80099a8:	f803 1b01 	strb.w	r1, [r3], #1
 80099ac:	e7f9      	b.n	80099a2 <memset+0x4>
	...

080099b0 <__libc_init_array>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <__libc_init_array+0x38>)
 80099b4:	4d0d      	ldr	r5, [pc, #52]	@ (80099ec <__libc_init_array+0x3c>)
 80099b6:	1b5b      	subs	r3, r3, r5
 80099b8:	109c      	asrs	r4, r3, #2
 80099ba:	2600      	movs	r6, #0
 80099bc:	42a6      	cmp	r6, r4
 80099be:	d109      	bne.n	80099d4 <__libc_init_array+0x24>
 80099c0:	f000 f81a 	bl	80099f8 <_init>
 80099c4:	4d0a      	ldr	r5, [pc, #40]	@ (80099f0 <__libc_init_array+0x40>)
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <__libc_init_array+0x44>)
 80099c8:	1b5b      	subs	r3, r3, r5
 80099ca:	109c      	asrs	r4, r3, #2
 80099cc:	2600      	movs	r6, #0
 80099ce:	42a6      	cmp	r6, r4
 80099d0:	d105      	bne.n	80099de <__libc_init_array+0x2e>
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d8:	4798      	blx	r3
 80099da:	3601      	adds	r6, #1
 80099dc:	e7ee      	b.n	80099bc <__libc_init_array+0xc>
 80099de:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e2:	4798      	blx	r3
 80099e4:	3601      	adds	r6, #1
 80099e6:	e7f2      	b.n	80099ce <__libc_init_array+0x1e>
 80099e8:	08009df4 	.word	0x08009df4
 80099ec:	08009df4 	.word	0x08009df4
 80099f0:	08009df4 	.word	0x08009df4
 80099f4:	08009df8 	.word	0x08009df8

080099f8 <_init>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr

08009a04 <_fini>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	bf00      	nop
 8009a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0a:	bc08      	pop	{r3}
 8009a0c:	469e      	mov	lr, r3
 8009a0e:	4770      	bx	lr
